
hackathon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800422c  0800422c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800422c  0800422c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800422c  0800422c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800422c  0800422c  0001422c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004230  08004230  00014230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004234  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000010  08004244  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08004244  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008437  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001760  00000000  00000000  0002846f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  00029bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000700  00000000  00000000  0002a388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b47c  00000000  00000000  0002aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000845a  00000000  00000000  00045f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b31a0  00000000  00000000  0004e35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001014fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bec  00000000  00000000  00101554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004154 	.word	0x08004154

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08004154 	.word	0x08004154

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_d2uiz>:
 800021c:	b570      	push	{r4, r5, r6, lr}
 800021e:	2200      	movs	r2, #0
 8000220:	4b0c      	ldr	r3, [pc, #48]	; (8000254 <__aeabi_d2uiz+0x38>)
 8000222:	0004      	movs	r4, r0
 8000224:	000d      	movs	r5, r1
 8000226:	f000 ff21 	bl	800106c <__aeabi_dcmpge>
 800022a:	2800      	cmp	r0, #0
 800022c:	d104      	bne.n	8000238 <__aeabi_d2uiz+0x1c>
 800022e:	0020      	movs	r0, r4
 8000230:	0029      	movs	r1, r5
 8000232:	f000 fe8b 	bl	8000f4c <__aeabi_d2iz>
 8000236:	bd70      	pop	{r4, r5, r6, pc}
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <__aeabi_d2uiz+0x38>)
 800023a:	2200      	movs	r2, #0
 800023c:	0020      	movs	r0, r4
 800023e:	0029      	movs	r1, r5
 8000240:	f000 faf2 	bl	8000828 <__aeabi_dsub>
 8000244:	f000 fe82 	bl	8000f4c <__aeabi_d2iz>
 8000248:	2380      	movs	r3, #128	; 0x80
 800024a:	061b      	lsls	r3, r3, #24
 800024c:	469c      	mov	ip, r3
 800024e:	4460      	add	r0, ip
 8000250:	e7f1      	b.n	8000236 <__aeabi_d2uiz+0x1a>
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	41e00000 	.word	0x41e00000

08000258 <__aeabi_ddiv>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	4681      	mov	r9, r0
 8000266:	0005      	movs	r5, r0
 8000268:	030c      	lsls	r4, r1, #12
 800026a:	0048      	lsls	r0, r1, #1
 800026c:	4692      	mov	sl, r2
 800026e:	001f      	movs	r7, r3
 8000270:	b085      	sub	sp, #20
 8000272:	0b24      	lsrs	r4, r4, #12
 8000274:	0d40      	lsrs	r0, r0, #21
 8000276:	0fce      	lsrs	r6, r1, #31
 8000278:	2800      	cmp	r0, #0
 800027a:	d059      	beq.n	8000330 <__aeabi_ddiv+0xd8>
 800027c:	4b87      	ldr	r3, [pc, #540]	; (800049c <__aeabi_ddiv+0x244>)
 800027e:	4298      	cmp	r0, r3
 8000280:	d100      	bne.n	8000284 <__aeabi_ddiv+0x2c>
 8000282:	e098      	b.n	80003b6 <__aeabi_ddiv+0x15e>
 8000284:	0f6b      	lsrs	r3, r5, #29
 8000286:	00e4      	lsls	r4, r4, #3
 8000288:	431c      	orrs	r4, r3
 800028a:	2380      	movs	r3, #128	; 0x80
 800028c:	041b      	lsls	r3, r3, #16
 800028e:	4323      	orrs	r3, r4
 8000290:	4698      	mov	r8, r3
 8000292:	4b83      	ldr	r3, [pc, #524]	; (80004a0 <__aeabi_ddiv+0x248>)
 8000294:	00ed      	lsls	r5, r5, #3
 8000296:	469b      	mov	fp, r3
 8000298:	2300      	movs	r3, #0
 800029a:	4699      	mov	r9, r3
 800029c:	4483      	add	fp, r0
 800029e:	9300      	str	r3, [sp, #0]
 80002a0:	033c      	lsls	r4, r7, #12
 80002a2:	007b      	lsls	r3, r7, #1
 80002a4:	4650      	mov	r0, sl
 80002a6:	0b24      	lsrs	r4, r4, #12
 80002a8:	0d5b      	lsrs	r3, r3, #21
 80002aa:	0fff      	lsrs	r7, r7, #31
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d067      	beq.n	8000380 <__aeabi_ddiv+0x128>
 80002b0:	4a7a      	ldr	r2, [pc, #488]	; (800049c <__aeabi_ddiv+0x244>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d018      	beq.n	80002e8 <__aeabi_ddiv+0x90>
 80002b6:	497a      	ldr	r1, [pc, #488]	; (80004a0 <__aeabi_ddiv+0x248>)
 80002b8:	0f42      	lsrs	r2, r0, #29
 80002ba:	468c      	mov	ip, r1
 80002bc:	00e4      	lsls	r4, r4, #3
 80002be:	4659      	mov	r1, fp
 80002c0:	4314      	orrs	r4, r2
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	4463      	add	r3, ip
 80002c6:	0412      	lsls	r2, r2, #16
 80002c8:	1acb      	subs	r3, r1, r3
 80002ca:	4314      	orrs	r4, r2
 80002cc:	469b      	mov	fp, r3
 80002ce:	00c2      	lsls	r2, r0, #3
 80002d0:	2000      	movs	r0, #0
 80002d2:	0033      	movs	r3, r6
 80002d4:	407b      	eors	r3, r7
 80002d6:	469a      	mov	sl, r3
 80002d8:	464b      	mov	r3, r9
 80002da:	2b0f      	cmp	r3, #15
 80002dc:	d900      	bls.n	80002e0 <__aeabi_ddiv+0x88>
 80002de:	e0ef      	b.n	80004c0 <__aeabi_ddiv+0x268>
 80002e0:	4970      	ldr	r1, [pc, #448]	; (80004a4 <__aeabi_ddiv+0x24c>)
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	58cb      	ldr	r3, [r1, r3]
 80002e6:	469f      	mov	pc, r3
 80002e8:	4b6f      	ldr	r3, [pc, #444]	; (80004a8 <__aeabi_ddiv+0x250>)
 80002ea:	4652      	mov	r2, sl
 80002ec:	469c      	mov	ip, r3
 80002ee:	4322      	orrs	r2, r4
 80002f0:	44e3      	add	fp, ip
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d000      	beq.n	80002f8 <__aeabi_ddiv+0xa0>
 80002f6:	e095      	b.n	8000424 <__aeabi_ddiv+0x1cc>
 80002f8:	4649      	mov	r1, r9
 80002fa:	2302      	movs	r3, #2
 80002fc:	4319      	orrs	r1, r3
 80002fe:	4689      	mov	r9, r1
 8000300:	2400      	movs	r4, #0
 8000302:	2002      	movs	r0, #2
 8000304:	e7e5      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 8000306:	2300      	movs	r3, #0
 8000308:	2400      	movs	r4, #0
 800030a:	2500      	movs	r5, #0
 800030c:	4652      	mov	r2, sl
 800030e:	051b      	lsls	r3, r3, #20
 8000310:	4323      	orrs	r3, r4
 8000312:	07d2      	lsls	r2, r2, #31
 8000314:	4313      	orrs	r3, r2
 8000316:	0028      	movs	r0, r5
 8000318:	0019      	movs	r1, r3
 800031a:	b005      	add	sp, #20
 800031c:	bcf0      	pop	{r4, r5, r6, r7}
 800031e:	46bb      	mov	fp, r7
 8000320:	46b2      	mov	sl, r6
 8000322:	46a9      	mov	r9, r5
 8000324:	46a0      	mov	r8, r4
 8000326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000328:	2400      	movs	r4, #0
 800032a:	2500      	movs	r5, #0
 800032c:	4b5b      	ldr	r3, [pc, #364]	; (800049c <__aeabi_ddiv+0x244>)
 800032e:	e7ed      	b.n	800030c <__aeabi_ddiv+0xb4>
 8000330:	464b      	mov	r3, r9
 8000332:	4323      	orrs	r3, r4
 8000334:	4698      	mov	r8, r3
 8000336:	d100      	bne.n	800033a <__aeabi_ddiv+0xe2>
 8000338:	e089      	b.n	800044e <__aeabi_ddiv+0x1f6>
 800033a:	2c00      	cmp	r4, #0
 800033c:	d100      	bne.n	8000340 <__aeabi_ddiv+0xe8>
 800033e:	e1e0      	b.n	8000702 <__aeabi_ddiv+0x4aa>
 8000340:	0020      	movs	r0, r4
 8000342:	f000 fe9d 	bl	8001080 <__clzsi2>
 8000346:	0001      	movs	r1, r0
 8000348:	0002      	movs	r2, r0
 800034a:	390b      	subs	r1, #11
 800034c:	231d      	movs	r3, #29
 800034e:	1a5b      	subs	r3, r3, r1
 8000350:	4649      	mov	r1, r9
 8000352:	0010      	movs	r0, r2
 8000354:	40d9      	lsrs	r1, r3
 8000356:	3808      	subs	r0, #8
 8000358:	4084      	lsls	r4, r0
 800035a:	000b      	movs	r3, r1
 800035c:	464d      	mov	r5, r9
 800035e:	4323      	orrs	r3, r4
 8000360:	4698      	mov	r8, r3
 8000362:	4085      	lsls	r5, r0
 8000364:	4851      	ldr	r0, [pc, #324]	; (80004ac <__aeabi_ddiv+0x254>)
 8000366:	033c      	lsls	r4, r7, #12
 8000368:	1a83      	subs	r3, r0, r2
 800036a:	469b      	mov	fp, r3
 800036c:	2300      	movs	r3, #0
 800036e:	4699      	mov	r9, r3
 8000370:	9300      	str	r3, [sp, #0]
 8000372:	007b      	lsls	r3, r7, #1
 8000374:	4650      	mov	r0, sl
 8000376:	0b24      	lsrs	r4, r4, #12
 8000378:	0d5b      	lsrs	r3, r3, #21
 800037a:	0fff      	lsrs	r7, r7, #31
 800037c:	2b00      	cmp	r3, #0
 800037e:	d197      	bne.n	80002b0 <__aeabi_ddiv+0x58>
 8000380:	4652      	mov	r2, sl
 8000382:	4322      	orrs	r2, r4
 8000384:	d055      	beq.n	8000432 <__aeabi_ddiv+0x1da>
 8000386:	2c00      	cmp	r4, #0
 8000388:	d100      	bne.n	800038c <__aeabi_ddiv+0x134>
 800038a:	e1ca      	b.n	8000722 <__aeabi_ddiv+0x4ca>
 800038c:	0020      	movs	r0, r4
 800038e:	f000 fe77 	bl	8001080 <__clzsi2>
 8000392:	0002      	movs	r2, r0
 8000394:	3a0b      	subs	r2, #11
 8000396:	231d      	movs	r3, #29
 8000398:	0001      	movs	r1, r0
 800039a:	1a9b      	subs	r3, r3, r2
 800039c:	4652      	mov	r2, sl
 800039e:	3908      	subs	r1, #8
 80003a0:	40da      	lsrs	r2, r3
 80003a2:	408c      	lsls	r4, r1
 80003a4:	4314      	orrs	r4, r2
 80003a6:	4652      	mov	r2, sl
 80003a8:	408a      	lsls	r2, r1
 80003aa:	4b41      	ldr	r3, [pc, #260]	; (80004b0 <__aeabi_ddiv+0x258>)
 80003ac:	4458      	add	r0, fp
 80003ae:	469b      	mov	fp, r3
 80003b0:	4483      	add	fp, r0
 80003b2:	2000      	movs	r0, #0
 80003b4:	e78d      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 80003b6:	464b      	mov	r3, r9
 80003b8:	4323      	orrs	r3, r4
 80003ba:	4698      	mov	r8, r3
 80003bc:	d140      	bne.n	8000440 <__aeabi_ddiv+0x1e8>
 80003be:	2308      	movs	r3, #8
 80003c0:	4699      	mov	r9, r3
 80003c2:	3b06      	subs	r3, #6
 80003c4:	2500      	movs	r5, #0
 80003c6:	4683      	mov	fp, r0
 80003c8:	9300      	str	r3, [sp, #0]
 80003ca:	e769      	b.n	80002a0 <__aeabi_ddiv+0x48>
 80003cc:	46b2      	mov	sl, r6
 80003ce:	9b00      	ldr	r3, [sp, #0]
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d0a9      	beq.n	8000328 <__aeabi_ddiv+0xd0>
 80003d4:	2b03      	cmp	r3, #3
 80003d6:	d100      	bne.n	80003da <__aeabi_ddiv+0x182>
 80003d8:	e211      	b.n	80007fe <__aeabi_ddiv+0x5a6>
 80003da:	2b01      	cmp	r3, #1
 80003dc:	d093      	beq.n	8000306 <__aeabi_ddiv+0xae>
 80003de:	4a35      	ldr	r2, [pc, #212]	; (80004b4 <__aeabi_ddiv+0x25c>)
 80003e0:	445a      	add	r2, fp
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	dc00      	bgt.n	80003e8 <__aeabi_ddiv+0x190>
 80003e6:	e13c      	b.n	8000662 <__aeabi_ddiv+0x40a>
 80003e8:	076b      	lsls	r3, r5, #29
 80003ea:	d000      	beq.n	80003ee <__aeabi_ddiv+0x196>
 80003ec:	e1a7      	b.n	800073e <__aeabi_ddiv+0x4e6>
 80003ee:	08ed      	lsrs	r5, r5, #3
 80003f0:	4643      	mov	r3, r8
 80003f2:	01db      	lsls	r3, r3, #7
 80003f4:	d506      	bpl.n	8000404 <__aeabi_ddiv+0x1ac>
 80003f6:	4642      	mov	r2, r8
 80003f8:	4b2f      	ldr	r3, [pc, #188]	; (80004b8 <__aeabi_ddiv+0x260>)
 80003fa:	401a      	ands	r2, r3
 80003fc:	4690      	mov	r8, r2
 80003fe:	2280      	movs	r2, #128	; 0x80
 8000400:	00d2      	lsls	r2, r2, #3
 8000402:	445a      	add	r2, fp
 8000404:	4b2d      	ldr	r3, [pc, #180]	; (80004bc <__aeabi_ddiv+0x264>)
 8000406:	429a      	cmp	r2, r3
 8000408:	dc8e      	bgt.n	8000328 <__aeabi_ddiv+0xd0>
 800040a:	4643      	mov	r3, r8
 800040c:	0552      	lsls	r2, r2, #21
 800040e:	0758      	lsls	r0, r3, #29
 8000410:	025c      	lsls	r4, r3, #9
 8000412:	4305      	orrs	r5, r0
 8000414:	0b24      	lsrs	r4, r4, #12
 8000416:	0d53      	lsrs	r3, r2, #21
 8000418:	e778      	b.n	800030c <__aeabi_ddiv+0xb4>
 800041a:	46ba      	mov	sl, r7
 800041c:	46a0      	mov	r8, r4
 800041e:	0015      	movs	r5, r2
 8000420:	9000      	str	r0, [sp, #0]
 8000422:	e7d4      	b.n	80003ce <__aeabi_ddiv+0x176>
 8000424:	464a      	mov	r2, r9
 8000426:	2303      	movs	r3, #3
 8000428:	431a      	orrs	r2, r3
 800042a:	4691      	mov	r9, r2
 800042c:	2003      	movs	r0, #3
 800042e:	4652      	mov	r2, sl
 8000430:	e74f      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 8000432:	4649      	mov	r1, r9
 8000434:	2301      	movs	r3, #1
 8000436:	4319      	orrs	r1, r3
 8000438:	4689      	mov	r9, r1
 800043a:	2400      	movs	r4, #0
 800043c:	2001      	movs	r0, #1
 800043e:	e748      	b.n	80002d2 <__aeabi_ddiv+0x7a>
 8000440:	230c      	movs	r3, #12
 8000442:	4699      	mov	r9, r3
 8000444:	3b09      	subs	r3, #9
 8000446:	46a0      	mov	r8, r4
 8000448:	4683      	mov	fp, r0
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	e728      	b.n	80002a0 <__aeabi_ddiv+0x48>
 800044e:	2304      	movs	r3, #4
 8000450:	4699      	mov	r9, r3
 8000452:	2300      	movs	r3, #0
 8000454:	469b      	mov	fp, r3
 8000456:	3301      	adds	r3, #1
 8000458:	2500      	movs	r5, #0
 800045a:	9300      	str	r3, [sp, #0]
 800045c:	e720      	b.n	80002a0 <__aeabi_ddiv+0x48>
 800045e:	2300      	movs	r3, #0
 8000460:	2480      	movs	r4, #128	; 0x80
 8000462:	469a      	mov	sl, r3
 8000464:	2500      	movs	r5, #0
 8000466:	4b0d      	ldr	r3, [pc, #52]	; (800049c <__aeabi_ddiv+0x244>)
 8000468:	0324      	lsls	r4, r4, #12
 800046a:	e74f      	b.n	800030c <__aeabi_ddiv+0xb4>
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	4641      	mov	r1, r8
 8000470:	031b      	lsls	r3, r3, #12
 8000472:	4219      	tst	r1, r3
 8000474:	d008      	beq.n	8000488 <__aeabi_ddiv+0x230>
 8000476:	421c      	tst	r4, r3
 8000478:	d106      	bne.n	8000488 <__aeabi_ddiv+0x230>
 800047a:	431c      	orrs	r4, r3
 800047c:	0324      	lsls	r4, r4, #12
 800047e:	46ba      	mov	sl, r7
 8000480:	0015      	movs	r5, r2
 8000482:	4b06      	ldr	r3, [pc, #24]	; (800049c <__aeabi_ddiv+0x244>)
 8000484:	0b24      	lsrs	r4, r4, #12
 8000486:	e741      	b.n	800030c <__aeabi_ddiv+0xb4>
 8000488:	2480      	movs	r4, #128	; 0x80
 800048a:	4643      	mov	r3, r8
 800048c:	0324      	lsls	r4, r4, #12
 800048e:	431c      	orrs	r4, r3
 8000490:	0324      	lsls	r4, r4, #12
 8000492:	46b2      	mov	sl, r6
 8000494:	4b01      	ldr	r3, [pc, #4]	; (800049c <__aeabi_ddiv+0x244>)
 8000496:	0b24      	lsrs	r4, r4, #12
 8000498:	e738      	b.n	800030c <__aeabi_ddiv+0xb4>
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	000007ff 	.word	0x000007ff
 80004a0:	fffffc01 	.word	0xfffffc01
 80004a4:	0800416c 	.word	0x0800416c
 80004a8:	fffff801 	.word	0xfffff801
 80004ac:	fffffc0d 	.word	0xfffffc0d
 80004b0:	000003f3 	.word	0x000003f3
 80004b4:	000003ff 	.word	0x000003ff
 80004b8:	feffffff 	.word	0xfeffffff
 80004bc:	000007fe 	.word	0x000007fe
 80004c0:	4544      	cmp	r4, r8
 80004c2:	d200      	bcs.n	80004c6 <__aeabi_ddiv+0x26e>
 80004c4:	e116      	b.n	80006f4 <__aeabi_ddiv+0x49c>
 80004c6:	d100      	bne.n	80004ca <__aeabi_ddiv+0x272>
 80004c8:	e111      	b.n	80006ee <__aeabi_ddiv+0x496>
 80004ca:	2301      	movs	r3, #1
 80004cc:	425b      	negs	r3, r3
 80004ce:	469c      	mov	ip, r3
 80004d0:	002e      	movs	r6, r5
 80004d2:	4640      	mov	r0, r8
 80004d4:	2500      	movs	r5, #0
 80004d6:	44e3      	add	fp, ip
 80004d8:	0223      	lsls	r3, r4, #8
 80004da:	0e14      	lsrs	r4, r2, #24
 80004dc:	431c      	orrs	r4, r3
 80004de:	0c1b      	lsrs	r3, r3, #16
 80004e0:	4699      	mov	r9, r3
 80004e2:	0423      	lsls	r3, r4, #16
 80004e4:	0c1f      	lsrs	r7, r3, #16
 80004e6:	0212      	lsls	r2, r2, #8
 80004e8:	4649      	mov	r1, r9
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9701      	str	r7, [sp, #4]
 80004ee:	f7ff fe8f 	bl	8000210 <__aeabi_uidivmod>
 80004f2:	0002      	movs	r2, r0
 80004f4:	437a      	muls	r2, r7
 80004f6:	040b      	lsls	r3, r1, #16
 80004f8:	0c31      	lsrs	r1, r6, #16
 80004fa:	4680      	mov	r8, r0
 80004fc:	4319      	orrs	r1, r3
 80004fe:	428a      	cmp	r2, r1
 8000500:	d90b      	bls.n	800051a <__aeabi_ddiv+0x2c2>
 8000502:	2301      	movs	r3, #1
 8000504:	425b      	negs	r3, r3
 8000506:	469c      	mov	ip, r3
 8000508:	1909      	adds	r1, r1, r4
 800050a:	44e0      	add	r8, ip
 800050c:	428c      	cmp	r4, r1
 800050e:	d804      	bhi.n	800051a <__aeabi_ddiv+0x2c2>
 8000510:	428a      	cmp	r2, r1
 8000512:	d902      	bls.n	800051a <__aeabi_ddiv+0x2c2>
 8000514:	1e83      	subs	r3, r0, #2
 8000516:	4698      	mov	r8, r3
 8000518:	1909      	adds	r1, r1, r4
 800051a:	1a88      	subs	r0, r1, r2
 800051c:	4649      	mov	r1, r9
 800051e:	f7ff fe77 	bl	8000210 <__aeabi_uidivmod>
 8000522:	0409      	lsls	r1, r1, #16
 8000524:	468c      	mov	ip, r1
 8000526:	0431      	lsls	r1, r6, #16
 8000528:	4666      	mov	r6, ip
 800052a:	9a01      	ldr	r2, [sp, #4]
 800052c:	0c09      	lsrs	r1, r1, #16
 800052e:	4342      	muls	r2, r0
 8000530:	0003      	movs	r3, r0
 8000532:	4331      	orrs	r1, r6
 8000534:	428a      	cmp	r2, r1
 8000536:	d904      	bls.n	8000542 <__aeabi_ddiv+0x2ea>
 8000538:	1909      	adds	r1, r1, r4
 800053a:	3b01      	subs	r3, #1
 800053c:	428c      	cmp	r4, r1
 800053e:	d800      	bhi.n	8000542 <__aeabi_ddiv+0x2ea>
 8000540:	e111      	b.n	8000766 <__aeabi_ddiv+0x50e>
 8000542:	1a89      	subs	r1, r1, r2
 8000544:	4642      	mov	r2, r8
 8000546:	9e00      	ldr	r6, [sp, #0]
 8000548:	0412      	lsls	r2, r2, #16
 800054a:	431a      	orrs	r2, r3
 800054c:	0c33      	lsrs	r3, r6, #16
 800054e:	001f      	movs	r7, r3
 8000550:	0c10      	lsrs	r0, r2, #16
 8000552:	4690      	mov	r8, r2
 8000554:	9302      	str	r3, [sp, #8]
 8000556:	0413      	lsls	r3, r2, #16
 8000558:	0432      	lsls	r2, r6, #16
 800055a:	0c16      	lsrs	r6, r2, #16
 800055c:	0032      	movs	r2, r6
 800055e:	0c1b      	lsrs	r3, r3, #16
 8000560:	435a      	muls	r2, r3
 8000562:	9603      	str	r6, [sp, #12]
 8000564:	437b      	muls	r3, r7
 8000566:	4346      	muls	r6, r0
 8000568:	4378      	muls	r0, r7
 800056a:	0c17      	lsrs	r7, r2, #16
 800056c:	46bc      	mov	ip, r7
 800056e:	199b      	adds	r3, r3, r6
 8000570:	4463      	add	r3, ip
 8000572:	429e      	cmp	r6, r3
 8000574:	d903      	bls.n	800057e <__aeabi_ddiv+0x326>
 8000576:	2680      	movs	r6, #128	; 0x80
 8000578:	0276      	lsls	r6, r6, #9
 800057a:	46b4      	mov	ip, r6
 800057c:	4460      	add	r0, ip
 800057e:	0c1e      	lsrs	r6, r3, #16
 8000580:	1830      	adds	r0, r6, r0
 8000582:	0416      	lsls	r6, r2, #16
 8000584:	041b      	lsls	r3, r3, #16
 8000586:	0c36      	lsrs	r6, r6, #16
 8000588:	199e      	adds	r6, r3, r6
 800058a:	4281      	cmp	r1, r0
 800058c:	d200      	bcs.n	8000590 <__aeabi_ddiv+0x338>
 800058e:	e09c      	b.n	80006ca <__aeabi_ddiv+0x472>
 8000590:	d100      	bne.n	8000594 <__aeabi_ddiv+0x33c>
 8000592:	e097      	b.n	80006c4 <__aeabi_ddiv+0x46c>
 8000594:	1bae      	subs	r6, r5, r6
 8000596:	1a09      	subs	r1, r1, r0
 8000598:	42b5      	cmp	r5, r6
 800059a:	4180      	sbcs	r0, r0
 800059c:	4240      	negs	r0, r0
 800059e:	1a08      	subs	r0, r1, r0
 80005a0:	4284      	cmp	r4, r0
 80005a2:	d100      	bne.n	80005a6 <__aeabi_ddiv+0x34e>
 80005a4:	e111      	b.n	80007ca <__aeabi_ddiv+0x572>
 80005a6:	4649      	mov	r1, r9
 80005a8:	f7ff fe32 	bl	8000210 <__aeabi_uidivmod>
 80005ac:	9a01      	ldr	r2, [sp, #4]
 80005ae:	040b      	lsls	r3, r1, #16
 80005b0:	4342      	muls	r2, r0
 80005b2:	0c31      	lsrs	r1, r6, #16
 80005b4:	0005      	movs	r5, r0
 80005b6:	4319      	orrs	r1, r3
 80005b8:	428a      	cmp	r2, r1
 80005ba:	d907      	bls.n	80005cc <__aeabi_ddiv+0x374>
 80005bc:	1909      	adds	r1, r1, r4
 80005be:	3d01      	subs	r5, #1
 80005c0:	428c      	cmp	r4, r1
 80005c2:	d803      	bhi.n	80005cc <__aeabi_ddiv+0x374>
 80005c4:	428a      	cmp	r2, r1
 80005c6:	d901      	bls.n	80005cc <__aeabi_ddiv+0x374>
 80005c8:	1e85      	subs	r5, r0, #2
 80005ca:	1909      	adds	r1, r1, r4
 80005cc:	1a88      	subs	r0, r1, r2
 80005ce:	4649      	mov	r1, r9
 80005d0:	f7ff fe1e 	bl	8000210 <__aeabi_uidivmod>
 80005d4:	0409      	lsls	r1, r1, #16
 80005d6:	468c      	mov	ip, r1
 80005d8:	0431      	lsls	r1, r6, #16
 80005da:	4666      	mov	r6, ip
 80005dc:	9a01      	ldr	r2, [sp, #4]
 80005de:	0c09      	lsrs	r1, r1, #16
 80005e0:	4342      	muls	r2, r0
 80005e2:	0003      	movs	r3, r0
 80005e4:	4331      	orrs	r1, r6
 80005e6:	428a      	cmp	r2, r1
 80005e8:	d907      	bls.n	80005fa <__aeabi_ddiv+0x3a2>
 80005ea:	1909      	adds	r1, r1, r4
 80005ec:	3b01      	subs	r3, #1
 80005ee:	428c      	cmp	r4, r1
 80005f0:	d803      	bhi.n	80005fa <__aeabi_ddiv+0x3a2>
 80005f2:	428a      	cmp	r2, r1
 80005f4:	d901      	bls.n	80005fa <__aeabi_ddiv+0x3a2>
 80005f6:	1e83      	subs	r3, r0, #2
 80005f8:	1909      	adds	r1, r1, r4
 80005fa:	9e03      	ldr	r6, [sp, #12]
 80005fc:	1a89      	subs	r1, r1, r2
 80005fe:	0032      	movs	r2, r6
 8000600:	042d      	lsls	r5, r5, #16
 8000602:	431d      	orrs	r5, r3
 8000604:	9f02      	ldr	r7, [sp, #8]
 8000606:	042b      	lsls	r3, r5, #16
 8000608:	0c1b      	lsrs	r3, r3, #16
 800060a:	435a      	muls	r2, r3
 800060c:	437b      	muls	r3, r7
 800060e:	469c      	mov	ip, r3
 8000610:	0c28      	lsrs	r0, r5, #16
 8000612:	4346      	muls	r6, r0
 8000614:	0c13      	lsrs	r3, r2, #16
 8000616:	44b4      	add	ip, r6
 8000618:	4463      	add	r3, ip
 800061a:	4378      	muls	r0, r7
 800061c:	429e      	cmp	r6, r3
 800061e:	d903      	bls.n	8000628 <__aeabi_ddiv+0x3d0>
 8000620:	2680      	movs	r6, #128	; 0x80
 8000622:	0276      	lsls	r6, r6, #9
 8000624:	46b4      	mov	ip, r6
 8000626:	4460      	add	r0, ip
 8000628:	0c1e      	lsrs	r6, r3, #16
 800062a:	0412      	lsls	r2, r2, #16
 800062c:	041b      	lsls	r3, r3, #16
 800062e:	0c12      	lsrs	r2, r2, #16
 8000630:	1830      	adds	r0, r6, r0
 8000632:	189b      	adds	r3, r3, r2
 8000634:	4281      	cmp	r1, r0
 8000636:	d306      	bcc.n	8000646 <__aeabi_ddiv+0x3ee>
 8000638:	d002      	beq.n	8000640 <__aeabi_ddiv+0x3e8>
 800063a:	2301      	movs	r3, #1
 800063c:	431d      	orrs	r5, r3
 800063e:	e6ce      	b.n	80003de <__aeabi_ddiv+0x186>
 8000640:	2b00      	cmp	r3, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_ddiv+0x3ee>
 8000644:	e6cb      	b.n	80003de <__aeabi_ddiv+0x186>
 8000646:	1861      	adds	r1, r4, r1
 8000648:	1e6e      	subs	r6, r5, #1
 800064a:	42a1      	cmp	r1, r4
 800064c:	d200      	bcs.n	8000650 <__aeabi_ddiv+0x3f8>
 800064e:	e0a4      	b.n	800079a <__aeabi_ddiv+0x542>
 8000650:	4281      	cmp	r1, r0
 8000652:	d200      	bcs.n	8000656 <__aeabi_ddiv+0x3fe>
 8000654:	e0c9      	b.n	80007ea <__aeabi_ddiv+0x592>
 8000656:	d100      	bne.n	800065a <__aeabi_ddiv+0x402>
 8000658:	e0d9      	b.n	800080e <__aeabi_ddiv+0x5b6>
 800065a:	0035      	movs	r5, r6
 800065c:	e7ed      	b.n	800063a <__aeabi_ddiv+0x3e2>
 800065e:	2501      	movs	r5, #1
 8000660:	426d      	negs	r5, r5
 8000662:	2101      	movs	r1, #1
 8000664:	1a89      	subs	r1, r1, r2
 8000666:	2938      	cmp	r1, #56	; 0x38
 8000668:	dd00      	ble.n	800066c <__aeabi_ddiv+0x414>
 800066a:	e64c      	b.n	8000306 <__aeabi_ddiv+0xae>
 800066c:	291f      	cmp	r1, #31
 800066e:	dc00      	bgt.n	8000672 <__aeabi_ddiv+0x41a>
 8000670:	e07f      	b.n	8000772 <__aeabi_ddiv+0x51a>
 8000672:	231f      	movs	r3, #31
 8000674:	425b      	negs	r3, r3
 8000676:	1a9a      	subs	r2, r3, r2
 8000678:	4643      	mov	r3, r8
 800067a:	40d3      	lsrs	r3, r2
 800067c:	2920      	cmp	r1, #32
 800067e:	d004      	beq.n	800068a <__aeabi_ddiv+0x432>
 8000680:	4644      	mov	r4, r8
 8000682:	4a65      	ldr	r2, [pc, #404]	; (8000818 <__aeabi_ddiv+0x5c0>)
 8000684:	445a      	add	r2, fp
 8000686:	4094      	lsls	r4, r2
 8000688:	4325      	orrs	r5, r4
 800068a:	1e6a      	subs	r2, r5, #1
 800068c:	4195      	sbcs	r5, r2
 800068e:	2207      	movs	r2, #7
 8000690:	432b      	orrs	r3, r5
 8000692:	0015      	movs	r5, r2
 8000694:	2400      	movs	r4, #0
 8000696:	401d      	ands	r5, r3
 8000698:	421a      	tst	r2, r3
 800069a:	d100      	bne.n	800069e <__aeabi_ddiv+0x446>
 800069c:	e0a1      	b.n	80007e2 <__aeabi_ddiv+0x58a>
 800069e:	220f      	movs	r2, #15
 80006a0:	2400      	movs	r4, #0
 80006a2:	401a      	ands	r2, r3
 80006a4:	2a04      	cmp	r2, #4
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x452>
 80006a8:	e098      	b.n	80007dc <__aeabi_ddiv+0x584>
 80006aa:	1d1a      	adds	r2, r3, #4
 80006ac:	429a      	cmp	r2, r3
 80006ae:	419b      	sbcs	r3, r3
 80006b0:	425b      	negs	r3, r3
 80006b2:	18e4      	adds	r4, r4, r3
 80006b4:	0013      	movs	r3, r2
 80006b6:	0222      	lsls	r2, r4, #8
 80006b8:	d400      	bmi.n	80006bc <__aeabi_ddiv+0x464>
 80006ba:	e08f      	b.n	80007dc <__aeabi_ddiv+0x584>
 80006bc:	2301      	movs	r3, #1
 80006be:	2400      	movs	r4, #0
 80006c0:	2500      	movs	r5, #0
 80006c2:	e623      	b.n	800030c <__aeabi_ddiv+0xb4>
 80006c4:	42b5      	cmp	r5, r6
 80006c6:	d300      	bcc.n	80006ca <__aeabi_ddiv+0x472>
 80006c8:	e764      	b.n	8000594 <__aeabi_ddiv+0x33c>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1e5a      	subs	r2, r3, #1
 80006ce:	9b00      	ldr	r3, [sp, #0]
 80006d0:	469c      	mov	ip, r3
 80006d2:	4465      	add	r5, ip
 80006d4:	001f      	movs	r7, r3
 80006d6:	429d      	cmp	r5, r3
 80006d8:	419b      	sbcs	r3, r3
 80006da:	425b      	negs	r3, r3
 80006dc:	191b      	adds	r3, r3, r4
 80006de:	18c9      	adds	r1, r1, r3
 80006e0:	428c      	cmp	r4, r1
 80006e2:	d23a      	bcs.n	800075a <__aeabi_ddiv+0x502>
 80006e4:	4288      	cmp	r0, r1
 80006e6:	d863      	bhi.n	80007b0 <__aeabi_ddiv+0x558>
 80006e8:	d060      	beq.n	80007ac <__aeabi_ddiv+0x554>
 80006ea:	4690      	mov	r8, r2
 80006ec:	e752      	b.n	8000594 <__aeabi_ddiv+0x33c>
 80006ee:	42aa      	cmp	r2, r5
 80006f0:	d900      	bls.n	80006f4 <__aeabi_ddiv+0x49c>
 80006f2:	e6ea      	b.n	80004ca <__aeabi_ddiv+0x272>
 80006f4:	4643      	mov	r3, r8
 80006f6:	07de      	lsls	r6, r3, #31
 80006f8:	0858      	lsrs	r0, r3, #1
 80006fa:	086b      	lsrs	r3, r5, #1
 80006fc:	431e      	orrs	r6, r3
 80006fe:	07ed      	lsls	r5, r5, #31
 8000700:	e6ea      	b.n	80004d8 <__aeabi_ddiv+0x280>
 8000702:	4648      	mov	r0, r9
 8000704:	f000 fcbc 	bl	8001080 <__clzsi2>
 8000708:	0001      	movs	r1, r0
 800070a:	0002      	movs	r2, r0
 800070c:	3115      	adds	r1, #21
 800070e:	3220      	adds	r2, #32
 8000710:	291c      	cmp	r1, #28
 8000712:	dc00      	bgt.n	8000716 <__aeabi_ddiv+0x4be>
 8000714:	e61a      	b.n	800034c <__aeabi_ddiv+0xf4>
 8000716:	464b      	mov	r3, r9
 8000718:	3808      	subs	r0, #8
 800071a:	4083      	lsls	r3, r0
 800071c:	2500      	movs	r5, #0
 800071e:	4698      	mov	r8, r3
 8000720:	e620      	b.n	8000364 <__aeabi_ddiv+0x10c>
 8000722:	f000 fcad 	bl	8001080 <__clzsi2>
 8000726:	0003      	movs	r3, r0
 8000728:	001a      	movs	r2, r3
 800072a:	3215      	adds	r2, #21
 800072c:	3020      	adds	r0, #32
 800072e:	2a1c      	cmp	r2, #28
 8000730:	dc00      	bgt.n	8000734 <__aeabi_ddiv+0x4dc>
 8000732:	e630      	b.n	8000396 <__aeabi_ddiv+0x13e>
 8000734:	4654      	mov	r4, sl
 8000736:	3b08      	subs	r3, #8
 8000738:	2200      	movs	r2, #0
 800073a:	409c      	lsls	r4, r3
 800073c:	e635      	b.n	80003aa <__aeabi_ddiv+0x152>
 800073e:	230f      	movs	r3, #15
 8000740:	402b      	ands	r3, r5
 8000742:	2b04      	cmp	r3, #4
 8000744:	d100      	bne.n	8000748 <__aeabi_ddiv+0x4f0>
 8000746:	e652      	b.n	80003ee <__aeabi_ddiv+0x196>
 8000748:	2305      	movs	r3, #5
 800074a:	425b      	negs	r3, r3
 800074c:	42ab      	cmp	r3, r5
 800074e:	419b      	sbcs	r3, r3
 8000750:	3504      	adds	r5, #4
 8000752:	425b      	negs	r3, r3
 8000754:	08ed      	lsrs	r5, r5, #3
 8000756:	4498      	add	r8, r3
 8000758:	e64a      	b.n	80003f0 <__aeabi_ddiv+0x198>
 800075a:	428c      	cmp	r4, r1
 800075c:	d1c5      	bne.n	80006ea <__aeabi_ddiv+0x492>
 800075e:	42af      	cmp	r7, r5
 8000760:	d9c0      	bls.n	80006e4 <__aeabi_ddiv+0x48c>
 8000762:	4690      	mov	r8, r2
 8000764:	e716      	b.n	8000594 <__aeabi_ddiv+0x33c>
 8000766:	428a      	cmp	r2, r1
 8000768:	d800      	bhi.n	800076c <__aeabi_ddiv+0x514>
 800076a:	e6ea      	b.n	8000542 <__aeabi_ddiv+0x2ea>
 800076c:	1e83      	subs	r3, r0, #2
 800076e:	1909      	adds	r1, r1, r4
 8000770:	e6e7      	b.n	8000542 <__aeabi_ddiv+0x2ea>
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <__aeabi_ddiv+0x5c4>)
 8000774:	0028      	movs	r0, r5
 8000776:	445a      	add	r2, fp
 8000778:	4643      	mov	r3, r8
 800077a:	4095      	lsls	r5, r2
 800077c:	4093      	lsls	r3, r2
 800077e:	40c8      	lsrs	r0, r1
 8000780:	1e6a      	subs	r2, r5, #1
 8000782:	4195      	sbcs	r5, r2
 8000784:	4644      	mov	r4, r8
 8000786:	4303      	orrs	r3, r0
 8000788:	432b      	orrs	r3, r5
 800078a:	40cc      	lsrs	r4, r1
 800078c:	075a      	lsls	r2, r3, #29
 800078e:	d092      	beq.n	80006b6 <__aeabi_ddiv+0x45e>
 8000790:	220f      	movs	r2, #15
 8000792:	401a      	ands	r2, r3
 8000794:	2a04      	cmp	r2, #4
 8000796:	d188      	bne.n	80006aa <__aeabi_ddiv+0x452>
 8000798:	e78d      	b.n	80006b6 <__aeabi_ddiv+0x45e>
 800079a:	0035      	movs	r5, r6
 800079c:	4281      	cmp	r1, r0
 800079e:	d000      	beq.n	80007a2 <__aeabi_ddiv+0x54a>
 80007a0:	e74b      	b.n	800063a <__aeabi_ddiv+0x3e2>
 80007a2:	9a00      	ldr	r2, [sp, #0]
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d000      	beq.n	80007aa <__aeabi_ddiv+0x552>
 80007a8:	e747      	b.n	800063a <__aeabi_ddiv+0x3e2>
 80007aa:	e618      	b.n	80003de <__aeabi_ddiv+0x186>
 80007ac:	42ae      	cmp	r6, r5
 80007ae:	d99c      	bls.n	80006ea <__aeabi_ddiv+0x492>
 80007b0:	2302      	movs	r3, #2
 80007b2:	425b      	negs	r3, r3
 80007b4:	469c      	mov	ip, r3
 80007b6:	9b00      	ldr	r3, [sp, #0]
 80007b8:	44e0      	add	r8, ip
 80007ba:	469c      	mov	ip, r3
 80007bc:	4465      	add	r5, ip
 80007be:	429d      	cmp	r5, r3
 80007c0:	419b      	sbcs	r3, r3
 80007c2:	425b      	negs	r3, r3
 80007c4:	191b      	adds	r3, r3, r4
 80007c6:	18c9      	adds	r1, r1, r3
 80007c8:	e6e4      	b.n	8000594 <__aeabi_ddiv+0x33c>
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <__aeabi_ddiv+0x5c8>)
 80007cc:	445a      	add	r2, fp
 80007ce:	2a00      	cmp	r2, #0
 80007d0:	dc00      	bgt.n	80007d4 <__aeabi_ddiv+0x57c>
 80007d2:	e744      	b.n	800065e <__aeabi_ddiv+0x406>
 80007d4:	2301      	movs	r3, #1
 80007d6:	2500      	movs	r5, #0
 80007d8:	4498      	add	r8, r3
 80007da:	e609      	b.n	80003f0 <__aeabi_ddiv+0x198>
 80007dc:	0765      	lsls	r5, r4, #29
 80007de:	0264      	lsls	r4, r4, #9
 80007e0:	0b24      	lsrs	r4, r4, #12
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	431d      	orrs	r5, r3
 80007e6:	2300      	movs	r3, #0
 80007e8:	e590      	b.n	800030c <__aeabi_ddiv+0xb4>
 80007ea:	9e00      	ldr	r6, [sp, #0]
 80007ec:	3d02      	subs	r5, #2
 80007ee:	0072      	lsls	r2, r6, #1
 80007f0:	42b2      	cmp	r2, r6
 80007f2:	41bf      	sbcs	r7, r7
 80007f4:	427f      	negs	r7, r7
 80007f6:	193c      	adds	r4, r7, r4
 80007f8:	1909      	adds	r1, r1, r4
 80007fa:	9200      	str	r2, [sp, #0]
 80007fc:	e7ce      	b.n	800079c <__aeabi_ddiv+0x544>
 80007fe:	2480      	movs	r4, #128	; 0x80
 8000800:	4643      	mov	r3, r8
 8000802:	0324      	lsls	r4, r4, #12
 8000804:	431c      	orrs	r4, r3
 8000806:	0324      	lsls	r4, r4, #12
 8000808:	4b06      	ldr	r3, [pc, #24]	; (8000824 <__aeabi_ddiv+0x5cc>)
 800080a:	0b24      	lsrs	r4, r4, #12
 800080c:	e57e      	b.n	800030c <__aeabi_ddiv+0xb4>
 800080e:	9a00      	ldr	r2, [sp, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d3ea      	bcc.n	80007ea <__aeabi_ddiv+0x592>
 8000814:	0035      	movs	r5, r6
 8000816:	e7c4      	b.n	80007a2 <__aeabi_ddiv+0x54a>
 8000818:	0000043e 	.word	0x0000043e
 800081c:	0000041e 	.word	0x0000041e
 8000820:	000003ff 	.word	0x000003ff
 8000824:	000007ff 	.word	0x000007ff

08000828 <__aeabi_dsub>:
 8000828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800082a:	4657      	mov	r7, sl
 800082c:	464e      	mov	r6, r9
 800082e:	4645      	mov	r5, r8
 8000830:	46de      	mov	lr, fp
 8000832:	0004      	movs	r4, r0
 8000834:	b5e0      	push	{r5, r6, r7, lr}
 8000836:	001f      	movs	r7, r3
 8000838:	0010      	movs	r0, r2
 800083a:	030b      	lsls	r3, r1, #12
 800083c:	0f62      	lsrs	r2, r4, #29
 800083e:	004e      	lsls	r6, r1, #1
 8000840:	0fcd      	lsrs	r5, r1, #31
 8000842:	0a5b      	lsrs	r3, r3, #9
 8000844:	0339      	lsls	r1, r7, #12
 8000846:	4313      	orrs	r3, r2
 8000848:	0a49      	lsrs	r1, r1, #9
 800084a:	00e2      	lsls	r2, r4, #3
 800084c:	0f44      	lsrs	r4, r0, #29
 800084e:	4321      	orrs	r1, r4
 8000850:	4cc2      	ldr	r4, [pc, #776]	; (8000b5c <__aeabi_dsub+0x334>)
 8000852:	4691      	mov	r9, r2
 8000854:	4692      	mov	sl, r2
 8000856:	00c0      	lsls	r0, r0, #3
 8000858:	007a      	lsls	r2, r7, #1
 800085a:	4680      	mov	r8, r0
 800085c:	0d76      	lsrs	r6, r6, #21
 800085e:	0d52      	lsrs	r2, r2, #21
 8000860:	0fff      	lsrs	r7, r7, #31
 8000862:	42a2      	cmp	r2, r4
 8000864:	d100      	bne.n	8000868 <__aeabi_dsub+0x40>
 8000866:	e0b4      	b.n	80009d2 <__aeabi_dsub+0x1aa>
 8000868:	2401      	movs	r4, #1
 800086a:	4067      	eors	r7, r4
 800086c:	46bb      	mov	fp, r7
 800086e:	42bd      	cmp	r5, r7
 8000870:	d100      	bne.n	8000874 <__aeabi_dsub+0x4c>
 8000872:	e088      	b.n	8000986 <__aeabi_dsub+0x15e>
 8000874:	1ab4      	subs	r4, r6, r2
 8000876:	46a4      	mov	ip, r4
 8000878:	2c00      	cmp	r4, #0
 800087a:	dc00      	bgt.n	800087e <__aeabi_dsub+0x56>
 800087c:	e0b2      	b.n	80009e4 <__aeabi_dsub+0x1bc>
 800087e:	2a00      	cmp	r2, #0
 8000880:	d100      	bne.n	8000884 <__aeabi_dsub+0x5c>
 8000882:	e0c5      	b.n	8000a10 <__aeabi_dsub+0x1e8>
 8000884:	4ab5      	ldr	r2, [pc, #724]	; (8000b5c <__aeabi_dsub+0x334>)
 8000886:	4296      	cmp	r6, r2
 8000888:	d100      	bne.n	800088c <__aeabi_dsub+0x64>
 800088a:	e28b      	b.n	8000da4 <__aeabi_dsub+0x57c>
 800088c:	2280      	movs	r2, #128	; 0x80
 800088e:	0412      	lsls	r2, r2, #16
 8000890:	4311      	orrs	r1, r2
 8000892:	4662      	mov	r2, ip
 8000894:	2a38      	cmp	r2, #56	; 0x38
 8000896:	dd00      	ble.n	800089a <__aeabi_dsub+0x72>
 8000898:	e1a1      	b.n	8000bde <__aeabi_dsub+0x3b6>
 800089a:	2a1f      	cmp	r2, #31
 800089c:	dd00      	ble.n	80008a0 <__aeabi_dsub+0x78>
 800089e:	e216      	b.n	8000cce <__aeabi_dsub+0x4a6>
 80008a0:	2720      	movs	r7, #32
 80008a2:	000c      	movs	r4, r1
 80008a4:	1abf      	subs	r7, r7, r2
 80008a6:	40bc      	lsls	r4, r7
 80008a8:	0002      	movs	r2, r0
 80008aa:	46a0      	mov	r8, r4
 80008ac:	4664      	mov	r4, ip
 80008ae:	40b8      	lsls	r0, r7
 80008b0:	40e2      	lsrs	r2, r4
 80008b2:	4644      	mov	r4, r8
 80008b4:	4314      	orrs	r4, r2
 80008b6:	0002      	movs	r2, r0
 80008b8:	1e50      	subs	r0, r2, #1
 80008ba:	4182      	sbcs	r2, r0
 80008bc:	4660      	mov	r0, ip
 80008be:	40c1      	lsrs	r1, r0
 80008c0:	4322      	orrs	r2, r4
 80008c2:	1a5b      	subs	r3, r3, r1
 80008c4:	4649      	mov	r1, r9
 80008c6:	1a8c      	subs	r4, r1, r2
 80008c8:	45a1      	cmp	r9, r4
 80008ca:	4192      	sbcs	r2, r2
 80008cc:	4252      	negs	r2, r2
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	4698      	mov	r8, r3
 80008d2:	4643      	mov	r3, r8
 80008d4:	021b      	lsls	r3, r3, #8
 80008d6:	d400      	bmi.n	80008da <__aeabi_dsub+0xb2>
 80008d8:	e117      	b.n	8000b0a <__aeabi_dsub+0x2e2>
 80008da:	4643      	mov	r3, r8
 80008dc:	025b      	lsls	r3, r3, #9
 80008de:	0a5b      	lsrs	r3, r3, #9
 80008e0:	4698      	mov	r8, r3
 80008e2:	4643      	mov	r3, r8
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d100      	bne.n	80008ea <__aeabi_dsub+0xc2>
 80008e8:	e16c      	b.n	8000bc4 <__aeabi_dsub+0x39c>
 80008ea:	4640      	mov	r0, r8
 80008ec:	f000 fbc8 	bl	8001080 <__clzsi2>
 80008f0:	0002      	movs	r2, r0
 80008f2:	3a08      	subs	r2, #8
 80008f4:	2120      	movs	r1, #32
 80008f6:	0020      	movs	r0, r4
 80008f8:	4643      	mov	r3, r8
 80008fa:	1a89      	subs	r1, r1, r2
 80008fc:	4093      	lsls	r3, r2
 80008fe:	40c8      	lsrs	r0, r1
 8000900:	4094      	lsls	r4, r2
 8000902:	4303      	orrs	r3, r0
 8000904:	4296      	cmp	r6, r2
 8000906:	dd00      	ble.n	800090a <__aeabi_dsub+0xe2>
 8000908:	e157      	b.n	8000bba <__aeabi_dsub+0x392>
 800090a:	1b96      	subs	r6, r2, r6
 800090c:	1c71      	adds	r1, r6, #1
 800090e:	291f      	cmp	r1, #31
 8000910:	dd00      	ble.n	8000914 <__aeabi_dsub+0xec>
 8000912:	e1cb      	b.n	8000cac <__aeabi_dsub+0x484>
 8000914:	2220      	movs	r2, #32
 8000916:	0018      	movs	r0, r3
 8000918:	0026      	movs	r6, r4
 800091a:	1a52      	subs	r2, r2, r1
 800091c:	4094      	lsls	r4, r2
 800091e:	4090      	lsls	r0, r2
 8000920:	40ce      	lsrs	r6, r1
 8000922:	40cb      	lsrs	r3, r1
 8000924:	1e62      	subs	r2, r4, #1
 8000926:	4194      	sbcs	r4, r2
 8000928:	4330      	orrs	r0, r6
 800092a:	4698      	mov	r8, r3
 800092c:	2600      	movs	r6, #0
 800092e:	4304      	orrs	r4, r0
 8000930:	0763      	lsls	r3, r4, #29
 8000932:	d009      	beq.n	8000948 <__aeabi_dsub+0x120>
 8000934:	230f      	movs	r3, #15
 8000936:	4023      	ands	r3, r4
 8000938:	2b04      	cmp	r3, #4
 800093a:	d005      	beq.n	8000948 <__aeabi_dsub+0x120>
 800093c:	1d23      	adds	r3, r4, #4
 800093e:	42a3      	cmp	r3, r4
 8000940:	41a4      	sbcs	r4, r4
 8000942:	4264      	negs	r4, r4
 8000944:	44a0      	add	r8, r4
 8000946:	001c      	movs	r4, r3
 8000948:	4643      	mov	r3, r8
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	d400      	bmi.n	8000950 <__aeabi_dsub+0x128>
 800094e:	e0df      	b.n	8000b10 <__aeabi_dsub+0x2e8>
 8000950:	4b82      	ldr	r3, [pc, #520]	; (8000b5c <__aeabi_dsub+0x334>)
 8000952:	3601      	adds	r6, #1
 8000954:	429e      	cmp	r6, r3
 8000956:	d100      	bne.n	800095a <__aeabi_dsub+0x132>
 8000958:	e0fb      	b.n	8000b52 <__aeabi_dsub+0x32a>
 800095a:	4642      	mov	r2, r8
 800095c:	4b80      	ldr	r3, [pc, #512]	; (8000b60 <__aeabi_dsub+0x338>)
 800095e:	08e4      	lsrs	r4, r4, #3
 8000960:	401a      	ands	r2, r3
 8000962:	0013      	movs	r3, r2
 8000964:	0571      	lsls	r1, r6, #21
 8000966:	0752      	lsls	r2, r2, #29
 8000968:	025b      	lsls	r3, r3, #9
 800096a:	4322      	orrs	r2, r4
 800096c:	0b1b      	lsrs	r3, r3, #12
 800096e:	0d49      	lsrs	r1, r1, #21
 8000970:	0509      	lsls	r1, r1, #20
 8000972:	07ed      	lsls	r5, r5, #31
 8000974:	4319      	orrs	r1, r3
 8000976:	4329      	orrs	r1, r5
 8000978:	0010      	movs	r0, r2
 800097a:	bcf0      	pop	{r4, r5, r6, r7}
 800097c:	46bb      	mov	fp, r7
 800097e:	46b2      	mov	sl, r6
 8000980:	46a9      	mov	r9, r5
 8000982:	46a0      	mov	r8, r4
 8000984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000986:	1ab4      	subs	r4, r6, r2
 8000988:	46a4      	mov	ip, r4
 800098a:	2c00      	cmp	r4, #0
 800098c:	dd58      	ble.n	8000a40 <__aeabi_dsub+0x218>
 800098e:	2a00      	cmp	r2, #0
 8000990:	d100      	bne.n	8000994 <__aeabi_dsub+0x16c>
 8000992:	e09e      	b.n	8000ad2 <__aeabi_dsub+0x2aa>
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <__aeabi_dsub+0x334>)
 8000996:	4296      	cmp	r6, r2
 8000998:	d100      	bne.n	800099c <__aeabi_dsub+0x174>
 800099a:	e13b      	b.n	8000c14 <__aeabi_dsub+0x3ec>
 800099c:	2280      	movs	r2, #128	; 0x80
 800099e:	0412      	lsls	r2, r2, #16
 80009a0:	4311      	orrs	r1, r2
 80009a2:	4662      	mov	r2, ip
 80009a4:	2a38      	cmp	r2, #56	; 0x38
 80009a6:	dd00      	ble.n	80009aa <__aeabi_dsub+0x182>
 80009a8:	e0c1      	b.n	8000b2e <__aeabi_dsub+0x306>
 80009aa:	2a1f      	cmp	r2, #31
 80009ac:	dc00      	bgt.n	80009b0 <__aeabi_dsub+0x188>
 80009ae:	e1bb      	b.n	8000d28 <__aeabi_dsub+0x500>
 80009b0:	000c      	movs	r4, r1
 80009b2:	3a20      	subs	r2, #32
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	0022      	movs	r2, r4
 80009b8:	4664      	mov	r4, ip
 80009ba:	2c20      	cmp	r4, #32
 80009bc:	d004      	beq.n	80009c8 <__aeabi_dsub+0x1a0>
 80009be:	2740      	movs	r7, #64	; 0x40
 80009c0:	1b3f      	subs	r7, r7, r4
 80009c2:	40b9      	lsls	r1, r7
 80009c4:	4308      	orrs	r0, r1
 80009c6:	4680      	mov	r8, r0
 80009c8:	4644      	mov	r4, r8
 80009ca:	1e61      	subs	r1, r4, #1
 80009cc:	418c      	sbcs	r4, r1
 80009ce:	4314      	orrs	r4, r2
 80009d0:	e0b1      	b.n	8000b36 <__aeabi_dsub+0x30e>
 80009d2:	000c      	movs	r4, r1
 80009d4:	4304      	orrs	r4, r0
 80009d6:	d02a      	beq.n	8000a2e <__aeabi_dsub+0x206>
 80009d8:	46bb      	mov	fp, r7
 80009da:	42bd      	cmp	r5, r7
 80009dc:	d02d      	beq.n	8000a3a <__aeabi_dsub+0x212>
 80009de:	4c61      	ldr	r4, [pc, #388]	; (8000b64 <__aeabi_dsub+0x33c>)
 80009e0:	46a4      	mov	ip, r4
 80009e2:	44b4      	add	ip, r6
 80009e4:	4664      	mov	r4, ip
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d05c      	beq.n	8000aa4 <__aeabi_dsub+0x27c>
 80009ea:	1b94      	subs	r4, r2, r6
 80009ec:	46a4      	mov	ip, r4
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d000      	beq.n	80009f4 <__aeabi_dsub+0x1cc>
 80009f2:	e115      	b.n	8000c20 <__aeabi_dsub+0x3f8>
 80009f4:	464d      	mov	r5, r9
 80009f6:	431d      	orrs	r5, r3
 80009f8:	d100      	bne.n	80009fc <__aeabi_dsub+0x1d4>
 80009fa:	e1c3      	b.n	8000d84 <__aeabi_dsub+0x55c>
 80009fc:	1e65      	subs	r5, r4, #1
 80009fe:	2c01      	cmp	r4, #1
 8000a00:	d100      	bne.n	8000a04 <__aeabi_dsub+0x1dc>
 8000a02:	e20c      	b.n	8000e1e <__aeabi_dsub+0x5f6>
 8000a04:	4e55      	ldr	r6, [pc, #340]	; (8000b5c <__aeabi_dsub+0x334>)
 8000a06:	42b4      	cmp	r4, r6
 8000a08:	d100      	bne.n	8000a0c <__aeabi_dsub+0x1e4>
 8000a0a:	e1f8      	b.n	8000dfe <__aeabi_dsub+0x5d6>
 8000a0c:	46ac      	mov	ip, r5
 8000a0e:	e10e      	b.n	8000c2e <__aeabi_dsub+0x406>
 8000a10:	000a      	movs	r2, r1
 8000a12:	4302      	orrs	r2, r0
 8000a14:	d100      	bne.n	8000a18 <__aeabi_dsub+0x1f0>
 8000a16:	e136      	b.n	8000c86 <__aeabi_dsub+0x45e>
 8000a18:	0022      	movs	r2, r4
 8000a1a:	3a01      	subs	r2, #1
 8000a1c:	2c01      	cmp	r4, #1
 8000a1e:	d100      	bne.n	8000a22 <__aeabi_dsub+0x1fa>
 8000a20:	e1c6      	b.n	8000db0 <__aeabi_dsub+0x588>
 8000a22:	4c4e      	ldr	r4, [pc, #312]	; (8000b5c <__aeabi_dsub+0x334>)
 8000a24:	45a4      	cmp	ip, r4
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dsub+0x202>
 8000a28:	e0f4      	b.n	8000c14 <__aeabi_dsub+0x3ec>
 8000a2a:	4694      	mov	ip, r2
 8000a2c:	e731      	b.n	8000892 <__aeabi_dsub+0x6a>
 8000a2e:	2401      	movs	r4, #1
 8000a30:	4067      	eors	r7, r4
 8000a32:	46bb      	mov	fp, r7
 8000a34:	42bd      	cmp	r5, r7
 8000a36:	d000      	beq.n	8000a3a <__aeabi_dsub+0x212>
 8000a38:	e71c      	b.n	8000874 <__aeabi_dsub+0x4c>
 8000a3a:	4c4a      	ldr	r4, [pc, #296]	; (8000b64 <__aeabi_dsub+0x33c>)
 8000a3c:	46a4      	mov	ip, r4
 8000a3e:	44b4      	add	ip, r6
 8000a40:	4664      	mov	r4, ip
 8000a42:	2c00      	cmp	r4, #0
 8000a44:	d100      	bne.n	8000a48 <__aeabi_dsub+0x220>
 8000a46:	e0cf      	b.n	8000be8 <__aeabi_dsub+0x3c0>
 8000a48:	1b94      	subs	r4, r2, r6
 8000a4a:	46a4      	mov	ip, r4
 8000a4c:	2e00      	cmp	r6, #0
 8000a4e:	d100      	bne.n	8000a52 <__aeabi_dsub+0x22a>
 8000a50:	e15c      	b.n	8000d0c <__aeabi_dsub+0x4e4>
 8000a52:	4e42      	ldr	r6, [pc, #264]	; (8000b5c <__aeabi_dsub+0x334>)
 8000a54:	42b2      	cmp	r2, r6
 8000a56:	d100      	bne.n	8000a5a <__aeabi_dsub+0x232>
 8000a58:	e1ec      	b.n	8000e34 <__aeabi_dsub+0x60c>
 8000a5a:	2680      	movs	r6, #128	; 0x80
 8000a5c:	0436      	lsls	r6, r6, #16
 8000a5e:	4333      	orrs	r3, r6
 8000a60:	4664      	mov	r4, ip
 8000a62:	2c38      	cmp	r4, #56	; 0x38
 8000a64:	dd00      	ble.n	8000a68 <__aeabi_dsub+0x240>
 8000a66:	e1b3      	b.n	8000dd0 <__aeabi_dsub+0x5a8>
 8000a68:	2c1f      	cmp	r4, #31
 8000a6a:	dd00      	ble.n	8000a6e <__aeabi_dsub+0x246>
 8000a6c:	e238      	b.n	8000ee0 <__aeabi_dsub+0x6b8>
 8000a6e:	2620      	movs	r6, #32
 8000a70:	1b36      	subs	r6, r6, r4
 8000a72:	001c      	movs	r4, r3
 8000a74:	40b4      	lsls	r4, r6
 8000a76:	464f      	mov	r7, r9
 8000a78:	46a0      	mov	r8, r4
 8000a7a:	4664      	mov	r4, ip
 8000a7c:	40e7      	lsrs	r7, r4
 8000a7e:	4644      	mov	r4, r8
 8000a80:	433c      	orrs	r4, r7
 8000a82:	464f      	mov	r7, r9
 8000a84:	40b7      	lsls	r7, r6
 8000a86:	003e      	movs	r6, r7
 8000a88:	1e77      	subs	r7, r6, #1
 8000a8a:	41be      	sbcs	r6, r7
 8000a8c:	4334      	orrs	r4, r6
 8000a8e:	4666      	mov	r6, ip
 8000a90:	40f3      	lsrs	r3, r6
 8000a92:	18c9      	adds	r1, r1, r3
 8000a94:	1824      	adds	r4, r4, r0
 8000a96:	4284      	cmp	r4, r0
 8000a98:	419b      	sbcs	r3, r3
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	4698      	mov	r8, r3
 8000a9e:	0016      	movs	r6, r2
 8000aa0:	4488      	add	r8, r1
 8000aa2:	e04e      	b.n	8000b42 <__aeabi_dsub+0x31a>
 8000aa4:	4a30      	ldr	r2, [pc, #192]	; (8000b68 <__aeabi_dsub+0x340>)
 8000aa6:	1c74      	adds	r4, r6, #1
 8000aa8:	4214      	tst	r4, r2
 8000aaa:	d000      	beq.n	8000aae <__aeabi_dsub+0x286>
 8000aac:	e0d6      	b.n	8000c5c <__aeabi_dsub+0x434>
 8000aae:	464a      	mov	r2, r9
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	2e00      	cmp	r6, #0
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_dsub+0x290>
 8000ab6:	e15b      	b.n	8000d70 <__aeabi_dsub+0x548>
 8000ab8:	2a00      	cmp	r2, #0
 8000aba:	d100      	bne.n	8000abe <__aeabi_dsub+0x296>
 8000abc:	e1a5      	b.n	8000e0a <__aeabi_dsub+0x5e2>
 8000abe:	000a      	movs	r2, r1
 8000ac0:	4302      	orrs	r2, r0
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_dsub+0x29e>
 8000ac4:	e1bb      	b.n	8000e3e <__aeabi_dsub+0x616>
 8000ac6:	464a      	mov	r2, r9
 8000ac8:	0759      	lsls	r1, r3, #29
 8000aca:	08d2      	lsrs	r2, r2, #3
 8000acc:	430a      	orrs	r2, r1
 8000ace:	08db      	lsrs	r3, r3, #3
 8000ad0:	e027      	b.n	8000b22 <__aeabi_dsub+0x2fa>
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	4302      	orrs	r2, r0
 8000ad6:	d100      	bne.n	8000ada <__aeabi_dsub+0x2b2>
 8000ad8:	e174      	b.n	8000dc4 <__aeabi_dsub+0x59c>
 8000ada:	0022      	movs	r2, r4
 8000adc:	3a01      	subs	r2, #1
 8000ade:	2c01      	cmp	r4, #1
 8000ae0:	d005      	beq.n	8000aee <__aeabi_dsub+0x2c6>
 8000ae2:	4c1e      	ldr	r4, [pc, #120]	; (8000b5c <__aeabi_dsub+0x334>)
 8000ae4:	45a4      	cmp	ip, r4
 8000ae6:	d100      	bne.n	8000aea <__aeabi_dsub+0x2c2>
 8000ae8:	e094      	b.n	8000c14 <__aeabi_dsub+0x3ec>
 8000aea:	4694      	mov	ip, r2
 8000aec:	e759      	b.n	80009a2 <__aeabi_dsub+0x17a>
 8000aee:	4448      	add	r0, r9
 8000af0:	4548      	cmp	r0, r9
 8000af2:	4192      	sbcs	r2, r2
 8000af4:	185b      	adds	r3, r3, r1
 8000af6:	4698      	mov	r8, r3
 8000af8:	0004      	movs	r4, r0
 8000afa:	4252      	negs	r2, r2
 8000afc:	4490      	add	r8, r2
 8000afe:	4643      	mov	r3, r8
 8000b00:	2602      	movs	r6, #2
 8000b02:	021b      	lsls	r3, r3, #8
 8000b04:	d500      	bpl.n	8000b08 <__aeabi_dsub+0x2e0>
 8000b06:	e0c4      	b.n	8000c92 <__aeabi_dsub+0x46a>
 8000b08:	3e01      	subs	r6, #1
 8000b0a:	0763      	lsls	r3, r4, #29
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_dsub+0x2e8>
 8000b0e:	e711      	b.n	8000934 <__aeabi_dsub+0x10c>
 8000b10:	4643      	mov	r3, r8
 8000b12:	46b4      	mov	ip, r6
 8000b14:	0759      	lsls	r1, r3, #29
 8000b16:	08e2      	lsrs	r2, r4, #3
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	08db      	lsrs	r3, r3, #3
 8000b1c:	490f      	ldr	r1, [pc, #60]	; (8000b5c <__aeabi_dsub+0x334>)
 8000b1e:	458c      	cmp	ip, r1
 8000b20:	d040      	beq.n	8000ba4 <__aeabi_dsub+0x37c>
 8000b22:	4661      	mov	r1, ip
 8000b24:	031b      	lsls	r3, r3, #12
 8000b26:	0549      	lsls	r1, r1, #21
 8000b28:	0b1b      	lsrs	r3, r3, #12
 8000b2a:	0d49      	lsrs	r1, r1, #21
 8000b2c:	e720      	b.n	8000970 <__aeabi_dsub+0x148>
 8000b2e:	4301      	orrs	r1, r0
 8000b30:	000c      	movs	r4, r1
 8000b32:	1e61      	subs	r1, r4, #1
 8000b34:	418c      	sbcs	r4, r1
 8000b36:	444c      	add	r4, r9
 8000b38:	454c      	cmp	r4, r9
 8000b3a:	4192      	sbcs	r2, r2
 8000b3c:	4252      	negs	r2, r2
 8000b3e:	4690      	mov	r8, r2
 8000b40:	4498      	add	r8, r3
 8000b42:	4643      	mov	r3, r8
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	d5e0      	bpl.n	8000b0a <__aeabi_dsub+0x2e2>
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__aeabi_dsub+0x334>)
 8000b4a:	3601      	adds	r6, #1
 8000b4c:	429e      	cmp	r6, r3
 8000b4e:	d000      	beq.n	8000b52 <__aeabi_dsub+0x32a>
 8000b50:	e09f      	b.n	8000c92 <__aeabi_dsub+0x46a>
 8000b52:	0031      	movs	r1, r6
 8000b54:	2300      	movs	r3, #0
 8000b56:	2200      	movs	r2, #0
 8000b58:	e70a      	b.n	8000970 <__aeabi_dsub+0x148>
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	000007ff 	.word	0x000007ff
 8000b60:	ff7fffff 	.word	0xff7fffff
 8000b64:	fffff801 	.word	0xfffff801
 8000b68:	000007fe 	.word	0x000007fe
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	d100      	bne.n	8000b72 <__aeabi_dsub+0x34a>
 8000b70:	e160      	b.n	8000e34 <__aeabi_dsub+0x60c>
 8000b72:	000a      	movs	r2, r1
 8000b74:	4302      	orrs	r2, r0
 8000b76:	d04d      	beq.n	8000c14 <__aeabi_dsub+0x3ec>
 8000b78:	464a      	mov	r2, r9
 8000b7a:	075c      	lsls	r4, r3, #29
 8000b7c:	08d2      	lsrs	r2, r2, #3
 8000b7e:	4322      	orrs	r2, r4
 8000b80:	2480      	movs	r4, #128	; 0x80
 8000b82:	08db      	lsrs	r3, r3, #3
 8000b84:	0324      	lsls	r4, r4, #12
 8000b86:	4223      	tst	r3, r4
 8000b88:	d007      	beq.n	8000b9a <__aeabi_dsub+0x372>
 8000b8a:	08ce      	lsrs	r6, r1, #3
 8000b8c:	4226      	tst	r6, r4
 8000b8e:	d104      	bne.n	8000b9a <__aeabi_dsub+0x372>
 8000b90:	465d      	mov	r5, fp
 8000b92:	0033      	movs	r3, r6
 8000b94:	08c2      	lsrs	r2, r0, #3
 8000b96:	0749      	lsls	r1, r1, #29
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	0f51      	lsrs	r1, r2, #29
 8000b9c:	00d2      	lsls	r2, r2, #3
 8000b9e:	08d2      	lsrs	r2, r2, #3
 8000ba0:	0749      	lsls	r1, r1, #29
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	0011      	movs	r1, r2
 8000ba6:	4319      	orrs	r1, r3
 8000ba8:	d100      	bne.n	8000bac <__aeabi_dsub+0x384>
 8000baa:	e1c8      	b.n	8000f3e <__aeabi_dsub+0x716>
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0309      	lsls	r1, r1, #12
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	031b      	lsls	r3, r3, #12
 8000bb4:	49d5      	ldr	r1, [pc, #852]	; (8000f0c <__aeabi_dsub+0x6e4>)
 8000bb6:	0b1b      	lsrs	r3, r3, #12
 8000bb8:	e6da      	b.n	8000970 <__aeabi_dsub+0x148>
 8000bba:	49d5      	ldr	r1, [pc, #852]	; (8000f10 <__aeabi_dsub+0x6e8>)
 8000bbc:	1ab6      	subs	r6, r6, r2
 8000bbe:	400b      	ands	r3, r1
 8000bc0:	4698      	mov	r8, r3
 8000bc2:	e6b5      	b.n	8000930 <__aeabi_dsub+0x108>
 8000bc4:	0020      	movs	r0, r4
 8000bc6:	f000 fa5b 	bl	8001080 <__clzsi2>
 8000bca:	0002      	movs	r2, r0
 8000bcc:	3218      	adds	r2, #24
 8000bce:	2a1f      	cmp	r2, #31
 8000bd0:	dc00      	bgt.n	8000bd4 <__aeabi_dsub+0x3ac>
 8000bd2:	e68f      	b.n	80008f4 <__aeabi_dsub+0xcc>
 8000bd4:	0023      	movs	r3, r4
 8000bd6:	3808      	subs	r0, #8
 8000bd8:	4083      	lsls	r3, r0
 8000bda:	2400      	movs	r4, #0
 8000bdc:	e692      	b.n	8000904 <__aeabi_dsub+0xdc>
 8000bde:	4308      	orrs	r0, r1
 8000be0:	0002      	movs	r2, r0
 8000be2:	1e50      	subs	r0, r2, #1
 8000be4:	4182      	sbcs	r2, r0
 8000be6:	e66d      	b.n	80008c4 <__aeabi_dsub+0x9c>
 8000be8:	4cca      	ldr	r4, [pc, #808]	; (8000f14 <__aeabi_dsub+0x6ec>)
 8000bea:	1c72      	adds	r2, r6, #1
 8000bec:	4222      	tst	r2, r4
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_dsub+0x3ca>
 8000bf0:	e0ad      	b.n	8000d4e <__aeabi_dsub+0x526>
 8000bf2:	464a      	mov	r2, r9
 8000bf4:	431a      	orrs	r2, r3
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d1b8      	bne.n	8000b6c <__aeabi_dsub+0x344>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	d100      	bne.n	8000c00 <__aeabi_dsub+0x3d8>
 8000bfe:	e158      	b.n	8000eb2 <__aeabi_dsub+0x68a>
 8000c00:	000a      	movs	r2, r1
 8000c02:	4302      	orrs	r2, r0
 8000c04:	d000      	beq.n	8000c08 <__aeabi_dsub+0x3e0>
 8000c06:	e159      	b.n	8000ebc <__aeabi_dsub+0x694>
 8000c08:	464a      	mov	r2, r9
 8000c0a:	0759      	lsls	r1, r3, #29
 8000c0c:	08d2      	lsrs	r2, r2, #3
 8000c0e:	430a      	orrs	r2, r1
 8000c10:	08db      	lsrs	r3, r3, #3
 8000c12:	e786      	b.n	8000b22 <__aeabi_dsub+0x2fa>
 8000c14:	464a      	mov	r2, r9
 8000c16:	0759      	lsls	r1, r3, #29
 8000c18:	08d2      	lsrs	r2, r2, #3
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	08db      	lsrs	r3, r3, #3
 8000c1e:	e7c1      	b.n	8000ba4 <__aeabi_dsub+0x37c>
 8000c20:	4dba      	ldr	r5, [pc, #744]	; (8000f0c <__aeabi_dsub+0x6e4>)
 8000c22:	42aa      	cmp	r2, r5
 8000c24:	d100      	bne.n	8000c28 <__aeabi_dsub+0x400>
 8000c26:	e11e      	b.n	8000e66 <__aeabi_dsub+0x63e>
 8000c28:	2580      	movs	r5, #128	; 0x80
 8000c2a:	042d      	lsls	r5, r5, #16
 8000c2c:	432b      	orrs	r3, r5
 8000c2e:	4664      	mov	r4, ip
 8000c30:	2c38      	cmp	r4, #56	; 0x38
 8000c32:	dc5d      	bgt.n	8000cf0 <__aeabi_dsub+0x4c8>
 8000c34:	2c1f      	cmp	r4, #31
 8000c36:	dd00      	ble.n	8000c3a <__aeabi_dsub+0x412>
 8000c38:	e0d0      	b.n	8000ddc <__aeabi_dsub+0x5b4>
 8000c3a:	2520      	movs	r5, #32
 8000c3c:	4667      	mov	r7, ip
 8000c3e:	1b2d      	subs	r5, r5, r4
 8000c40:	464e      	mov	r6, r9
 8000c42:	001c      	movs	r4, r3
 8000c44:	40fe      	lsrs	r6, r7
 8000c46:	40ac      	lsls	r4, r5
 8000c48:	4334      	orrs	r4, r6
 8000c4a:	464e      	mov	r6, r9
 8000c4c:	40ae      	lsls	r6, r5
 8000c4e:	0035      	movs	r5, r6
 8000c50:	40fb      	lsrs	r3, r7
 8000c52:	1e6e      	subs	r6, r5, #1
 8000c54:	41b5      	sbcs	r5, r6
 8000c56:	1ac9      	subs	r1, r1, r3
 8000c58:	432c      	orrs	r4, r5
 8000c5a:	e04e      	b.n	8000cfa <__aeabi_dsub+0x4d2>
 8000c5c:	464a      	mov	r2, r9
 8000c5e:	1a14      	subs	r4, r2, r0
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	4192      	sbcs	r2, r2
 8000c64:	4252      	negs	r2, r2
 8000c66:	4690      	mov	r8, r2
 8000c68:	1a5f      	subs	r7, r3, r1
 8000c6a:	003a      	movs	r2, r7
 8000c6c:	4647      	mov	r7, r8
 8000c6e:	1bd2      	subs	r2, r2, r7
 8000c70:	4690      	mov	r8, r2
 8000c72:	0212      	lsls	r2, r2, #8
 8000c74:	d500      	bpl.n	8000c78 <__aeabi_dsub+0x450>
 8000c76:	e08b      	b.n	8000d90 <__aeabi_dsub+0x568>
 8000c78:	4642      	mov	r2, r8
 8000c7a:	4322      	orrs	r2, r4
 8000c7c:	d000      	beq.n	8000c80 <__aeabi_dsub+0x458>
 8000c7e:	e630      	b.n	80008e2 <__aeabi_dsub+0xba>
 8000c80:	2300      	movs	r3, #0
 8000c82:	2500      	movs	r5, #0
 8000c84:	e74d      	b.n	8000b22 <__aeabi_dsub+0x2fa>
 8000c86:	464a      	mov	r2, r9
 8000c88:	0759      	lsls	r1, r3, #29
 8000c8a:	08d2      	lsrs	r2, r2, #3
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	e744      	b.n	8000b1c <__aeabi_dsub+0x2f4>
 8000c92:	4642      	mov	r2, r8
 8000c94:	4b9e      	ldr	r3, [pc, #632]	; (8000f10 <__aeabi_dsub+0x6e8>)
 8000c96:	0861      	lsrs	r1, r4, #1
 8000c98:	401a      	ands	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	4014      	ands	r4, r2
 8000ca0:	430c      	orrs	r4, r1
 8000ca2:	07da      	lsls	r2, r3, #31
 8000ca4:	085b      	lsrs	r3, r3, #1
 8000ca6:	4698      	mov	r8, r3
 8000ca8:	4314      	orrs	r4, r2
 8000caa:	e641      	b.n	8000930 <__aeabi_dsub+0x108>
 8000cac:	001a      	movs	r2, r3
 8000cae:	3e1f      	subs	r6, #31
 8000cb0:	40f2      	lsrs	r2, r6
 8000cb2:	0016      	movs	r6, r2
 8000cb4:	2920      	cmp	r1, #32
 8000cb6:	d003      	beq.n	8000cc0 <__aeabi_dsub+0x498>
 8000cb8:	2240      	movs	r2, #64	; 0x40
 8000cba:	1a51      	subs	r1, r2, r1
 8000cbc:	408b      	lsls	r3, r1
 8000cbe:	431c      	orrs	r4, r3
 8000cc0:	1e62      	subs	r2, r4, #1
 8000cc2:	4194      	sbcs	r4, r2
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4334      	orrs	r4, r6
 8000cc8:	4698      	mov	r8, r3
 8000cca:	2600      	movs	r6, #0
 8000ccc:	e71d      	b.n	8000b0a <__aeabi_dsub+0x2e2>
 8000cce:	000c      	movs	r4, r1
 8000cd0:	3a20      	subs	r2, #32
 8000cd2:	40d4      	lsrs	r4, r2
 8000cd4:	0022      	movs	r2, r4
 8000cd6:	4664      	mov	r4, ip
 8000cd8:	2c20      	cmp	r4, #32
 8000cda:	d004      	beq.n	8000ce6 <__aeabi_dsub+0x4be>
 8000cdc:	2740      	movs	r7, #64	; 0x40
 8000cde:	1b3f      	subs	r7, r7, r4
 8000ce0:	40b9      	lsls	r1, r7
 8000ce2:	4308      	orrs	r0, r1
 8000ce4:	4680      	mov	r8, r0
 8000ce6:	4644      	mov	r4, r8
 8000ce8:	1e61      	subs	r1, r4, #1
 8000cea:	418c      	sbcs	r4, r1
 8000cec:	4322      	orrs	r2, r4
 8000cee:	e5e9      	b.n	80008c4 <__aeabi_dsub+0x9c>
 8000cf0:	464c      	mov	r4, r9
 8000cf2:	4323      	orrs	r3, r4
 8000cf4:	001c      	movs	r4, r3
 8000cf6:	1e63      	subs	r3, r4, #1
 8000cf8:	419c      	sbcs	r4, r3
 8000cfa:	1b04      	subs	r4, r0, r4
 8000cfc:	42a0      	cmp	r0, r4
 8000cfe:	419b      	sbcs	r3, r3
 8000d00:	425b      	negs	r3, r3
 8000d02:	1acb      	subs	r3, r1, r3
 8000d04:	4698      	mov	r8, r3
 8000d06:	465d      	mov	r5, fp
 8000d08:	0016      	movs	r6, r2
 8000d0a:	e5e2      	b.n	80008d2 <__aeabi_dsub+0xaa>
 8000d0c:	464e      	mov	r6, r9
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dsub+0x4ec>
 8000d12:	e0ae      	b.n	8000e72 <__aeabi_dsub+0x64a>
 8000d14:	1e66      	subs	r6, r4, #1
 8000d16:	2c01      	cmp	r4, #1
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dsub+0x4f4>
 8000d1a:	e0fd      	b.n	8000f18 <__aeabi_dsub+0x6f0>
 8000d1c:	4f7b      	ldr	r7, [pc, #492]	; (8000f0c <__aeabi_dsub+0x6e4>)
 8000d1e:	42bc      	cmp	r4, r7
 8000d20:	d100      	bne.n	8000d24 <__aeabi_dsub+0x4fc>
 8000d22:	e107      	b.n	8000f34 <__aeabi_dsub+0x70c>
 8000d24:	46b4      	mov	ip, r6
 8000d26:	e69b      	b.n	8000a60 <__aeabi_dsub+0x238>
 8000d28:	4664      	mov	r4, ip
 8000d2a:	2220      	movs	r2, #32
 8000d2c:	1b12      	subs	r2, r2, r4
 8000d2e:	000c      	movs	r4, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	0007      	movs	r7, r0
 8000d34:	4090      	lsls	r0, r2
 8000d36:	46a0      	mov	r8, r4
 8000d38:	4664      	mov	r4, ip
 8000d3a:	1e42      	subs	r2, r0, #1
 8000d3c:	4190      	sbcs	r0, r2
 8000d3e:	4662      	mov	r2, ip
 8000d40:	40e7      	lsrs	r7, r4
 8000d42:	4644      	mov	r4, r8
 8000d44:	40d1      	lsrs	r1, r2
 8000d46:	433c      	orrs	r4, r7
 8000d48:	4304      	orrs	r4, r0
 8000d4a:	185b      	adds	r3, r3, r1
 8000d4c:	e6f3      	b.n	8000b36 <__aeabi_dsub+0x30e>
 8000d4e:	4c6f      	ldr	r4, [pc, #444]	; (8000f0c <__aeabi_dsub+0x6e4>)
 8000d50:	42a2      	cmp	r2, r4
 8000d52:	d100      	bne.n	8000d56 <__aeabi_dsub+0x52e>
 8000d54:	e0d5      	b.n	8000f02 <__aeabi_dsub+0x6da>
 8000d56:	4448      	add	r0, r9
 8000d58:	185b      	adds	r3, r3, r1
 8000d5a:	4548      	cmp	r0, r9
 8000d5c:	4189      	sbcs	r1, r1
 8000d5e:	4249      	negs	r1, r1
 8000d60:	185b      	adds	r3, r3, r1
 8000d62:	07dc      	lsls	r4, r3, #31
 8000d64:	0840      	lsrs	r0, r0, #1
 8000d66:	085b      	lsrs	r3, r3, #1
 8000d68:	4698      	mov	r8, r3
 8000d6a:	0016      	movs	r6, r2
 8000d6c:	4304      	orrs	r4, r0
 8000d6e:	e6cc      	b.n	8000b0a <__aeabi_dsub+0x2e2>
 8000d70:	2a00      	cmp	r2, #0
 8000d72:	d000      	beq.n	8000d76 <__aeabi_dsub+0x54e>
 8000d74:	e082      	b.n	8000e7c <__aeabi_dsub+0x654>
 8000d76:	000a      	movs	r2, r1
 8000d78:	4302      	orrs	r2, r0
 8000d7a:	d140      	bne.n	8000dfe <__aeabi_dsub+0x5d6>
 8000d7c:	2380      	movs	r3, #128	; 0x80
 8000d7e:	2500      	movs	r5, #0
 8000d80:	031b      	lsls	r3, r3, #12
 8000d82:	e713      	b.n	8000bac <__aeabi_dsub+0x384>
 8000d84:	074b      	lsls	r3, r1, #29
 8000d86:	08c2      	lsrs	r2, r0, #3
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	465d      	mov	r5, fp
 8000d8c:	08cb      	lsrs	r3, r1, #3
 8000d8e:	e6c5      	b.n	8000b1c <__aeabi_dsub+0x2f4>
 8000d90:	464a      	mov	r2, r9
 8000d92:	1a84      	subs	r4, r0, r2
 8000d94:	42a0      	cmp	r0, r4
 8000d96:	4192      	sbcs	r2, r2
 8000d98:	1acb      	subs	r3, r1, r3
 8000d9a:	4252      	negs	r2, r2
 8000d9c:	1a9b      	subs	r3, r3, r2
 8000d9e:	4698      	mov	r8, r3
 8000da0:	465d      	mov	r5, fp
 8000da2:	e59e      	b.n	80008e2 <__aeabi_dsub+0xba>
 8000da4:	464a      	mov	r2, r9
 8000da6:	0759      	lsls	r1, r3, #29
 8000da8:	08d2      	lsrs	r2, r2, #3
 8000daa:	430a      	orrs	r2, r1
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	e6f9      	b.n	8000ba4 <__aeabi_dsub+0x37c>
 8000db0:	464a      	mov	r2, r9
 8000db2:	1a14      	subs	r4, r2, r0
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	4192      	sbcs	r2, r2
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	4252      	negs	r2, r2
 8000dbc:	1a9b      	subs	r3, r3, r2
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	e586      	b.n	80008d2 <__aeabi_dsub+0xaa>
 8000dc4:	464a      	mov	r2, r9
 8000dc6:	0759      	lsls	r1, r3, #29
 8000dc8:	08d2      	lsrs	r2, r2, #3
 8000dca:	430a      	orrs	r2, r1
 8000dcc:	08db      	lsrs	r3, r3, #3
 8000dce:	e6a5      	b.n	8000b1c <__aeabi_dsub+0x2f4>
 8000dd0:	464c      	mov	r4, r9
 8000dd2:	4323      	orrs	r3, r4
 8000dd4:	001c      	movs	r4, r3
 8000dd6:	1e63      	subs	r3, r4, #1
 8000dd8:	419c      	sbcs	r4, r3
 8000dda:	e65b      	b.n	8000a94 <__aeabi_dsub+0x26c>
 8000ddc:	4665      	mov	r5, ip
 8000dde:	001e      	movs	r6, r3
 8000de0:	3d20      	subs	r5, #32
 8000de2:	40ee      	lsrs	r6, r5
 8000de4:	2c20      	cmp	r4, #32
 8000de6:	d005      	beq.n	8000df4 <__aeabi_dsub+0x5cc>
 8000de8:	2540      	movs	r5, #64	; 0x40
 8000dea:	1b2d      	subs	r5, r5, r4
 8000dec:	40ab      	lsls	r3, r5
 8000dee:	464c      	mov	r4, r9
 8000df0:	431c      	orrs	r4, r3
 8000df2:	46a2      	mov	sl, r4
 8000df4:	4654      	mov	r4, sl
 8000df6:	1e63      	subs	r3, r4, #1
 8000df8:	419c      	sbcs	r4, r3
 8000dfa:	4334      	orrs	r4, r6
 8000dfc:	e77d      	b.n	8000cfa <__aeabi_dsub+0x4d2>
 8000dfe:	074b      	lsls	r3, r1, #29
 8000e00:	08c2      	lsrs	r2, r0, #3
 8000e02:	431a      	orrs	r2, r3
 8000e04:	465d      	mov	r5, fp
 8000e06:	08cb      	lsrs	r3, r1, #3
 8000e08:	e6cc      	b.n	8000ba4 <__aeabi_dsub+0x37c>
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	4302      	orrs	r2, r0
 8000e0e:	d100      	bne.n	8000e12 <__aeabi_dsub+0x5ea>
 8000e10:	e736      	b.n	8000c80 <__aeabi_dsub+0x458>
 8000e12:	074b      	lsls	r3, r1, #29
 8000e14:	08c2      	lsrs	r2, r0, #3
 8000e16:	431a      	orrs	r2, r3
 8000e18:	465d      	mov	r5, fp
 8000e1a:	08cb      	lsrs	r3, r1, #3
 8000e1c:	e681      	b.n	8000b22 <__aeabi_dsub+0x2fa>
 8000e1e:	464a      	mov	r2, r9
 8000e20:	1a84      	subs	r4, r0, r2
 8000e22:	42a0      	cmp	r0, r4
 8000e24:	4192      	sbcs	r2, r2
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	4252      	negs	r2, r2
 8000e2a:	1a9b      	subs	r3, r3, r2
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	465d      	mov	r5, fp
 8000e30:	2601      	movs	r6, #1
 8000e32:	e54e      	b.n	80008d2 <__aeabi_dsub+0xaa>
 8000e34:	074b      	lsls	r3, r1, #29
 8000e36:	08c2      	lsrs	r2, r0, #3
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	08cb      	lsrs	r3, r1, #3
 8000e3c:	e6b2      	b.n	8000ba4 <__aeabi_dsub+0x37c>
 8000e3e:	464a      	mov	r2, r9
 8000e40:	1a14      	subs	r4, r2, r0
 8000e42:	45a1      	cmp	r9, r4
 8000e44:	4192      	sbcs	r2, r2
 8000e46:	1a5f      	subs	r7, r3, r1
 8000e48:	4252      	negs	r2, r2
 8000e4a:	1aba      	subs	r2, r7, r2
 8000e4c:	4690      	mov	r8, r2
 8000e4e:	0212      	lsls	r2, r2, #8
 8000e50:	d56b      	bpl.n	8000f2a <__aeabi_dsub+0x702>
 8000e52:	464a      	mov	r2, r9
 8000e54:	1a84      	subs	r4, r0, r2
 8000e56:	42a0      	cmp	r0, r4
 8000e58:	4192      	sbcs	r2, r2
 8000e5a:	1acb      	subs	r3, r1, r3
 8000e5c:	4252      	negs	r2, r2
 8000e5e:	1a9b      	subs	r3, r3, r2
 8000e60:	4698      	mov	r8, r3
 8000e62:	465d      	mov	r5, fp
 8000e64:	e564      	b.n	8000930 <__aeabi_dsub+0x108>
 8000e66:	074b      	lsls	r3, r1, #29
 8000e68:	08c2      	lsrs	r2, r0, #3
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	465d      	mov	r5, fp
 8000e6e:	08cb      	lsrs	r3, r1, #3
 8000e70:	e698      	b.n	8000ba4 <__aeabi_dsub+0x37c>
 8000e72:	074b      	lsls	r3, r1, #29
 8000e74:	08c2      	lsrs	r2, r0, #3
 8000e76:	431a      	orrs	r2, r3
 8000e78:	08cb      	lsrs	r3, r1, #3
 8000e7a:	e64f      	b.n	8000b1c <__aeabi_dsub+0x2f4>
 8000e7c:	000a      	movs	r2, r1
 8000e7e:	4302      	orrs	r2, r0
 8000e80:	d090      	beq.n	8000da4 <__aeabi_dsub+0x57c>
 8000e82:	464a      	mov	r2, r9
 8000e84:	075c      	lsls	r4, r3, #29
 8000e86:	08d2      	lsrs	r2, r2, #3
 8000e88:	4314      	orrs	r4, r2
 8000e8a:	2280      	movs	r2, #128	; 0x80
 8000e8c:	08db      	lsrs	r3, r3, #3
 8000e8e:	0312      	lsls	r2, r2, #12
 8000e90:	4213      	tst	r3, r2
 8000e92:	d008      	beq.n	8000ea6 <__aeabi_dsub+0x67e>
 8000e94:	08ce      	lsrs	r6, r1, #3
 8000e96:	4216      	tst	r6, r2
 8000e98:	d105      	bne.n	8000ea6 <__aeabi_dsub+0x67e>
 8000e9a:	08c0      	lsrs	r0, r0, #3
 8000e9c:	0749      	lsls	r1, r1, #29
 8000e9e:	4308      	orrs	r0, r1
 8000ea0:	0004      	movs	r4, r0
 8000ea2:	465d      	mov	r5, fp
 8000ea4:	0033      	movs	r3, r6
 8000ea6:	0f61      	lsrs	r1, r4, #29
 8000ea8:	00e2      	lsls	r2, r4, #3
 8000eaa:	0749      	lsls	r1, r1, #29
 8000eac:	08d2      	lsrs	r2, r2, #3
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	e678      	b.n	8000ba4 <__aeabi_dsub+0x37c>
 8000eb2:	074b      	lsls	r3, r1, #29
 8000eb4:	08c2      	lsrs	r2, r0, #3
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	08cb      	lsrs	r3, r1, #3
 8000eba:	e632      	b.n	8000b22 <__aeabi_dsub+0x2fa>
 8000ebc:	4448      	add	r0, r9
 8000ebe:	185b      	adds	r3, r3, r1
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	4192      	sbcs	r2, r2
 8000ec4:	4698      	mov	r8, r3
 8000ec6:	4252      	negs	r2, r2
 8000ec8:	4490      	add	r8, r2
 8000eca:	4643      	mov	r3, r8
 8000ecc:	0004      	movs	r4, r0
 8000ece:	021b      	lsls	r3, r3, #8
 8000ed0:	d400      	bmi.n	8000ed4 <__aeabi_dsub+0x6ac>
 8000ed2:	e61a      	b.n	8000b0a <__aeabi_dsub+0x2e2>
 8000ed4:	4642      	mov	r2, r8
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <__aeabi_dsub+0x6e8>)
 8000ed8:	2601      	movs	r6, #1
 8000eda:	401a      	ands	r2, r3
 8000edc:	4690      	mov	r8, r2
 8000ede:	e614      	b.n	8000b0a <__aeabi_dsub+0x2e2>
 8000ee0:	4666      	mov	r6, ip
 8000ee2:	001f      	movs	r7, r3
 8000ee4:	3e20      	subs	r6, #32
 8000ee6:	40f7      	lsrs	r7, r6
 8000ee8:	2c20      	cmp	r4, #32
 8000eea:	d005      	beq.n	8000ef8 <__aeabi_dsub+0x6d0>
 8000eec:	2640      	movs	r6, #64	; 0x40
 8000eee:	1b36      	subs	r6, r6, r4
 8000ef0:	40b3      	lsls	r3, r6
 8000ef2:	464c      	mov	r4, r9
 8000ef4:	431c      	orrs	r4, r3
 8000ef6:	46a2      	mov	sl, r4
 8000ef8:	4654      	mov	r4, sl
 8000efa:	1e63      	subs	r3, r4, #1
 8000efc:	419c      	sbcs	r4, r3
 8000efe:	433c      	orrs	r4, r7
 8000f00:	e5c8      	b.n	8000a94 <__aeabi_dsub+0x26c>
 8000f02:	0011      	movs	r1, r2
 8000f04:	2300      	movs	r3, #0
 8000f06:	2200      	movs	r2, #0
 8000f08:	e532      	b.n	8000970 <__aeabi_dsub+0x148>
 8000f0a:	46c0      	nop			; (mov r8, r8)
 8000f0c:	000007ff 	.word	0x000007ff
 8000f10:	ff7fffff 	.word	0xff7fffff
 8000f14:	000007fe 	.word	0x000007fe
 8000f18:	464a      	mov	r2, r9
 8000f1a:	1814      	adds	r4, r2, r0
 8000f1c:	4284      	cmp	r4, r0
 8000f1e:	4192      	sbcs	r2, r2
 8000f20:	185b      	adds	r3, r3, r1
 8000f22:	4698      	mov	r8, r3
 8000f24:	4252      	negs	r2, r2
 8000f26:	4490      	add	r8, r2
 8000f28:	e5e9      	b.n	8000afe <__aeabi_dsub+0x2d6>
 8000f2a:	4642      	mov	r2, r8
 8000f2c:	4322      	orrs	r2, r4
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_dsub+0x70a>
 8000f30:	e6a6      	b.n	8000c80 <__aeabi_dsub+0x458>
 8000f32:	e5ea      	b.n	8000b0a <__aeabi_dsub+0x2e2>
 8000f34:	074b      	lsls	r3, r1, #29
 8000f36:	08c2      	lsrs	r2, r0, #3
 8000f38:	431a      	orrs	r2, r3
 8000f3a:	08cb      	lsrs	r3, r1, #3
 8000f3c:	e632      	b.n	8000ba4 <__aeabi_dsub+0x37c>
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4901      	ldr	r1, [pc, #4]	; (8000f48 <__aeabi_dsub+0x720>)
 8000f42:	0013      	movs	r3, r2
 8000f44:	e514      	b.n	8000970 <__aeabi_dsub+0x148>
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	000007ff 	.word	0x000007ff

08000f4c <__aeabi_d2iz>:
 8000f4c:	000a      	movs	r2, r1
 8000f4e:	b530      	push	{r4, r5, lr}
 8000f50:	4c13      	ldr	r4, [pc, #76]	; (8000fa0 <__aeabi_d2iz+0x54>)
 8000f52:	0053      	lsls	r3, r2, #1
 8000f54:	0309      	lsls	r1, r1, #12
 8000f56:	0005      	movs	r5, r0
 8000f58:	0b09      	lsrs	r1, r1, #12
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	0d5b      	lsrs	r3, r3, #21
 8000f5e:	0fd2      	lsrs	r2, r2, #31
 8000f60:	42a3      	cmp	r3, r4
 8000f62:	dd04      	ble.n	8000f6e <__aeabi_d2iz+0x22>
 8000f64:	480f      	ldr	r0, [pc, #60]	; (8000fa4 <__aeabi_d2iz+0x58>)
 8000f66:	4283      	cmp	r3, r0
 8000f68:	dd02      	ble.n	8000f70 <__aeabi_d2iz+0x24>
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <__aeabi_d2iz+0x5c>)
 8000f6c:	18d0      	adds	r0, r2, r3
 8000f6e:	bd30      	pop	{r4, r5, pc}
 8000f70:	2080      	movs	r0, #128	; 0x80
 8000f72:	0340      	lsls	r0, r0, #13
 8000f74:	4301      	orrs	r1, r0
 8000f76:	480d      	ldr	r0, [pc, #52]	; (8000fac <__aeabi_d2iz+0x60>)
 8000f78:	1ac0      	subs	r0, r0, r3
 8000f7a:	281f      	cmp	r0, #31
 8000f7c:	dd08      	ble.n	8000f90 <__aeabi_d2iz+0x44>
 8000f7e:	480c      	ldr	r0, [pc, #48]	; (8000fb0 <__aeabi_d2iz+0x64>)
 8000f80:	1ac3      	subs	r3, r0, r3
 8000f82:	40d9      	lsrs	r1, r3
 8000f84:	000b      	movs	r3, r1
 8000f86:	4258      	negs	r0, r3
 8000f88:	2a00      	cmp	r2, #0
 8000f8a:	d1f0      	bne.n	8000f6e <__aeabi_d2iz+0x22>
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	e7ee      	b.n	8000f6e <__aeabi_d2iz+0x22>
 8000f90:	4c08      	ldr	r4, [pc, #32]	; (8000fb4 <__aeabi_d2iz+0x68>)
 8000f92:	40c5      	lsrs	r5, r0
 8000f94:	46a4      	mov	ip, r4
 8000f96:	4463      	add	r3, ip
 8000f98:	4099      	lsls	r1, r3
 8000f9a:	000b      	movs	r3, r1
 8000f9c:	432b      	orrs	r3, r5
 8000f9e:	e7f2      	b.n	8000f86 <__aeabi_d2iz+0x3a>
 8000fa0:	000003fe 	.word	0x000003fe
 8000fa4:	0000041d 	.word	0x0000041d
 8000fa8:	7fffffff 	.word	0x7fffffff
 8000fac:	00000433 	.word	0x00000433
 8000fb0:	00000413 	.word	0x00000413
 8000fb4:	fffffbed 	.word	0xfffffbed

08000fb8 <__aeabi_ui2d>:
 8000fb8:	b510      	push	{r4, lr}
 8000fba:	1e04      	subs	r4, r0, #0
 8000fbc:	d010      	beq.n	8000fe0 <__aeabi_ui2d+0x28>
 8000fbe:	f000 f85f 	bl	8001080 <__clzsi2>
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <__aeabi_ui2d+0x48>)
 8000fc4:	1a1b      	subs	r3, r3, r0
 8000fc6:	280a      	cmp	r0, #10
 8000fc8:	dc11      	bgt.n	8000fee <__aeabi_ui2d+0x36>
 8000fca:	220b      	movs	r2, #11
 8000fcc:	0021      	movs	r1, r4
 8000fce:	1a12      	subs	r2, r2, r0
 8000fd0:	40d1      	lsrs	r1, r2
 8000fd2:	3015      	adds	r0, #21
 8000fd4:	030a      	lsls	r2, r1, #12
 8000fd6:	055b      	lsls	r3, r3, #21
 8000fd8:	4084      	lsls	r4, r0
 8000fda:	0b12      	lsrs	r2, r2, #12
 8000fdc:	0d5b      	lsrs	r3, r3, #21
 8000fde:	e001      	b.n	8000fe4 <__aeabi_ui2d+0x2c>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	051b      	lsls	r3, r3, #20
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	0020      	movs	r0, r4
 8000fea:	0019      	movs	r1, r3
 8000fec:	bd10      	pop	{r4, pc}
 8000fee:	0022      	movs	r2, r4
 8000ff0:	380b      	subs	r0, #11
 8000ff2:	4082      	lsls	r2, r0
 8000ff4:	055b      	lsls	r3, r3, #21
 8000ff6:	0312      	lsls	r2, r2, #12
 8000ff8:	2400      	movs	r4, #0
 8000ffa:	0b12      	lsrs	r2, r2, #12
 8000ffc:	0d5b      	lsrs	r3, r3, #21
 8000ffe:	e7f1      	b.n	8000fe4 <__aeabi_ui2d+0x2c>
 8001000:	0000041e 	.word	0x0000041e

08001004 <__aeabi_cdrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	1c10      	adds	r0, r2, #0
 8001008:	4662      	mov	r2, ip
 800100a:	468c      	mov	ip, r1
 800100c:	1c19      	adds	r1, r3, #0
 800100e:	4663      	mov	r3, ip
 8001010:	e000      	b.n	8001014 <__aeabi_cdcmpeq>
 8001012:	46c0      	nop			; (mov r8, r8)

08001014 <__aeabi_cdcmpeq>:
 8001014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001016:	f000 f8ff 	bl	8001218 <__ledf2>
 800101a:	2800      	cmp	r0, #0
 800101c:	d401      	bmi.n	8001022 <__aeabi_cdcmpeq+0xe>
 800101e:	2100      	movs	r1, #0
 8001020:	42c8      	cmn	r0, r1
 8001022:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001024 <__aeabi_dcmpeq>:
 8001024:	b510      	push	{r4, lr}
 8001026:	f000 f849 	bl	80010bc <__eqdf2>
 800102a:	4240      	negs	r0, r0
 800102c:	3001      	adds	r0, #1
 800102e:	bd10      	pop	{r4, pc}

08001030 <__aeabi_dcmplt>:
 8001030:	b510      	push	{r4, lr}
 8001032:	f000 f8f1 	bl	8001218 <__ledf2>
 8001036:	2800      	cmp	r0, #0
 8001038:	db01      	blt.n	800103e <__aeabi_dcmplt+0xe>
 800103a:	2000      	movs	r0, #0
 800103c:	bd10      	pop	{r4, pc}
 800103e:	2001      	movs	r0, #1
 8001040:	bd10      	pop	{r4, pc}
 8001042:	46c0      	nop			; (mov r8, r8)

08001044 <__aeabi_dcmple>:
 8001044:	b510      	push	{r4, lr}
 8001046:	f000 f8e7 	bl	8001218 <__ledf2>
 800104a:	2800      	cmp	r0, #0
 800104c:	dd01      	ble.n	8001052 <__aeabi_dcmple+0xe>
 800104e:	2000      	movs	r0, #0
 8001050:	bd10      	pop	{r4, pc}
 8001052:	2001      	movs	r0, #1
 8001054:	bd10      	pop	{r4, pc}
 8001056:	46c0      	nop			; (mov r8, r8)

08001058 <__aeabi_dcmpgt>:
 8001058:	b510      	push	{r4, lr}
 800105a:	f000 f86b 	bl	8001134 <__gedf2>
 800105e:	2800      	cmp	r0, #0
 8001060:	dc01      	bgt.n	8001066 <__aeabi_dcmpgt+0xe>
 8001062:	2000      	movs	r0, #0
 8001064:	bd10      	pop	{r4, pc}
 8001066:	2001      	movs	r0, #1
 8001068:	bd10      	pop	{r4, pc}
 800106a:	46c0      	nop			; (mov r8, r8)

0800106c <__aeabi_dcmpge>:
 800106c:	b510      	push	{r4, lr}
 800106e:	f000 f861 	bl	8001134 <__gedf2>
 8001072:	2800      	cmp	r0, #0
 8001074:	da01      	bge.n	800107a <__aeabi_dcmpge+0xe>
 8001076:	2000      	movs	r0, #0
 8001078:	bd10      	pop	{r4, pc}
 800107a:	2001      	movs	r0, #1
 800107c:	bd10      	pop	{r4, pc}
 800107e:	46c0      	nop			; (mov r8, r8)

08001080 <__clzsi2>:
 8001080:	211c      	movs	r1, #28
 8001082:	2301      	movs	r3, #1
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4298      	cmp	r0, r3
 8001088:	d301      	bcc.n	800108e <__clzsi2+0xe>
 800108a:	0c00      	lsrs	r0, r0, #16
 800108c:	3910      	subs	r1, #16
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	4298      	cmp	r0, r3
 8001092:	d301      	bcc.n	8001098 <__clzsi2+0x18>
 8001094:	0a00      	lsrs	r0, r0, #8
 8001096:	3908      	subs	r1, #8
 8001098:	091b      	lsrs	r3, r3, #4
 800109a:	4298      	cmp	r0, r3
 800109c:	d301      	bcc.n	80010a2 <__clzsi2+0x22>
 800109e:	0900      	lsrs	r0, r0, #4
 80010a0:	3904      	subs	r1, #4
 80010a2:	a202      	add	r2, pc, #8	; (adr r2, 80010ac <__clzsi2+0x2c>)
 80010a4:	5c10      	ldrb	r0, [r2, r0]
 80010a6:	1840      	adds	r0, r0, r1
 80010a8:	4770      	bx	lr
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	02020304 	.word	0x02020304
 80010b0:	01010101 	.word	0x01010101
	...

080010bc <__eqdf2>:
 80010bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010be:	464f      	mov	r7, r9
 80010c0:	4646      	mov	r6, r8
 80010c2:	46d6      	mov	lr, sl
 80010c4:	4694      	mov	ip, r2
 80010c6:	4691      	mov	r9, r2
 80010c8:	031a      	lsls	r2, r3, #12
 80010ca:	0b12      	lsrs	r2, r2, #12
 80010cc:	4d18      	ldr	r5, [pc, #96]	; (8001130 <__eqdf2+0x74>)
 80010ce:	b5c0      	push	{r6, r7, lr}
 80010d0:	004c      	lsls	r4, r1, #1
 80010d2:	030f      	lsls	r7, r1, #12
 80010d4:	4692      	mov	sl, r2
 80010d6:	005a      	lsls	r2, r3, #1
 80010d8:	0006      	movs	r6, r0
 80010da:	4680      	mov	r8, r0
 80010dc:	0b3f      	lsrs	r7, r7, #12
 80010de:	2001      	movs	r0, #1
 80010e0:	0d64      	lsrs	r4, r4, #21
 80010e2:	0fc9      	lsrs	r1, r1, #31
 80010e4:	0d52      	lsrs	r2, r2, #21
 80010e6:	0fdb      	lsrs	r3, r3, #31
 80010e8:	42ac      	cmp	r4, r5
 80010ea:	d00a      	beq.n	8001102 <__eqdf2+0x46>
 80010ec:	42aa      	cmp	r2, r5
 80010ee:	d003      	beq.n	80010f8 <__eqdf2+0x3c>
 80010f0:	4294      	cmp	r4, r2
 80010f2:	d101      	bne.n	80010f8 <__eqdf2+0x3c>
 80010f4:	4557      	cmp	r7, sl
 80010f6:	d00d      	beq.n	8001114 <__eqdf2+0x58>
 80010f8:	bce0      	pop	{r5, r6, r7}
 80010fa:	46ba      	mov	sl, r7
 80010fc:	46b1      	mov	r9, r6
 80010fe:	46a8      	mov	r8, r5
 8001100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001102:	003d      	movs	r5, r7
 8001104:	4335      	orrs	r5, r6
 8001106:	d1f7      	bne.n	80010f8 <__eqdf2+0x3c>
 8001108:	42a2      	cmp	r2, r4
 800110a:	d1f5      	bne.n	80010f8 <__eqdf2+0x3c>
 800110c:	4652      	mov	r2, sl
 800110e:	4665      	mov	r5, ip
 8001110:	432a      	orrs	r2, r5
 8001112:	d1f1      	bne.n	80010f8 <__eqdf2+0x3c>
 8001114:	2001      	movs	r0, #1
 8001116:	45c8      	cmp	r8, r9
 8001118:	d1ee      	bne.n	80010f8 <__eqdf2+0x3c>
 800111a:	4299      	cmp	r1, r3
 800111c:	d006      	beq.n	800112c <__eqdf2+0x70>
 800111e:	2c00      	cmp	r4, #0
 8001120:	d1ea      	bne.n	80010f8 <__eqdf2+0x3c>
 8001122:	433e      	orrs	r6, r7
 8001124:	0030      	movs	r0, r6
 8001126:	1e46      	subs	r6, r0, #1
 8001128:	41b0      	sbcs	r0, r6
 800112a:	e7e5      	b.n	80010f8 <__eqdf2+0x3c>
 800112c:	2000      	movs	r0, #0
 800112e:	e7e3      	b.n	80010f8 <__eqdf2+0x3c>
 8001130:	000007ff 	.word	0x000007ff

08001134 <__gedf2>:
 8001134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001136:	464e      	mov	r6, r9
 8001138:	4645      	mov	r5, r8
 800113a:	4657      	mov	r7, sl
 800113c:	46de      	mov	lr, fp
 800113e:	0004      	movs	r4, r0
 8001140:	0018      	movs	r0, r3
 8001142:	b5e0      	push	{r5, r6, r7, lr}
 8001144:	0016      	movs	r6, r2
 8001146:	031b      	lsls	r3, r3, #12
 8001148:	0b1b      	lsrs	r3, r3, #12
 800114a:	4d32      	ldr	r5, [pc, #200]	; (8001214 <__gedf2+0xe0>)
 800114c:	030f      	lsls	r7, r1, #12
 800114e:	004a      	lsls	r2, r1, #1
 8001150:	4699      	mov	r9, r3
 8001152:	0043      	lsls	r3, r0, #1
 8001154:	46a4      	mov	ip, r4
 8001156:	46b0      	mov	r8, r6
 8001158:	0b3f      	lsrs	r7, r7, #12
 800115a:	0d52      	lsrs	r2, r2, #21
 800115c:	0fc9      	lsrs	r1, r1, #31
 800115e:	0d5b      	lsrs	r3, r3, #21
 8001160:	0fc0      	lsrs	r0, r0, #31
 8001162:	42aa      	cmp	r2, r5
 8001164:	d029      	beq.n	80011ba <__gedf2+0x86>
 8001166:	42ab      	cmp	r3, r5
 8001168:	d018      	beq.n	800119c <__gedf2+0x68>
 800116a:	2a00      	cmp	r2, #0
 800116c:	d12a      	bne.n	80011c4 <__gedf2+0x90>
 800116e:	433c      	orrs	r4, r7
 8001170:	46a3      	mov	fp, r4
 8001172:	4265      	negs	r5, r4
 8001174:	4165      	adcs	r5, r4
 8001176:	2b00      	cmp	r3, #0
 8001178:	d102      	bne.n	8001180 <__gedf2+0x4c>
 800117a:	464c      	mov	r4, r9
 800117c:	4326      	orrs	r6, r4
 800117e:	d027      	beq.n	80011d0 <__gedf2+0x9c>
 8001180:	2d00      	cmp	r5, #0
 8001182:	d115      	bne.n	80011b0 <__gedf2+0x7c>
 8001184:	4281      	cmp	r1, r0
 8001186:	d028      	beq.n	80011da <__gedf2+0xa6>
 8001188:	2002      	movs	r0, #2
 800118a:	3901      	subs	r1, #1
 800118c:	4008      	ands	r0, r1
 800118e:	3801      	subs	r0, #1
 8001190:	bcf0      	pop	{r4, r5, r6, r7}
 8001192:	46bb      	mov	fp, r7
 8001194:	46b2      	mov	sl, r6
 8001196:	46a9      	mov	r9, r5
 8001198:	46a0      	mov	r8, r4
 800119a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119c:	464d      	mov	r5, r9
 800119e:	432e      	orrs	r6, r5
 80011a0:	d12f      	bne.n	8001202 <__gedf2+0xce>
 80011a2:	2a00      	cmp	r2, #0
 80011a4:	d1ee      	bne.n	8001184 <__gedf2+0x50>
 80011a6:	433c      	orrs	r4, r7
 80011a8:	4265      	negs	r5, r4
 80011aa:	4165      	adcs	r5, r4
 80011ac:	2d00      	cmp	r5, #0
 80011ae:	d0e9      	beq.n	8001184 <__gedf2+0x50>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d1ed      	bne.n	8001190 <__gedf2+0x5c>
 80011b4:	2001      	movs	r0, #1
 80011b6:	4240      	negs	r0, r0
 80011b8:	e7ea      	b.n	8001190 <__gedf2+0x5c>
 80011ba:	003d      	movs	r5, r7
 80011bc:	4325      	orrs	r5, r4
 80011be:	d120      	bne.n	8001202 <__gedf2+0xce>
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d0eb      	beq.n	800119c <__gedf2+0x68>
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1dd      	bne.n	8001184 <__gedf2+0x50>
 80011c8:	464c      	mov	r4, r9
 80011ca:	4326      	orrs	r6, r4
 80011cc:	d1da      	bne.n	8001184 <__gedf2+0x50>
 80011ce:	e7db      	b.n	8001188 <__gedf2+0x54>
 80011d0:	465b      	mov	r3, fp
 80011d2:	2000      	movs	r0, #0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0db      	beq.n	8001190 <__gedf2+0x5c>
 80011d8:	e7d6      	b.n	8001188 <__gedf2+0x54>
 80011da:	429a      	cmp	r2, r3
 80011dc:	dc0a      	bgt.n	80011f4 <__gedf2+0xc0>
 80011de:	dbe7      	blt.n	80011b0 <__gedf2+0x7c>
 80011e0:	454f      	cmp	r7, r9
 80011e2:	d8d1      	bhi.n	8001188 <__gedf2+0x54>
 80011e4:	d010      	beq.n	8001208 <__gedf2+0xd4>
 80011e6:	2000      	movs	r0, #0
 80011e8:	454f      	cmp	r7, r9
 80011ea:	d2d1      	bcs.n	8001190 <__gedf2+0x5c>
 80011ec:	2900      	cmp	r1, #0
 80011ee:	d0e1      	beq.n	80011b4 <__gedf2+0x80>
 80011f0:	0008      	movs	r0, r1
 80011f2:	e7cd      	b.n	8001190 <__gedf2+0x5c>
 80011f4:	4243      	negs	r3, r0
 80011f6:	4158      	adcs	r0, r3
 80011f8:	2302      	movs	r3, #2
 80011fa:	4240      	negs	r0, r0
 80011fc:	4018      	ands	r0, r3
 80011fe:	3801      	subs	r0, #1
 8001200:	e7c6      	b.n	8001190 <__gedf2+0x5c>
 8001202:	2002      	movs	r0, #2
 8001204:	4240      	negs	r0, r0
 8001206:	e7c3      	b.n	8001190 <__gedf2+0x5c>
 8001208:	45c4      	cmp	ip, r8
 800120a:	d8bd      	bhi.n	8001188 <__gedf2+0x54>
 800120c:	2000      	movs	r0, #0
 800120e:	45c4      	cmp	ip, r8
 8001210:	d2be      	bcs.n	8001190 <__gedf2+0x5c>
 8001212:	e7eb      	b.n	80011ec <__gedf2+0xb8>
 8001214:	000007ff 	.word	0x000007ff

08001218 <__ledf2>:
 8001218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121a:	464e      	mov	r6, r9
 800121c:	4645      	mov	r5, r8
 800121e:	4657      	mov	r7, sl
 8001220:	46de      	mov	lr, fp
 8001222:	0004      	movs	r4, r0
 8001224:	0018      	movs	r0, r3
 8001226:	b5e0      	push	{r5, r6, r7, lr}
 8001228:	0016      	movs	r6, r2
 800122a:	031b      	lsls	r3, r3, #12
 800122c:	0b1b      	lsrs	r3, r3, #12
 800122e:	4d31      	ldr	r5, [pc, #196]	; (80012f4 <__ledf2+0xdc>)
 8001230:	030f      	lsls	r7, r1, #12
 8001232:	004a      	lsls	r2, r1, #1
 8001234:	4699      	mov	r9, r3
 8001236:	0043      	lsls	r3, r0, #1
 8001238:	46a4      	mov	ip, r4
 800123a:	46b0      	mov	r8, r6
 800123c:	0b3f      	lsrs	r7, r7, #12
 800123e:	0d52      	lsrs	r2, r2, #21
 8001240:	0fc9      	lsrs	r1, r1, #31
 8001242:	0d5b      	lsrs	r3, r3, #21
 8001244:	0fc0      	lsrs	r0, r0, #31
 8001246:	42aa      	cmp	r2, r5
 8001248:	d011      	beq.n	800126e <__ledf2+0x56>
 800124a:	42ab      	cmp	r3, r5
 800124c:	d014      	beq.n	8001278 <__ledf2+0x60>
 800124e:	2a00      	cmp	r2, #0
 8001250:	d12f      	bne.n	80012b2 <__ledf2+0x9a>
 8001252:	433c      	orrs	r4, r7
 8001254:	46a3      	mov	fp, r4
 8001256:	4265      	negs	r5, r4
 8001258:	4165      	adcs	r5, r4
 800125a:	2b00      	cmp	r3, #0
 800125c:	d114      	bne.n	8001288 <__ledf2+0x70>
 800125e:	464c      	mov	r4, r9
 8001260:	4326      	orrs	r6, r4
 8001262:	d111      	bne.n	8001288 <__ledf2+0x70>
 8001264:	465b      	mov	r3, fp
 8001266:	2000      	movs	r0, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d017      	beq.n	800129c <__ledf2+0x84>
 800126c:	e010      	b.n	8001290 <__ledf2+0x78>
 800126e:	003d      	movs	r5, r7
 8001270:	4325      	orrs	r5, r4
 8001272:	d112      	bne.n	800129a <__ledf2+0x82>
 8001274:	4293      	cmp	r3, r2
 8001276:	d11c      	bne.n	80012b2 <__ledf2+0x9a>
 8001278:	464d      	mov	r5, r9
 800127a:	432e      	orrs	r6, r5
 800127c:	d10d      	bne.n	800129a <__ledf2+0x82>
 800127e:	2a00      	cmp	r2, #0
 8001280:	d104      	bne.n	800128c <__ledf2+0x74>
 8001282:	433c      	orrs	r4, r7
 8001284:	4265      	negs	r5, r4
 8001286:	4165      	adcs	r5, r4
 8001288:	2d00      	cmp	r5, #0
 800128a:	d10d      	bne.n	80012a8 <__ledf2+0x90>
 800128c:	4281      	cmp	r1, r0
 800128e:	d016      	beq.n	80012be <__ledf2+0xa6>
 8001290:	2002      	movs	r0, #2
 8001292:	3901      	subs	r1, #1
 8001294:	4008      	ands	r0, r1
 8001296:	3801      	subs	r0, #1
 8001298:	e000      	b.n	800129c <__ledf2+0x84>
 800129a:	2002      	movs	r0, #2
 800129c:	bcf0      	pop	{r4, r5, r6, r7}
 800129e:	46bb      	mov	fp, r7
 80012a0:	46b2      	mov	sl, r6
 80012a2:	46a9      	mov	r9, r5
 80012a4:	46a0      	mov	r8, r4
 80012a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d1f7      	bne.n	800129c <__ledf2+0x84>
 80012ac:	2001      	movs	r0, #1
 80012ae:	4240      	negs	r0, r0
 80012b0:	e7f4      	b.n	800129c <__ledf2+0x84>
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1ea      	bne.n	800128c <__ledf2+0x74>
 80012b6:	464c      	mov	r4, r9
 80012b8:	4326      	orrs	r6, r4
 80012ba:	d1e7      	bne.n	800128c <__ledf2+0x74>
 80012bc:	e7e8      	b.n	8001290 <__ledf2+0x78>
 80012be:	429a      	cmp	r2, r3
 80012c0:	dd06      	ble.n	80012d0 <__ledf2+0xb8>
 80012c2:	4243      	negs	r3, r0
 80012c4:	4158      	adcs	r0, r3
 80012c6:	2302      	movs	r3, #2
 80012c8:	4240      	negs	r0, r0
 80012ca:	4018      	ands	r0, r3
 80012cc:	3801      	subs	r0, #1
 80012ce:	e7e5      	b.n	800129c <__ledf2+0x84>
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dbe9      	blt.n	80012a8 <__ledf2+0x90>
 80012d4:	454f      	cmp	r7, r9
 80012d6:	d8db      	bhi.n	8001290 <__ledf2+0x78>
 80012d8:	d006      	beq.n	80012e8 <__ledf2+0xd0>
 80012da:	2000      	movs	r0, #0
 80012dc:	454f      	cmp	r7, r9
 80012de:	d2dd      	bcs.n	800129c <__ledf2+0x84>
 80012e0:	2900      	cmp	r1, #0
 80012e2:	d0e3      	beq.n	80012ac <__ledf2+0x94>
 80012e4:	0008      	movs	r0, r1
 80012e6:	e7d9      	b.n	800129c <__ledf2+0x84>
 80012e8:	45c4      	cmp	ip, r8
 80012ea:	d8d1      	bhi.n	8001290 <__ledf2+0x78>
 80012ec:	2000      	movs	r0, #0
 80012ee:	45c4      	cmp	ip, r8
 80012f0:	d2d4      	bcs.n	800129c <__ledf2+0x84>
 80012f2:	e7f5      	b.n	80012e0 <__ledf2+0xc8>
 80012f4:	000007ff 	.word	0x000007ff

080012f8 <displayNum>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayNum(uint16_t numero, uint8_t display){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	0002      	movs	r2, r0
 8001300:	1dbb      	adds	r3, r7, #6
 8001302:	801a      	strh	r2, [r3, #0]
 8001304:	1d7b      	adds	r3, r7, #5
 8001306:	1c0a      	adds	r2, r1, #0
 8001308:	701a      	strb	r2, [r3, #0]

		switch(display){
 800130a:	1d7b      	adds	r3, r7, #5
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b04      	cmp	r3, #4
 8001310:	d100      	bne.n	8001314 <displayNum+0x1c>
 8001312:	e073      	b.n	80013fc <displayNum+0x104>
 8001314:	dd00      	ble.n	8001318 <displayNum+0x20>
 8001316:	e094      	b.n	8001442 <displayNum+0x14a>
 8001318:	2b03      	cmp	r3, #3
 800131a:	d04c      	beq.n	80013b6 <displayNum+0xbe>
 800131c:	dd00      	ble.n	8001320 <displayNum+0x28>
 800131e:	e090      	b.n	8001442 <displayNum+0x14a>
 8001320:	2b01      	cmp	r3, #1
 8001322:	d002      	beq.n	800132a <displayNum+0x32>
 8001324:	2b02      	cmp	r3, #2
 8001326:	d023      	beq.n	8001370 <displayNum+0x78>
 8001328:	e08b      	b.n	8001442 <displayNum+0x14a>
		case 1:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 800132a:	4be7      	ldr	r3, [pc, #924]	; (80016c8 <displayNum+0x3d0>)
 800132c:	2201      	movs	r2, #1
 800132e:	2140      	movs	r1, #64	; 0x40
 8001330:	0018      	movs	r0, r3
 8001332:	f001 ff59 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8001336:	2380      	movs	r3, #128	; 0x80
 8001338:	0159      	lsls	r1, r3, #5
 800133a:	23a0      	movs	r3, #160	; 0xa0
 800133c:	05db      	lsls	r3, r3, #23
 800133e:	2200      	movs	r2, #0
 8001340:	0018      	movs	r0, r3
 8001342:	f001 ff51 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	0119      	lsls	r1, r3, #4
 800134a:	23a0      	movs	r3, #160	; 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	2200      	movs	r2, #0
 8001350:	0018      	movs	r0, r3
 8001352:	f001 ff49 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8001356:	4bdd      	ldr	r3, [pc, #884]	; (80016cc <displayNum+0x3d4>)
 8001358:	2200      	movs	r2, #0
 800135a:	2102      	movs	r1, #2
 800135c:	0018      	movs	r0, r3
 800135e:	f001 ff43 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_DP_GPIO_Port, LED_DP_Pin, GPIO_PIN_RESET);
 8001362:	4bda      	ldr	r3, [pc, #872]	; (80016cc <displayNum+0x3d4>)
 8001364:	2200      	movs	r2, #0
 8001366:	2120      	movs	r1, #32
 8001368:	0018      	movs	r0, r3
 800136a:	f001 ff3d 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 800136e:	e08b      	b.n	8001488 <displayNum+0x190>
		case 2:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8001370:	4bd5      	ldr	r3, [pc, #852]	; (80016c8 <displayNum+0x3d0>)
 8001372:	2200      	movs	r2, #0
 8001374:	2140      	movs	r1, #64	; 0x40
 8001376:	0018      	movs	r0, r3
 8001378:	f001 ff36 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	0159      	lsls	r1, r3, #5
 8001380:	23a0      	movs	r3, #160	; 0xa0
 8001382:	05db      	lsls	r3, r3, #23
 8001384:	2201      	movs	r2, #1
 8001386:	0018      	movs	r0, r3
 8001388:	f001 ff2e 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	0119      	lsls	r1, r3, #4
 8001390:	23a0      	movs	r3, #160	; 0xa0
 8001392:	05db      	lsls	r3, r3, #23
 8001394:	2200      	movs	r2, #0
 8001396:	0018      	movs	r0, r3
 8001398:	f001 ff26 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 800139c:	4bcb      	ldr	r3, [pc, #812]	; (80016cc <displayNum+0x3d4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	2102      	movs	r1, #2
 80013a2:	0018      	movs	r0, r3
 80013a4:	f001 ff20 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_DP_GPIO_Port, LED_DP_Pin, GPIO_PIN_RESET);
 80013a8:	4bc8      	ldr	r3, [pc, #800]	; (80016cc <displayNum+0x3d4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	2120      	movs	r1, #32
 80013ae:	0018      	movs	r0, r3
 80013b0:	f001 ff1a 	bl	80031e8 <HAL_GPIO_WritePin>

			break;
 80013b4:	e068      	b.n	8001488 <displayNum+0x190>
		case 3:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 80013b6:	4bc4      	ldr	r3, [pc, #784]	; (80016c8 <displayNum+0x3d0>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	2140      	movs	r1, #64	; 0x40
 80013bc:	0018      	movs	r0, r3
 80013be:	f001 ff13 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	0159      	lsls	r1, r3, #5
 80013c6:	23a0      	movs	r3, #160	; 0xa0
 80013c8:	05db      	lsls	r3, r3, #23
 80013ca:	2200      	movs	r2, #0
 80013cc:	0018      	movs	r0, r3
 80013ce:	f001 ff0b 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	0119      	lsls	r1, r3, #4
 80013d6:	23a0      	movs	r3, #160	; 0xa0
 80013d8:	05db      	lsls	r3, r3, #23
 80013da:	2201      	movs	r2, #1
 80013dc:	0018      	movs	r0, r3
 80013de:	f001 ff03 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80013e2:	4bba      	ldr	r3, [pc, #744]	; (80016cc <displayNum+0x3d4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	2102      	movs	r1, #2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f001 fefd 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_DP_GPIO_Port, LED_DP_Pin, GPIO_PIN_SET);
 80013ee:	4bb7      	ldr	r3, [pc, #732]	; (80016cc <displayNum+0x3d4>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	2120      	movs	r1, #32
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 fef7 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80013fa:	e045      	b.n	8001488 <displayNum+0x190>
		case 4:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 80013fc:	4bb2      	ldr	r3, [pc, #712]	; (80016c8 <displayNum+0x3d0>)
 80013fe:	2200      	movs	r2, #0
 8001400:	2140      	movs	r1, #64	; 0x40
 8001402:	0018      	movs	r0, r3
 8001404:	f001 fef0 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8001408:	2380      	movs	r3, #128	; 0x80
 800140a:	0159      	lsls	r1, r3, #5
 800140c:	23a0      	movs	r3, #160	; 0xa0
 800140e:	05db      	lsls	r3, r3, #23
 8001410:	2200      	movs	r2, #0
 8001412:	0018      	movs	r0, r3
 8001414:	f001 fee8 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	0119      	lsls	r1, r3, #4
 800141c:	23a0      	movs	r3, #160	; 0xa0
 800141e:	05db      	lsls	r3, r3, #23
 8001420:	2200      	movs	r2, #0
 8001422:	0018      	movs	r0, r3
 8001424:	f001 fee0 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8001428:	4ba8      	ldr	r3, [pc, #672]	; (80016cc <displayNum+0x3d4>)
 800142a:	2201      	movs	r2, #1
 800142c:	2102      	movs	r1, #2
 800142e:	0018      	movs	r0, r3
 8001430:	f001 feda 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_DP_GPIO_Port, LED_DP_Pin, GPIO_PIN_RESET);
 8001434:	4ba5      	ldr	r3, [pc, #660]	; (80016cc <displayNum+0x3d4>)
 8001436:	2200      	movs	r2, #0
 8001438:	2120      	movs	r1, #32
 800143a:	0018      	movs	r0, r3
 800143c:	f001 fed4 	bl	80031e8 <HAL_GPIO_WritePin>

			break;
 8001440:	e022      	b.n	8001488 <displayNum+0x190>
		default:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8001442:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <displayNum+0x3d0>)
 8001444:	2200      	movs	r2, #0
 8001446:	2140      	movs	r1, #64	; 0x40
 8001448:	0018      	movs	r0, r3
 800144a:	f001 fecd 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 800144e:	2380      	movs	r3, #128	; 0x80
 8001450:	0159      	lsls	r1, r3, #5
 8001452:	23a0      	movs	r3, #160	; 0xa0
 8001454:	05db      	lsls	r3, r3, #23
 8001456:	2200      	movs	r2, #0
 8001458:	0018      	movs	r0, r3
 800145a:	f001 fec5 	bl	80031e8 <HAL_GPIO_WritePin>
		    HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	0119      	lsls	r1, r3, #4
 8001462:	23a0      	movs	r3, #160	; 0xa0
 8001464:	05db      	lsls	r3, r3, #23
 8001466:	2200      	movs	r2, #0
 8001468:	0018      	movs	r0, r3
 800146a:	f001 febd 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 800146e:	4b97      	ldr	r3, [pc, #604]	; (80016cc <displayNum+0x3d4>)
 8001470:	2200      	movs	r2, #0
 8001472:	2102      	movs	r1, #2
 8001474:	0018      	movs	r0, r3
 8001476:	f001 feb7 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_DP_GPIO_Port, LED_DP_Pin, GPIO_PIN_RESET);
 800147a:	4b94      	ldr	r3, [pc, #592]	; (80016cc <displayNum+0x3d4>)
 800147c:	2200      	movs	r2, #0
 800147e:	2120      	movs	r1, #32
 8001480:	0018      	movs	r0, r3
 8001482:	f001 feb1 	bl	80031e8 <HAL_GPIO_WritePin>

			break;
 8001486:	46c0      	nop			; (mov r8, r8)
		}

		HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_RESET);
 8001488:	4b90      	ldr	r3, [pc, #576]	; (80016cc <displayNum+0x3d4>)
 800148a:	2200      	movs	r2, #0
 800148c:	2108      	movs	r1, #8
 800148e:	0018      	movs	r0, r3
 8001490:	f001 feaa 	bl	80031e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8001494:	4b8d      	ldr	r3, [pc, #564]	; (80016cc <displayNum+0x3d4>)
 8001496:	2200      	movs	r2, #0
 8001498:	2104      	movs	r1, #4
 800149a:	0018      	movs	r0, r3
 800149c:	f001 fea4 	bl	80031e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_RESET);
 80014a0:	4b8b      	ldr	r3, [pc, #556]	; (80016d0 <displayNum+0x3d8>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	0018      	movs	r0, r3
 80014a8:	f001 fe9e 	bl	80031e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_RESET);
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	0219      	lsls	r1, r3, #8
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	2200      	movs	r2, #0
 80014b6:	0018      	movs	r0, r3
 80014b8:	f001 fe96 	bl	80031e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_RESET);
 80014bc:	4b82      	ldr	r3, [pc, #520]	; (80016c8 <displayNum+0x3d0>)
 80014be:	2200      	movs	r2, #0
 80014c0:	2110      	movs	r1, #16
 80014c2:	0018      	movs	r0, r3
 80014c4:	f001 fe90 	bl	80031e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_RESET);
 80014c8:	4b82      	ldr	r3, [pc, #520]	; (80016d4 <displayNum+0x3dc>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	2101      	movs	r1, #1
 80014ce:	0018      	movs	r0, r3
 80014d0:	f001 fe8a 	bl	80031e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80014d4:	4b7f      	ldr	r3, [pc, #508]	; (80016d4 <displayNum+0x3dc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	2102      	movs	r1, #2
 80014da:	0018      	movs	r0, r3
 80014dc:	f001 fe84 	bl	80031e8 <HAL_GPIO_WritePin>

		switch(numero){
 80014e0:	1dbb      	adds	r3, r7, #6
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d900      	bls.n	80014ea <displayNum+0x1f2>
 80014e8:	e200      	b.n	80018ec <displayNum+0x5f4>
 80014ea:	009a      	lsls	r2, r3, #2
 80014ec:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <displayNum+0x3e0>)
 80014ee:	18d3      	adds	r3, r2, r3
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	469f      	mov	pc, r3
		case 0:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80014f4:	4b75      	ldr	r3, [pc, #468]	; (80016cc <displayNum+0x3d4>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	2108      	movs	r1, #8
 80014fa:	0018      	movs	r0, r3
 80014fc:	f001 fe74 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001500:	4b72      	ldr	r3, [pc, #456]	; (80016cc <displayNum+0x3d4>)
 8001502:	2201      	movs	r2, #1
 8001504:	2104      	movs	r1, #4
 8001506:	0018      	movs	r0, r3
 8001508:	f001 fe6e 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 800150c:	4b70      	ldr	r3, [pc, #448]	; (80016d0 <displayNum+0x3d8>)
 800150e:	2201      	movs	r2, #1
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	0018      	movs	r0, r3
 8001514:	f001 fe68 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	0219      	lsls	r1, r3, #8
 800151c:	23a0      	movs	r3, #160	; 0xa0
 800151e:	05db      	lsls	r3, r3, #23
 8001520:	2201      	movs	r2, #1
 8001522:	0018      	movs	r0, r3
 8001524:	f001 fe60 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001528:	4b67      	ldr	r3, [pc, #412]	; (80016c8 <displayNum+0x3d0>)
 800152a:	2201      	movs	r2, #1
 800152c:	2110      	movs	r1, #16
 800152e:	0018      	movs	r0, r3
 8001530:	f001 fe5a 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8001534:	4b67      	ldr	r3, [pc, #412]	; (80016d4 <displayNum+0x3dc>)
 8001536:	2201      	movs	r2, #1
 8001538:	2101      	movs	r1, #1
 800153a:	0018      	movs	r0, r3
 800153c:	f001 fe54 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 8001540:	e1d5      	b.n	80018ee <displayNum+0x5f6>
		case 1:
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001542:	4b62      	ldr	r3, [pc, #392]	; (80016cc <displayNum+0x3d4>)
 8001544:	2201      	movs	r2, #1
 8001546:	2104      	movs	r1, #4
 8001548:	0018      	movs	r0, r3
 800154a:	f001 fe4d 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 800154e:	4b60      	ldr	r3, [pc, #384]	; (80016d0 <displayNum+0x3d8>)
 8001550:	2201      	movs	r2, #1
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	0018      	movs	r0, r3
 8001556:	f001 fe47 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 800155a:	e1c8      	b.n	80018ee <displayNum+0x5f6>
		case 2:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800155c:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <displayNum+0x3d4>)
 800155e:	2201      	movs	r2, #1
 8001560:	2108      	movs	r1, #8
 8001562:	0018      	movs	r0, r3
 8001564:	f001 fe40 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001568:	4b58      	ldr	r3, [pc, #352]	; (80016cc <displayNum+0x3d4>)
 800156a:	2201      	movs	r2, #1
 800156c:	2104      	movs	r1, #4
 800156e:	0018      	movs	r0, r3
 8001570:	f001 fe3a 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8001574:	2380      	movs	r3, #128	; 0x80
 8001576:	0219      	lsls	r1, r3, #8
 8001578:	23a0      	movs	r3, #160	; 0xa0
 800157a:	05db      	lsls	r3, r3, #23
 800157c:	2201      	movs	r2, #1
 800157e:	0018      	movs	r0, r3
 8001580:	f001 fe32 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <displayNum+0x3d0>)
 8001586:	2201      	movs	r2, #1
 8001588:	2110      	movs	r1, #16
 800158a:	0018      	movs	r0, r3
 800158c:	f001 fe2c 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001590:	4b50      	ldr	r3, [pc, #320]	; (80016d4 <displayNum+0x3dc>)
 8001592:	2201      	movs	r2, #1
 8001594:	2102      	movs	r1, #2
 8001596:	0018      	movs	r0, r3
 8001598:	f001 fe26 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 800159c:	e1a7      	b.n	80018ee <displayNum+0x5f6>
		case 3:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <displayNum+0x3d4>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	2108      	movs	r1, #8
 80015a4:	0018      	movs	r0, r3
 80015a6:	f001 fe1f 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80015aa:	4b48      	ldr	r3, [pc, #288]	; (80016cc <displayNum+0x3d4>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	2104      	movs	r1, #4
 80015b0:	0018      	movs	r0, r3
 80015b2:	f001 fe19 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80015b6:	4b46      	ldr	r3, [pc, #280]	; (80016d0 <displayNum+0x3d8>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	2180      	movs	r1, #128	; 0x80
 80015bc:	0018      	movs	r0, r3
 80015be:	f001 fe13 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	0219      	lsls	r1, r3, #8
 80015c6:	23a0      	movs	r3, #160	; 0xa0
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	2201      	movs	r2, #1
 80015cc:	0018      	movs	r0, r3
 80015ce:	f001 fe0b 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80015d2:	4b40      	ldr	r3, [pc, #256]	; (80016d4 <displayNum+0x3dc>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	2102      	movs	r1, #2
 80015d8:	0018      	movs	r0, r3
 80015da:	f001 fe05 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80015de:	e186      	b.n	80018ee <displayNum+0x5f6>
		case 4:
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <displayNum+0x3d4>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	2104      	movs	r1, #4
 80015e6:	0018      	movs	r0, r3
 80015e8:	f001 fdfe 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80015ec:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <displayNum+0x3d8>)
 80015ee:	2201      	movs	r2, #1
 80015f0:	2180      	movs	r1, #128	; 0x80
 80015f2:	0018      	movs	r0, r3
 80015f4:	f001 fdf8 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80015f8:	4b36      	ldr	r3, [pc, #216]	; (80016d4 <displayNum+0x3dc>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	2101      	movs	r1, #1
 80015fe:	0018      	movs	r0, r3
 8001600:	f001 fdf2 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001604:	4b33      	ldr	r3, [pc, #204]	; (80016d4 <displayNum+0x3dc>)
 8001606:	2201      	movs	r2, #1
 8001608:	2102      	movs	r1, #2
 800160a:	0018      	movs	r0, r3
 800160c:	f001 fdec 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 8001610:	e16d      	b.n	80018ee <displayNum+0x5f6>
		case 5:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8001612:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <displayNum+0x3d4>)
 8001614:	2201      	movs	r2, #1
 8001616:	2108      	movs	r1, #8
 8001618:	0018      	movs	r0, r3
 800161a:	f001 fde5 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <displayNum+0x3d8>)
 8001620:	2201      	movs	r2, #1
 8001622:	2180      	movs	r1, #128	; 0x80
 8001624:	0018      	movs	r0, r3
 8001626:	f001 fddf 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	0219      	lsls	r1, r3, #8
 800162e:	23a0      	movs	r3, #160	; 0xa0
 8001630:	05db      	lsls	r3, r3, #23
 8001632:	2201      	movs	r2, #1
 8001634:	0018      	movs	r0, r3
 8001636:	f001 fdd7 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <displayNum+0x3dc>)
 800163c:	2201      	movs	r2, #1
 800163e:	2101      	movs	r1, #1
 8001640:	0018      	movs	r0, r3
 8001642:	f001 fdd1 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001646:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <displayNum+0x3dc>)
 8001648:	2201      	movs	r2, #1
 800164a:	2102      	movs	r1, #2
 800164c:	0018      	movs	r0, r3
 800164e:	f001 fdcb 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 8001652:	e14c      	b.n	80018ee <displayNum+0x5f6>
		case 6:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <displayNum+0x3d4>)
 8001656:	2201      	movs	r2, #1
 8001658:	2108      	movs	r1, #8
 800165a:	0018      	movs	r0, r3
 800165c:	f001 fdc4 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8001660:	4b1b      	ldr	r3, [pc, #108]	; (80016d0 <displayNum+0x3d8>)
 8001662:	2201      	movs	r2, #1
 8001664:	2180      	movs	r1, #128	; 0x80
 8001666:	0018      	movs	r0, r3
 8001668:	f001 fdbe 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	0219      	lsls	r1, r3, #8
 8001670:	23a0      	movs	r3, #160	; 0xa0
 8001672:	05db      	lsls	r3, r3, #23
 8001674:	2201      	movs	r2, #1
 8001676:	0018      	movs	r0, r3
 8001678:	f001 fdb6 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <displayNum+0x3d0>)
 800167e:	2201      	movs	r2, #1
 8001680:	2110      	movs	r1, #16
 8001682:	0018      	movs	r0, r3
 8001684:	f001 fdb0 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <displayNum+0x3dc>)
 800168a:	2201      	movs	r2, #1
 800168c:	2101      	movs	r1, #1
 800168e:	0018      	movs	r0, r3
 8001690:	f001 fdaa 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <displayNum+0x3dc>)
 8001696:	2201      	movs	r2, #1
 8001698:	2102      	movs	r1, #2
 800169a:	0018      	movs	r0, r3
 800169c:	f001 fda4 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80016a0:	e125      	b.n	80018ee <displayNum+0x5f6>
		case 7:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <displayNum+0x3d4>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	2108      	movs	r1, #8
 80016a8:	0018      	movs	r0, r3
 80016aa:	f001 fd9d 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80016ae:	4b07      	ldr	r3, [pc, #28]	; (80016cc <displayNum+0x3d4>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	2104      	movs	r1, #4
 80016b4:	0018      	movs	r0, r3
 80016b6:	f001 fd97 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <displayNum+0x3d8>)
 80016bc:	2201      	movs	r2, #1
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	0018      	movs	r0, r3
 80016c2:	f001 fd91 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80016c6:	e112      	b.n	80018ee <displayNum+0x5f6>
 80016c8:	50000c00 	.word	0x50000c00
 80016cc:	50000800 	.word	0x50000800
 80016d0:	50000400 	.word	0x50000400
 80016d4:	50001400 	.word	0x50001400
 80016d8:	080041ac 	.word	0x080041ac
		case 8:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80016dc:	4b87      	ldr	r3, [pc, #540]	; (80018fc <displayNum+0x604>)
 80016de:	2201      	movs	r2, #1
 80016e0:	2108      	movs	r1, #8
 80016e2:	0018      	movs	r0, r3
 80016e4:	f001 fd80 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80016e8:	4b84      	ldr	r3, [pc, #528]	; (80018fc <displayNum+0x604>)
 80016ea:	2201      	movs	r2, #1
 80016ec:	2104      	movs	r1, #4
 80016ee:	0018      	movs	r0, r3
 80016f0:	f001 fd7a 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80016f4:	4b82      	ldr	r3, [pc, #520]	; (8001900 <displayNum+0x608>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	2180      	movs	r1, #128	; 0x80
 80016fa:	0018      	movs	r0, r3
 80016fc:	f001 fd74 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	0219      	lsls	r1, r3, #8
 8001704:	23a0      	movs	r3, #160	; 0xa0
 8001706:	05db      	lsls	r3, r3, #23
 8001708:	2201      	movs	r2, #1
 800170a:	0018      	movs	r0, r3
 800170c:	f001 fd6c 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001710:	4b7c      	ldr	r3, [pc, #496]	; (8001904 <displayNum+0x60c>)
 8001712:	2201      	movs	r2, #1
 8001714:	2110      	movs	r1, #16
 8001716:	0018      	movs	r0, r3
 8001718:	f001 fd66 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 800171c:	4b7a      	ldr	r3, [pc, #488]	; (8001908 <displayNum+0x610>)
 800171e:	2201      	movs	r2, #1
 8001720:	2101      	movs	r1, #1
 8001722:	0018      	movs	r0, r3
 8001724:	f001 fd60 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8001728:	4b77      	ldr	r3, [pc, #476]	; (8001908 <displayNum+0x610>)
 800172a:	2201      	movs	r2, #1
 800172c:	2102      	movs	r1, #2
 800172e:	0018      	movs	r0, r3
 8001730:	f001 fd5a 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 8001734:	e0db      	b.n	80018ee <displayNum+0x5f6>

		case 9:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8001736:	4b71      	ldr	r3, [pc, #452]	; (80018fc <displayNum+0x604>)
 8001738:	2201      	movs	r2, #1
 800173a:	2108      	movs	r1, #8
 800173c:	0018      	movs	r0, r3
 800173e:	f001 fd53 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001742:	4b6e      	ldr	r3, [pc, #440]	; (80018fc <displayNum+0x604>)
 8001744:	2201      	movs	r2, #1
 8001746:	2104      	movs	r1, #4
 8001748:	0018      	movs	r0, r3
 800174a:	f001 fd4d 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 800174e:	4b6c      	ldr	r3, [pc, #432]	; (8001900 <displayNum+0x608>)
 8001750:	2201      	movs	r2, #1
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	0018      	movs	r0, r3
 8001756:	f001 fd47 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800175a:	4b6b      	ldr	r3, [pc, #428]	; (8001908 <displayNum+0x610>)
 800175c:	2201      	movs	r2, #1
 800175e:	2102      	movs	r1, #2
 8001760:	0018      	movs	r0, r3
 8001762:	f001 fd41 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8001766:	4b68      	ldr	r3, [pc, #416]	; (8001908 <displayNum+0x610>)
 8001768:	2201      	movs	r2, #1
 800176a:	2101      	movs	r1, #1
 800176c:	0018      	movs	r0, r3
 800176e:	f001 fd3b 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 8001772:	e0bc      	b.n	80018ee <displayNum+0x5f6>
		case 10:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8001774:	4b61      	ldr	r3, [pc, #388]	; (80018fc <displayNum+0x604>)
 8001776:	2201      	movs	r2, #1
 8001778:	2108      	movs	r1, #8
 800177a:	0018      	movs	r0, r3
 800177c:	f001 fd34 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001780:	4b5e      	ldr	r3, [pc, #376]	; (80018fc <displayNum+0x604>)
 8001782:	2201      	movs	r2, #1
 8001784:	2104      	movs	r1, #4
 8001786:	0018      	movs	r0, r3
 8001788:	f001 fd2e 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 800178c:	4b5c      	ldr	r3, [pc, #368]	; (8001900 <displayNum+0x608>)
 800178e:	2201      	movs	r2, #1
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	0018      	movs	r0, r3
 8001794:	f001 fd28 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001798:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <displayNum+0x60c>)
 800179a:	2201      	movs	r2, #1
 800179c:	2110      	movs	r1, #16
 800179e:	0018      	movs	r0, r3
 80017a0:	f001 fd22 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80017a4:	4b58      	ldr	r3, [pc, #352]	; (8001908 <displayNum+0x610>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	2101      	movs	r1, #1
 80017aa:	0018      	movs	r0, r3
 80017ac:	f001 fd1c 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80017b0:	4b55      	ldr	r3, [pc, #340]	; (8001908 <displayNum+0x610>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	2102      	movs	r1, #2
 80017b6:	0018      	movs	r0, r3
 80017b8:	f001 fd16 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80017bc:	e097      	b.n	80018ee <displayNum+0x5f6>
		case 11:
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 80017be:	4b50      	ldr	r3, [pc, #320]	; (8001900 <displayNum+0x608>)
 80017c0:	2201      	movs	r2, #1
 80017c2:	2180      	movs	r1, #128	; 0x80
 80017c4:	0018      	movs	r0, r3
 80017c6:	f001 fd0f 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 80017ca:	2380      	movs	r3, #128	; 0x80
 80017cc:	0219      	lsls	r1, r3, #8
 80017ce:	23a0      	movs	r3, #160	; 0xa0
 80017d0:	05db      	lsls	r3, r3, #23
 80017d2:	2201      	movs	r2, #1
 80017d4:	0018      	movs	r0, r3
 80017d6:	f001 fd07 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 80017da:	4b4a      	ldr	r3, [pc, #296]	; (8001904 <displayNum+0x60c>)
 80017dc:	2201      	movs	r2, #1
 80017de:	2110      	movs	r1, #16
 80017e0:	0018      	movs	r0, r3
 80017e2:	f001 fd01 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80017e6:	4b48      	ldr	r3, [pc, #288]	; (8001908 <displayNum+0x610>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	2101      	movs	r1, #1
 80017ec:	0018      	movs	r0, r3
 80017ee:	f001 fcfb 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80017f2:	4b45      	ldr	r3, [pc, #276]	; (8001908 <displayNum+0x610>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	2102      	movs	r1, #2
 80017f8:	0018      	movs	r0, r3
 80017fa:	f001 fcf5 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80017fe:	e076      	b.n	80018ee <displayNum+0x5f6>
		case 12:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8001800:	4b3e      	ldr	r3, [pc, #248]	; (80018fc <displayNum+0x604>)
 8001802:	2201      	movs	r2, #1
 8001804:	2108      	movs	r1, #8
 8001806:	0018      	movs	r0, r3
 8001808:	f001 fcee 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	0219      	lsls	r1, r3, #8
 8001810:	23a0      	movs	r3, #160	; 0xa0
 8001812:	05db      	lsls	r3, r3, #23
 8001814:	2201      	movs	r2, #1
 8001816:	0018      	movs	r0, r3
 8001818:	f001 fce6 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800181c:	4b39      	ldr	r3, [pc, #228]	; (8001904 <displayNum+0x60c>)
 800181e:	2201      	movs	r2, #1
 8001820:	2110      	movs	r1, #16
 8001822:	0018      	movs	r0, r3
 8001824:	f001 fce0 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 8001828:	4b37      	ldr	r3, [pc, #220]	; (8001908 <displayNum+0x610>)
 800182a:	2201      	movs	r2, #1
 800182c:	2101      	movs	r1, #1
 800182e:	0018      	movs	r0, r3
 8001830:	f001 fcda 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 8001834:	e05b      	b.n	80018ee <displayNum+0x5f6>
		case 13:
			HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8001836:	4b31      	ldr	r3, [pc, #196]	; (80018fc <displayNum+0x604>)
 8001838:	2201      	movs	r2, #1
 800183a:	2104      	movs	r1, #4
 800183c:	0018      	movs	r0, r3
 800183e:	f001 fcd3 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_C_GPIO_Port, LED_C_Pin, GPIO_PIN_SET);
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <displayNum+0x608>)
 8001844:	2201      	movs	r2, #1
 8001846:	2180      	movs	r1, #128	; 0x80
 8001848:	0018      	movs	r0, r3
 800184a:	f001 fccd 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	0219      	lsls	r1, r3, #8
 8001852:	23a0      	movs	r3, #160	; 0xa0
 8001854:	05db      	lsls	r3, r3, #23
 8001856:	2201      	movs	r2, #1
 8001858:	0018      	movs	r0, r3
 800185a:	f001 fcc5 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <displayNum+0x60c>)
 8001860:	2201      	movs	r2, #1
 8001862:	2110      	movs	r1, #16
 8001864:	0018      	movs	r0, r3
 8001866:	f001 fcbf 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800186a:	4b27      	ldr	r3, [pc, #156]	; (8001908 <displayNum+0x610>)
 800186c:	2201      	movs	r2, #1
 800186e:	2102      	movs	r1, #2
 8001870:	0018      	movs	r0, r3
 8001872:	f001 fcb9 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 8001876:	e03a      	b.n	80018ee <displayNum+0x5f6>
		case 14:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 8001878:	4b20      	ldr	r3, [pc, #128]	; (80018fc <displayNum+0x604>)
 800187a:	2201      	movs	r2, #1
 800187c:	2108      	movs	r1, #8
 800187e:	0018      	movs	r0, r3
 8001880:	f001 fcb2 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_D_GPIO_Port, LED_D_Pin, GPIO_PIN_SET);
 8001884:	2380      	movs	r3, #128	; 0x80
 8001886:	0219      	lsls	r1, r3, #8
 8001888:	23a0      	movs	r3, #160	; 0xa0
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	2201      	movs	r2, #1
 800188e:	0018      	movs	r0, r3
 8001890:	f001 fcaa 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <displayNum+0x60c>)
 8001896:	2201      	movs	r2, #1
 8001898:	2110      	movs	r1, #16
 800189a:	0018      	movs	r0, r3
 800189c:	f001 fca4 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <displayNum+0x610>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	2101      	movs	r1, #1
 80018a6:	0018      	movs	r0, r3
 80018a8:	f001 fc9e 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <displayNum+0x610>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	2102      	movs	r1, #2
 80018b2:	0018      	movs	r0, r3
 80018b4:	f001 fc98 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80018b8:	e019      	b.n	80018ee <displayNum+0x5f6>
		case 15:
			HAL_GPIO_WritePin(LED_A_GPIO_Port, LED_A_Pin, GPIO_PIN_SET);
 80018ba:	4b10      	ldr	r3, [pc, #64]	; (80018fc <displayNum+0x604>)
 80018bc:	2201      	movs	r2, #1
 80018be:	2108      	movs	r1, #8
 80018c0:	0018      	movs	r0, r3
 80018c2:	f001 fc91 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_E_GPIO_Port, LED_E_Pin, GPIO_PIN_SET);
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <displayNum+0x60c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	2110      	movs	r1, #16
 80018cc:	0018      	movs	r0, r3
 80018ce:	f001 fc8b 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_F_GPIO_Port, LED_F_Pin, GPIO_PIN_SET);
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <displayNum+0x610>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	2101      	movs	r1, #1
 80018d8:	0018      	movs	r0, r3
 80018da:	f001 fc85 	bl	80031e8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80018de:	4b0a      	ldr	r3, [pc, #40]	; (8001908 <displayNum+0x610>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	2102      	movs	r1, #2
 80018e4:	0018      	movs	r0, r3
 80018e6:	f001 fc7f 	bl	80031e8 <HAL_GPIO_WritePin>
			break;
 80018ea:	e000      	b.n	80018ee <displayNum+0x5f6>
		default:
			break;
 80018ec:	46c0      	nop			; (mov r8, r8)
		}
		HAL_Delay(3);
 80018ee:	2003      	movs	r0, #3
 80018f0:	f000 fbd8 	bl	80020a4 <HAL_Delay>
	}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b002      	add	sp, #8
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	50000800 	.word	0x50000800
 8001900:	50000400 	.word	0x50000400
 8001904:	50000c00 	.word	0x50000c00
 8001908:	50001400 	.word	0x50001400

0800190c <separarNum>:

	void separarNum(uint16_t num){
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	0002      	movs	r2, r0
 8001914:	1dbb      	adds	r3, r7, #6
 8001916:	801a      	strh	r2, [r3, #0]
		unit = num % 10;
 8001918:	1dbb      	adds	r3, r7, #6
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	210a      	movs	r1, #10
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe fc76 	bl	8000210 <__aeabi_uidivmod>
 8001924:	000b      	movs	r3, r1
 8001926:	b29b      	uxth	r3, r3
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <separarNum+0xb4>)
 800192c:	701a      	strb	r2, [r3, #0]
		num = num / 10;
 800192e:	1dbc      	adds	r4, r7, #6
 8001930:	1dbb      	adds	r3, r7, #6
 8001932:	881b      	ldrh	r3, [r3, #0]
 8001934:	210a      	movs	r1, #10
 8001936:	0018      	movs	r0, r3
 8001938:	f7fe fbe4 	bl	8000104 <__udivsi3>
 800193c:	0003      	movs	r3, r0
 800193e:	8023      	strh	r3, [r4, #0]

		dec = num % 10;
 8001940:	1dbb      	adds	r3, r7, #6
 8001942:	881b      	ldrh	r3, [r3, #0]
 8001944:	210a      	movs	r1, #10
 8001946:	0018      	movs	r0, r3
 8001948:	f7fe fc62 	bl	8000210 <__aeabi_uidivmod>
 800194c:	000b      	movs	r3, r1
 800194e:	b29b      	uxth	r3, r3
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <separarNum+0xb8>)
 8001954:	701a      	strb	r2, [r3, #0]
		num = num / 10;
 8001956:	1dbc      	adds	r4, r7, #6
 8001958:	1dbb      	adds	r3, r7, #6
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	210a      	movs	r1, #10
 800195e:	0018      	movs	r0, r3
 8001960:	f7fe fbd0 	bl	8000104 <__udivsi3>
 8001964:	0003      	movs	r3, r0
 8001966:	8023      	strh	r3, [r4, #0]

		cent = num % 10;
 8001968:	1dbb      	adds	r3, r7, #6
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	210a      	movs	r1, #10
 800196e:	0018      	movs	r0, r3
 8001970:	f7fe fc4e 	bl	8000210 <__aeabi_uidivmod>
 8001974:	000b      	movs	r3, r1
 8001976:	b29b      	uxth	r3, r3
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b13      	ldr	r3, [pc, #76]	; (80019c8 <separarNum+0xbc>)
 800197c:	701a      	strb	r2, [r3, #0]
		num = num / 10;
 800197e:	1dbc      	adds	r4, r7, #6
 8001980:	1dbb      	adds	r3, r7, #6
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	210a      	movs	r1, #10
 8001986:	0018      	movs	r0, r3
 8001988:	f7fe fbbc 	bl	8000104 <__udivsi3>
 800198c:	0003      	movs	r3, r0
 800198e:	8023      	strh	r3, [r4, #0]

		mil = num % 10;
 8001990:	1dbb      	adds	r3, r7, #6
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	210a      	movs	r1, #10
 8001996:	0018      	movs	r0, r3
 8001998:	f7fe fc3a 	bl	8000210 <__aeabi_uidivmod>
 800199c:	000b      	movs	r3, r1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <separarNum+0xc0>)
 80019a4:	701a      	strb	r2, [r3, #0]
		num = num / 10;
 80019a6:	1dbc      	adds	r4, r7, #6
 80019a8:	1dbb      	adds	r3, r7, #6
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	210a      	movs	r1, #10
 80019ae:	0018      	movs	r0, r3
 80019b0:	f7fe fba8 	bl	8000104 <__udivsi3>
 80019b4:	0003      	movs	r3, r0
 80019b6:	8023      	strh	r3, [r4, #0]
	}
 80019b8:	46c0      	nop			; (mov r8, r8)
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b003      	add	sp, #12
 80019be:	bd90      	pop	{r4, r7, pc}
 80019c0:	20000000 	.word	0x20000000
 80019c4:	20000001 	.word	0x20000001
 80019c8:	20000002 	.word	0x20000002
 80019cc:	20000003 	.word	0x20000003

080019d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019d6:	f000 fadf 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019da:	f000 f871 	bl	8001ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019de:	f000 f937 	bl	8001c50 <MX_GPIO_Init>
  MX_ADC1_Init();
 80019e2:	f000 f8cb 	bl	8001b7c <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  pot = 0;
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <main+0xd0>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
	  for(int x = 0; x < 237; x++){
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	e017      	b.n	8001a22 <main+0x52>
		  HAL_ADC_Start(&hadc1);
 80019f2:	4b2c      	ldr	r3, [pc, #176]	; (8001aa4 <main+0xd4>)
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 fe8b 	bl	8002710 <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1000);
 80019fa:	23fa      	movs	r3, #250	; 0xfa
 80019fc:	009a      	lsls	r2, r3, #2
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <main+0xd4>)
 8001a00:	0011      	movs	r1, r2
 8001a02:	0018      	movs	r0, r3
 8001a04:	f000 fed2 	bl	80027ac <HAL_ADC_PollForConversion>
		  pot += HAL_ADC_GetValue(&hadc1);
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <main+0xd4>)
 8001a0a:	0018      	movs	r0, r3
 8001a0c:	f000 ff62 	bl	80028d4 <HAL_ADC_GetValue>
 8001a10:	0002      	movs	r2, r0
 8001a12:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <main+0xd0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	18d2      	adds	r2, r2, r3
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <main+0xd0>)
 8001a1a:	601a      	str	r2, [r3, #0]
	  for(int x = 0; x < 237; x++){
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3301      	adds	r3, #1
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2bec      	cmp	r3, #236	; 0xec
 8001a26:	dde4      	ble.n	80019f2 <main+0x22>
	  }
	  pot /= 237;
 8001a28:	4b1d      	ldr	r3, [pc, #116]	; (8001aa0 <main+0xd0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	21ed      	movs	r1, #237	; 0xed
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f7fe fb68 	bl	8000104 <__udivsi3>
 8001a34:	0003      	movs	r3, r0
 8001a36:	001a      	movs	r2, r3
 8001a38:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <main+0xd0>)
 8001a3a:	601a      	str	r2, [r3, #0]

	  separarNum((pot/4.095));
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <main+0xd0>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff fab9 	bl	8000fb8 <__aeabi_ui2d>
 8001a46:	4a18      	ldr	r2, [pc, #96]	; (8001aa8 <main+0xd8>)
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <main+0xdc>)
 8001a4a:	f7fe fc05 	bl	8000258 <__aeabi_ddiv>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	000b      	movs	r3, r1
 8001a52:	0010      	movs	r0, r2
 8001a54:	0019      	movs	r1, r3
 8001a56:	f7fe fbe1 	bl	800021c <__aeabi_d2uiz>
 8001a5a:	0003      	movs	r3, r0
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff ff54 	bl	800190c <separarNum>

	  displayNum(unit,4);
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <main+0xe0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	2104      	movs	r1, #4
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f7ff fc43 	bl	80012f8 <displayNum>
	  displayNum(dec,3);
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <main+0xe4>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2103      	movs	r1, #3
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7ff fc3c 	bl	80012f8 <displayNum>
	  displayNum(cent,2);
 8001a80:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <main+0xe8>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	2102      	movs	r1, #2
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7ff fc35 	bl	80012f8 <displayNum>
	  displayNum(mil,1);
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <main+0xec>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2101      	movs	r1, #1
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff fc2e 	bl	80012f8 <displayNum>
	  pot = 0;
 8001a9c:	e7a3      	b.n	80019e6 <main+0x16>
 8001a9e:	46c0      	nop			; (mov r8, r8)
 8001aa0:	2000002c 	.word	0x2000002c
 8001aa4:	20000030 	.word	0x20000030
 8001aa8:	ae147ae1 	.word	0xae147ae1
 8001aac:	40106147 	.word	0x40106147
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000001 	.word	0x20000001
 8001ab8:	20000002 	.word	0x20000002
 8001abc:	20000003 	.word	0x20000003

08001ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b095      	sub	sp, #84	; 0x54
 8001ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac6:	2414      	movs	r4, #20
 8001ac8:	193b      	adds	r3, r7, r4
 8001aca:	0018      	movs	r0, r3
 8001acc:	233c      	movs	r3, #60	; 0x3c
 8001ace:	001a      	movs	r2, r3
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	f002 fb37 	bl	8004144 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	0018      	movs	r0, r3
 8001ada:	2310      	movs	r3, #16
 8001adc:	001a      	movs	r2, r3
 8001ade:	2100      	movs	r1, #0
 8001ae0:	f002 fb30 	bl	8004144 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f001 fb9b 	bl	8003224 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001aee:	193b      	adds	r3, r7, r4
 8001af0:	2202      	movs	r2, #2
 8001af2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001af4:	193b      	adds	r3, r7, r4
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	0052      	lsls	r2, r2, #1
 8001afa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001afc:	0021      	movs	r1, r4
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b04:	187b      	adds	r3, r7, r1
 8001b06:	2240      	movs	r2, #64	; 0x40
 8001b08:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b0a:	187b      	adds	r3, r7, r1
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	2202      	movs	r2, #2
 8001b14:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2200      	movs	r2, #0
 8001b1a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2208      	movs	r2, #8
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	0292      	lsls	r2, r2, #10
 8001b28:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	0492      	lsls	r2, r2, #18
 8001b30:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0592      	lsls	r2, r2, #22
 8001b38:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	f001 fbb1 	bl	80032a4 <HAL_RCC_OscConfig>
 8001b42:	1e03      	subs	r3, r0, #0
 8001b44:	d001      	beq.n	8001b4a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001b46:	f000 f957 	bl	8001df8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2207      	movs	r2, #7
 8001b4e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	2202      	movs	r2, #2
 8001b54:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	2102      	movs	r1, #2
 8001b66:	0018      	movs	r0, r3
 8001b68:	f001 ff02 	bl	8003970 <HAL_RCC_ClockConfig>
 8001b6c:	1e03      	subs	r3, r0, #0
 8001b6e:	d001      	beq.n	8001b74 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001b70:	f000 f942 	bl	8001df8 <Error_Handler>
  }
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b015      	add	sp, #84	; 0x54
 8001b7a:	bd90      	pop	{r4, r7, pc}

08001b7c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b82:	1d3b      	adds	r3, r7, #4
 8001b84:	0018      	movs	r0, r3
 8001b86:	230c      	movs	r3, #12
 8001b88:	001a      	movs	r2, r3
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	f002 fada 	bl	8004144 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b90:	4b2d      	ldr	r3, [pc, #180]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001b92:	4a2e      	ldr	r2, [pc, #184]	; (8001c4c <MX_ADC1_Init+0xd0>)
 8001b94:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001b96:	4b2c      	ldr	r3, [pc, #176]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001b98:	2280      	movs	r2, #128	; 0x80
 8001b9a:	05d2      	lsls	r2, r2, #23
 8001b9c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ba4:	4b28      	ldr	r3, [pc, #160]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bc2:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8001bc8:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001be4:	222c      	movs	r2, #44	; 0x2c
 8001be6:	2100      	movs	r1, #0
 8001be8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bf2:	2205      	movs	r2, #5
 8001bf4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001bfe:	223c      	movs	r2, #60	; 0x3c
 8001c00:	2100      	movs	r1, #0
 8001c02:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001c04:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c0a:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f000 fba1 	bl	8002354 <HAL_ADC_Init>
 8001c12:	1e03      	subs	r3, r0, #0
 8001c14:	d001      	beq.n	8001c1a <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001c16:	f000 f8ef 	bl	8001df8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c20:	1d3b      	adds	r3, r7, #4
 8001c22:	2200      	movs	r2, #0
 8001c24:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c2c:	1d3a      	adds	r2, r7, #4
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <MX_ADC1_Init+0xcc>)
 8001c30:	0011      	movs	r1, r2
 8001c32:	0018      	movs	r0, r3
 8001c34:	f000 fe5a 	bl	80028ec <HAL_ADC_ConfigChannel>
 8001c38:	1e03      	subs	r3, r0, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8001c3c:	f000 f8dc 	bl	8001df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b004      	add	sp, #16
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000030 	.word	0x20000030
 8001c4c:	40012400 	.word	0x40012400

08001c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c50:	b590      	push	{r4, r7, lr}
 8001c52:	b08b      	sub	sp, #44	; 0x2c
 8001c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c56:	2414      	movs	r4, #20
 8001c58:	193b      	adds	r3, r7, r4
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	2314      	movs	r3, #20
 8001c5e:	001a      	movs	r2, r3
 8001c60:	2100      	movs	r1, #0
 8001c62:	f002 fa6f 	bl	8004144 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c66:	4b5f      	ldr	r3, [pc, #380]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c6a:	4b5e      	ldr	r3, [pc, #376]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c6c:	2120      	movs	r1, #32
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	635a      	str	r2, [r3, #52]	; 0x34
 8001c72:	4b5c      	ldr	r3, [pc, #368]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c76:	2220      	movs	r2, #32
 8001c78:	4013      	ands	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7e:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c82:	4b58      	ldr	r3, [pc, #352]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c84:	2104      	movs	r1, #4
 8001c86:	430a      	orrs	r2, r1
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34
 8001c8a:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8e:	2204      	movs	r2, #4
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9a:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	4013      	ands	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cae:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cb2:	4b4c      	ldr	r3, [pc, #304]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001cb4:	2108      	movs	r1, #8
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	635a      	str	r2, [r3, #52]	; 0x34
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cca:	4b46      	ldr	r3, [pc, #280]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001ccc:	2102      	movs	r1, #2
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
 8001cd2:	4b44      	ldr	r3, [pc, #272]	; (8001de4 <MX_GPIO_Init+0x194>)
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED_F_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001cde:	4b42      	ldr	r3, [pc, #264]	; (8001de8 <MX_GPIO_Init+0x198>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	2103      	movs	r1, #3
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f001 fa7f 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D4_Pin|LED_B_Pin|LED_A_Pin|LED_DP_Pin, GPIO_PIN_RESET);
 8001cea:	4b40      	ldr	r3, [pc, #256]	; (8001dec <MX_GPIO_Init+0x19c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	212e      	movs	r1, #46	; 0x2e
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f001 fa79 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, R4_Pin|D3_Pin|D2_Pin|LED_D_Pin, GPIO_PIN_RESET);
 8001cf6:	239c      	movs	r3, #156	; 0x9c
 8001cf8:	0219      	lsls	r1, r3, #8
 8001cfa:	23a0      	movs	r3, #160	; 0xa0
 8001cfc:	05db      	lsls	r3, r3, #23
 8001cfe:	2200      	movs	r2, #0
 8001d00:	0018      	movs	r0, r3
 8001d02:	f001 fa71 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_E_Pin|D1_Pin, GPIO_PIN_RESET);
 8001d06:	4b3a      	ldr	r3, [pc, #232]	; (8001df0 <MX_GPIO_Init+0x1a0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2150      	movs	r1, #80	; 0x50
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f001 fa6b 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R3_Pin|R1_Pin|R2_Pin|LED_C_Pin, GPIO_PIN_RESET);
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <MX_GPIO_Init+0x1a4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	21b8      	movs	r1, #184	; 0xb8
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f001 fa65 	bl	80031e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_F_Pin LED_G_Pin */
  GPIO_InitStruct.Pin = LED_F_Pin|LED_G_Pin;
 8001d1e:	193b      	adds	r3, r7, r4
 8001d20:	2203      	movs	r2, #3
 8001d22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d24:	193b      	adds	r3, r7, r4
 8001d26:	2201      	movs	r2, #1
 8001d28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	193b      	adds	r3, r7, r4
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d36:	193b      	adds	r3, r7, r4
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <MX_GPIO_Init+0x198>)
 8001d3a:	0019      	movs	r1, r3
 8001d3c:	0010      	movs	r0, r2
 8001d3e:	f001 f8e7 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin LED_B_Pin LED_A_Pin LED_DP_Pin */
  GPIO_InitStruct.Pin = D4_Pin|LED_B_Pin|LED_A_Pin|LED_DP_Pin;
 8001d42:	193b      	adds	r3, r7, r4
 8001d44:	222e      	movs	r2, #46	; 0x2e
 8001d46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	193b      	adds	r3, r7, r4
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	193b      	adds	r3, r7, r4
 8001d50:	2200      	movs	r2, #0
 8001d52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	193b      	adds	r3, r7, r4
 8001d56:	2200      	movs	r2, #0
 8001d58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	193b      	adds	r3, r7, r4
 8001d5c:	4a23      	ldr	r2, [pc, #140]	; (8001dec <MX_GPIO_Init+0x19c>)
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f001 f8d5 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : R4_Pin D3_Pin D2_Pin LED_D_Pin */
  GPIO_InitStruct.Pin = R4_Pin|D3_Pin|D2_Pin|LED_D_Pin;
 8001d66:	0021      	movs	r1, r4
 8001d68:	187b      	adds	r3, r7, r1
 8001d6a:	229c      	movs	r2, #156	; 0x9c
 8001d6c:	0212      	lsls	r2, r2, #8
 8001d6e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	000c      	movs	r4, r1
 8001d72:	193b      	adds	r3, r7, r4
 8001d74:	2201      	movs	r2, #1
 8001d76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	193b      	adds	r3, r7, r4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	193b      	adds	r3, r7, r4
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d84:	193a      	adds	r2, r7, r4
 8001d86:	23a0      	movs	r3, #160	; 0xa0
 8001d88:	05db      	lsls	r3, r3, #23
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f001 f8bf 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_E_Pin D1_Pin */
  GPIO_InitStruct.Pin = LED_E_Pin|D1_Pin;
 8001d92:	193b      	adds	r3, r7, r4
 8001d94:	2250      	movs	r2, #80	; 0x50
 8001d96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	193b      	adds	r3, r7, r4
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	193b      	adds	r3, r7, r4
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	193b      	adds	r3, r7, r4
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001daa:	193b      	adds	r3, r7, r4
 8001dac:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <MX_GPIO_Init+0x1a0>)
 8001dae:	0019      	movs	r1, r3
 8001db0:	0010      	movs	r0, r2
 8001db2:	f001 f8ad 	bl	8002f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R1_Pin R2_Pin LED_C_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R1_Pin|R2_Pin|LED_C_Pin;
 8001db6:	0021      	movs	r1, r4
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	22b8      	movs	r2, #184	; 0xb8
 8001dbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dca:	187b      	adds	r3, r7, r1
 8001dcc:	2200      	movs	r2, #0
 8001dce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	187b      	adds	r3, r7, r1
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <MX_GPIO_Init+0x1a4>)
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	f001 f89a 	bl	8002f10 <HAL_GPIO_Init>

}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b00b      	add	sp, #44	; 0x2c
 8001de2:	bd90      	pop	{r4, r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	50001400 	.word	0x50001400
 8001dec:	50000800 	.word	0x50000800
 8001df0:	50000c00 	.word	0x50000c00
 8001df4:	50000400 	.word	0x50000400

08001df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dfc:	b672      	cpsid	i
}
 8001dfe:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <Error_Handler+0x8>
	...

08001e04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e0a:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e10:	2101      	movs	r1, #1
 8001e12:	430a      	orrs	r2, r1
 8001e14:	641a      	str	r2, [r3, #64]	; 0x40
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e26:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	0549      	lsls	r1, r1, #21
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <HAL_MspInit+0x4c>)
 8001e32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	055b      	lsls	r3, r3, #21
 8001e38:	4013      	ands	r3, r2
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001e3e:	23c0      	movs	r3, #192	; 0xc0
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 f952 	bl	80020ec <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e48:	46c0      	nop			; (mov r8, r8)
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	b002      	add	sp, #8
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b09d      	sub	sp, #116	; 0x74
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	235c      	movs	r3, #92	; 0x5c
 8001e5e:	18fb      	adds	r3, r7, r3
 8001e60:	0018      	movs	r0, r3
 8001e62:	2314      	movs	r3, #20
 8001e64:	001a      	movs	r2, r3
 8001e66:	2100      	movs	r1, #0
 8001e68:	f002 f96c 	bl	8004144 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e6c:	2410      	movs	r4, #16
 8001e6e:	193b      	adds	r3, r7, r4
 8001e70:	0018      	movs	r0, r3
 8001e72:	234c      	movs	r3, #76	; 0x4c
 8001e74:	001a      	movs	r2, r3
 8001e76:	2100      	movs	r1, #0
 8001e78:	f002 f964 	bl	8004144 <memset>
  if(hadc->Instance==ADC1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_ADC_MspInit+0xb0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d139      	bne.n	8001efa <HAL_ADC_MspInit+0xa6>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001e86:	193b      	adds	r3, r7, r4
 8001e88:	2280      	movs	r2, #128	; 0x80
 8001e8a:	01d2      	lsls	r2, r2, #7
 8001e8c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8001e8e:	193b      	adds	r3, r7, r4
 8001e90:	2200      	movs	r2, #0
 8001e92:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e94:	193b      	adds	r3, r7, r4
 8001e96:	0018      	movs	r0, r3
 8001e98:	f001 fef4 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 8001e9c:	1e03      	subs	r3, r0, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001ea0:	f7ff ffaa 	bl	8001df8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001ea4:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <HAL_ADC_MspInit+0xb4>)
 8001ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ea8:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_ADC_MspInit+0xb4>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0349      	lsls	r1, r1, #13
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_ADC_MspInit+0xb4>)
 8001eb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	035b      	lsls	r3, r3, #13
 8001eba:	4013      	ands	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_ADC_MspInit+0xb4>)
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_ADC_MspInit+0xb4>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
 8001ecc:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <HAL_ADC_MspInit+0xb4>)
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed8:	215c      	movs	r1, #92	; 0x5c
 8001eda:	187b      	adds	r3, r7, r1
 8001edc:	2201      	movs	r2, #1
 8001ede:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	187a      	adds	r2, r7, r1
 8001eee:	23a0      	movs	r3, #160	; 0xa0
 8001ef0:	05db      	lsls	r3, r3, #23
 8001ef2:	0011      	movs	r1, r2
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f001 f80b 	bl	8002f10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	46bd      	mov	sp, r7
 8001efe:	b01d      	add	sp, #116	; 0x74
 8001f00:	bd90      	pop	{r4, r7, pc}
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	40012400 	.word	0x40012400
 8001f08:	40021000 	.word	0x40021000

08001f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <NMI_Handler+0x4>

08001f12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <HardFault_Handler+0x4>

08001f18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f1c:	46c0      	nop			; (mov r8, r8)
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f30:	f000 f89c 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f34:	46c0      	nop			; (mov r8, r8)
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f46:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f48:	f7ff fff7 	bl	8001f3a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f4c:	480c      	ldr	r0, [pc, #48]	; (8001f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f4e:	490d      	ldr	r1, [pc, #52]	; (8001f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <LoopForever+0xe>)
  movs r3, #0
 8001f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f54:	e002      	b.n	8001f5c <LoopCopyDataInit>

08001f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5a:	3304      	adds	r3, #4

08001f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f60:	d3f9      	bcc.n	8001f56 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f62:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f64:	4c0a      	ldr	r4, [pc, #40]	; (8001f90 <LoopForever+0x16>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f68:	e001      	b.n	8001f6e <LoopFillZerobss>

08001f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f6c:	3204      	adds	r2, #4

08001f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f70:	d3fb      	bcc.n	8001f6a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f72:	f002 f8c3 	bl	80040fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001f76:	f7ff fd2b 	bl	80019d0 <main>

08001f7a <LoopForever>:

LoopForever:
  b LoopForever
 8001f7a:	e7fe      	b.n	8001f7a <LoopForever>
  ldr   r0, =_estack
 8001f7c:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001f88:	08004234 	.word	0x08004234
  ldr r2, =_sbss
 8001f8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f90:	20000098 	.word	0x20000098

08001f94 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_COMP_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f9e:	1dfb      	adds	r3, r7, #7
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x3c>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b0a      	ldr	r3, [pc, #40]	; (8001fd4 <HAL_Init+0x3c>)
 8001faa:	2180      	movs	r1, #128	; 0x80
 8001fac:	0049      	lsls	r1, r1, #1
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb2:	2003      	movs	r0, #3
 8001fb4:	f000 f810 	bl	8001fd8 <HAL_InitTick>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d003      	beq.n	8001fc4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001fbc:	1dfb      	adds	r3, r7, #7
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
 8001fc2:	e001      	b.n	8001fc8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001fc4:	f7ff ff1e 	bl	8001e04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fc8:	1dfb      	adds	r3, r7, #7
 8001fca:	781b      	ldrb	r3, [r3, #0]
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b002      	add	sp, #8
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40022000 	.word	0x40022000

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001fe8:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <HAL_InitTick+0x88>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d02b      	beq.n	8002048 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001ff0:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <HAL_InitTick+0x8c>)
 8001ff2:	681c      	ldr	r4, [r3, #0]
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_InitTick+0x88>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	23fa      	movs	r3, #250	; 0xfa
 8001ffc:	0098      	lsls	r0, r3, #2
 8001ffe:	f7fe f881 	bl	8000104 <__udivsi3>
 8002002:	0003      	movs	r3, r0
 8002004:	0019      	movs	r1, r3
 8002006:	0020      	movs	r0, r4
 8002008:	f7fe f87c 	bl	8000104 <__udivsi3>
 800200c:	0003      	movs	r3, r0
 800200e:	0018      	movs	r0, r3
 8002010:	f000 ff71 	bl	8002ef6 <HAL_SYSTICK_Config>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d112      	bne.n	800203e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2b03      	cmp	r3, #3
 800201c:	d80a      	bhi.n	8002034 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800201e:	6879      	ldr	r1, [r7, #4]
 8002020:	2301      	movs	r3, #1
 8002022:	425b      	negs	r3, r3
 8002024:	2200      	movs	r2, #0
 8002026:	0018      	movs	r0, r3
 8002028:	f000 ff50 	bl	8002ecc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <HAL_InitTick+0x90>)
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	601a      	str	r2, [r3, #0]
 8002032:	e00d      	b.n	8002050 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002034:	230f      	movs	r3, #15
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e008      	b.n	8002050 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800203e:	230f      	movs	r3, #15
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	2201      	movs	r2, #1
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e003      	b.n	8002050 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002048:	230f      	movs	r3, #15
 800204a:	18fb      	adds	r3, r7, r3
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002050:	230f      	movs	r3, #15
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	781b      	ldrb	r3, [r3, #0]
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b005      	add	sp, #20
 800205c:	bd90      	pop	{r4, r7, pc}
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	2000000c 	.word	0x2000000c
 8002064:	20000004 	.word	0x20000004
 8002068:	20000008 	.word	0x20000008

0800206c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002070:	4b05      	ldr	r3, [pc, #20]	; (8002088 <HAL_IncTick+0x1c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	001a      	movs	r2, r3
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x20>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	18d2      	adds	r2, r2, r3
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_IncTick+0x20>)
 800207e:	601a      	str	r2, [r3, #0]
}
 8002080:	46c0      	nop			; (mov r8, r8)
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	2000000c 	.word	0x2000000c
 800208c:	20000094 	.word	0x20000094

08002090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  return uwTick;
 8002094:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <HAL_GetTick+0x10>)
 8002096:	681b      	ldr	r3, [r3, #0]
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	20000094 	.word	0x20000094

080020a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff fff0 	bl	8002090 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3301      	adds	r3, #1
 80020bc:	d005      	beq.n	80020ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020be:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_Delay+0x44>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	001a      	movs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	189b      	adds	r3, r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	f7ff ffe0 	bl	8002090 <HAL_GetTick>
 80020d0:	0002      	movs	r2, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d8f7      	bhi.n	80020cc <HAL_Delay+0x28>
  {
  }
}
 80020dc:	46c0      	nop			; (mov r8, r8)
 80020de:	46c0      	nop			; (mov r8, r8)
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b004      	add	sp, #16
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	2000000c 	.word	0x2000000c

080020ec <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80020f4:	4b06      	ldr	r3, [pc, #24]	; (8002110 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80020fa:	4013      	ands	r3, r2
 80020fc:	0019      	movs	r1, r3
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b002      	add	sp, #8
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	40010000 	.word	0x40010000
 8002114:	fffff9ff 	.word	0xfffff9ff

08002118 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a05      	ldr	r2, [pc, #20]	; (800213c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002128:	401a      	ands	r2, r3
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	431a      	orrs	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	601a      	str	r2, [r3, #0]
}
 8002132:	46c0      	nop			; (mov r8, r8)
 8002134:	46bd      	mov	sp, r7
 8002136:	b002      	add	sp, #8
 8002138:	bd80      	pop	{r7, pc}
 800213a:	46c0      	nop			; (mov r8, r8)
 800213c:	fe3fffff 	.word	0xfe3fffff

08002140 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	23e0      	movs	r3, #224	; 0xe0
 800214e:	045b      	lsls	r3, r3, #17
 8002150:	4013      	ands	r3, r2
}
 8002152:	0018      	movs	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	b002      	add	sp, #8
 8002158:	bd80      	pop	{r7, pc}

0800215a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	695b      	ldr	r3, [r3, #20]
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	2104      	movs	r1, #4
 800216e:	400a      	ands	r2, r1
 8002170:	2107      	movs	r1, #7
 8002172:	4091      	lsls	r1, r2
 8002174:	000a      	movs	r2, r1
 8002176:	43d2      	mvns	r2, r2
 8002178:	401a      	ands	r2, r3
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2104      	movs	r1, #4
 800217e:	400b      	ands	r3, r1
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4099      	lsls	r1, r3
 8002184:	000b      	movs	r3, r1
 8002186:	431a      	orrs	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b004      	add	sp, #16
 8002192:	bd80      	pop	{r7, pc}

08002194 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	23c0      	movs	r3, #192	; 0xc0
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	d101      	bne.n	80021ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	0018      	movs	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	b002      	add	sp, #8
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c6:	68ba      	ldr	r2, [r7, #8]
 80021c8:	211f      	movs	r1, #31
 80021ca:	400a      	ands	r2, r1
 80021cc:	210f      	movs	r1, #15
 80021ce:	4091      	lsls	r1, r2
 80021d0:	000a      	movs	r2, r1
 80021d2:	43d2      	mvns	r2, r2
 80021d4:	401a      	ands	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	0e9b      	lsrs	r3, r3, #26
 80021da:	210f      	movs	r1, #15
 80021dc:	4019      	ands	r1, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	201f      	movs	r0, #31
 80021e2:	4003      	ands	r3, r0
 80021e4:	4099      	lsls	r1, r3
 80021e6:	000b      	movs	r3, r1
 80021e8:	431a      	orrs	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	b004      	add	sp, #16
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
 80021fe:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	035b      	lsls	r3, r3, #13
 8002208:	0b5b      	lsrs	r3, r3, #13
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002210:	46c0      	nop			; (mov r8, r8)
 8002212:	46bd      	mov	sp, r7
 8002214:	b002      	add	sp, #8
 8002216:	bd80      	pop	{r7, pc}

08002218 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	0352      	lsls	r2, r2, #13
 800222a:	0b52      	lsrs	r2, r2, #13
 800222c:	43d2      	mvns	r2, r2
 800222e:	401a      	ands	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002234:	46c0      	nop			; (mov r8, r8)
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	0212      	lsls	r2, r2, #8
 8002250:	43d2      	mvns	r2, r2
 8002252:	401a      	ands	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	400b      	ands	r3, r1
 800225c:	4904      	ldr	r1, [pc, #16]	; (8002270 <LL_ADC_SetChannelSamplingTime+0x34>)
 800225e:	400b      	ands	r3, r1
 8002260:	431a      	orrs	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002266:	46c0      	nop			; (mov r8, r8)
 8002268:	46bd      	mov	sp, r7
 800226a:	b004      	add	sp, #16
 800226c:	bd80      	pop	{r7, pc}
 800226e:	46c0      	nop			; (mov r8, r8)
 8002270:	07ffff00 	.word	0x07ffff00

08002274 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	4a05      	ldr	r2, [pc, #20]	; (8002298 <LL_ADC_EnableInternalRegulator+0x24>)
 8002282:	4013      	ands	r3, r2
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	0552      	lsls	r2, r2, #21
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b002      	add	sp, #8
 8002294:	bd80      	pop	{r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	6fffffe8 	.word	0x6fffffe8

0800229c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	055b      	lsls	r3, r3, #21
 80022ac:	401a      	ands	r2, r3
 80022ae:	2380      	movs	r3, #128	; 0x80
 80022b0:	055b      	lsls	r3, r3, #21
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d101      	bne.n	80022ba <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	0018      	movs	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	b002      	add	sp, #8
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <LL_ADC_Enable+0x20>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	2201      	movs	r2, #1
 80022d6:	431a      	orrs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022dc:	46c0      	nop			; (mov r8, r8)
 80022de:	46bd      	mov	sp, r7
 80022e0:	b002      	add	sp, #8
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	7fffffe8 	.word	0x7fffffe8

080022e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2201      	movs	r2, #1
 80022f6:	4013      	ands	r3, r2
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <LL_ADC_IsEnabled+0x18>
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <LL_ADC_IsEnabled+0x1a>
 8002300:	2300      	movs	r3, #0
}
 8002302:	0018      	movs	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	b002      	add	sp, #8
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a04      	ldr	r2, [pc, #16]	; (800232c <LL_ADC_REG_StartConversion+0x20>)
 800231a:	4013      	ands	r3, r2
 800231c:	2204      	movs	r2, #4
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002324:	46c0      	nop			; (mov r8, r8)
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}
 800232c:	7fffffe8 	.word	0x7fffffe8

08002330 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2204      	movs	r2, #4
 800233e:	4013      	ands	r3, r2
 8002340:	2b04      	cmp	r3, #4
 8002342:	d101      	bne.n	8002348 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002348:	2300      	movs	r3, #0
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b002      	add	sp, #8
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800235c:	231f      	movs	r3, #31
 800235e:	18fb      	adds	r3, r7, r3
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002368:	2300      	movs	r3, #0
 800236a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e1b1      	b.n	80026de <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10a      	bne.n	8002398 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f7ff fd65 	bl	8001e54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2254      	movs	r2, #84	; 0x54
 8002394:	2100      	movs	r1, #0
 8002396:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff ff7d 	bl	800229c <LL_ADC_IsInternalRegulatorEnabled>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d115      	bne.n	80023d2 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f7ff ff62 	bl	8002274 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023b0:	4bcd      	ldr	r3, [pc, #820]	; (80026e8 <HAL_ADC_Init+0x394>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	49cd      	ldr	r1, [pc, #820]	; (80026ec <HAL_ADC_Init+0x398>)
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7fd fea4 	bl	8000104 <__udivsi3>
 80023bc:	0003      	movs	r3, r0
 80023be:	3301      	adds	r3, #1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023c4:	e002      	b.n	80023cc <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f9      	bne.n	80023c6 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff ff60 	bl	800229c <LL_ADC_IsInternalRegulatorEnabled>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d10f      	bne.n	8002400 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e4:	2210      	movs	r2, #16
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f0:	2201      	movs	r2, #1
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80023f8:	231f      	movs	r3, #31
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0018      	movs	r0, r3
 8002406:	f7ff ff93 	bl	8002330 <LL_ADC_REG_IsConversionOngoing>
 800240a:	0003      	movs	r3, r0
 800240c:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	2210      	movs	r2, #16
 8002414:	4013      	ands	r3, r2
 8002416:	d000      	beq.n	800241a <HAL_ADC_Init+0xc6>
 8002418:	e154      	b.n	80026c4 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d000      	beq.n	8002422 <HAL_ADC_Init+0xce>
 8002420:	e150      	b.n	80026c4 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002426:	4ab2      	ldr	r2, [pc, #712]	; (80026f0 <HAL_ADC_Init+0x39c>)
 8002428:	4013      	ands	r3, r2
 800242a:	2202      	movs	r2, #2
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0018      	movs	r0, r3
 8002438:	f7ff ff56 	bl	80022e8 <LL_ADC_IsEnabled>
 800243c:	1e03      	subs	r3, r0, #0
 800243e:	d156      	bne.n	80024ee <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2218      	movs	r2, #24
 8002448:	4393      	bics	r3, r2
 800244a:	0019      	movs	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	430a      	orrs	r2, r1
 8002456:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0f9b      	lsrs	r3, r3, #30
 800245e:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002464:	4313      	orrs	r3, r2
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	223c      	movs	r2, #60	; 0x3c
 8002470:	5c9b      	ldrb	r3, [r3, r2]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d111      	bne.n	800249a <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	0f9b      	lsrs	r3, r3, #30
 800247c:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002482:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002488:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800248e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4313      	orrs	r3, r2
 8002494:	2201      	movs	r2, #1
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	4a94      	ldr	r2, [pc, #592]	; (80026f4 <HAL_ADC_Init+0x3a0>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	0019      	movs	r1, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	23c0      	movs	r3, #192	; 0xc0
 80024b6:	061b      	lsls	r3, r3, #24
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d018      	beq.n	80024ee <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80024c0:	2380      	movs	r3, #128	; 0x80
 80024c2:	05db      	lsls	r3, r3, #23
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d012      	beq.n	80024ee <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	061b      	lsls	r3, r3, #24
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d00c      	beq.n	80024ee <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80024d4:	4b88      	ldr	r3, [pc, #544]	; (80026f8 <HAL_ADC_Init+0x3a4>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a88      	ldr	r2, [pc, #544]	; (80026fc <HAL_ADC_Init+0x3a8>)
 80024da:	4013      	ands	r3, r2
 80024dc:	0019      	movs	r1, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	23f0      	movs	r3, #240	; 0xf0
 80024e4:	039b      	lsls	r3, r3, #14
 80024e6:	401a      	ands	r2, r3
 80024e8:	4b83      	ldr	r3, [pc, #524]	; (80026f8 <HAL_ADC_Init+0x3a4>)
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7e1b      	ldrb	r3, [r3, #24]
 80024f2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7e5b      	ldrb	r3, [r3, #25]
 80024f8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80024fa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e9b      	ldrb	r3, [r3, #26]
 8002500:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002502:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <HAL_ADC_Init+0x1be>
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	015b      	lsls	r3, r3, #5
 8002510:	e000      	b.n	8002514 <HAL_ADC_Init+0x1c0>
 8002512:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002514:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800251a:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	2b00      	cmp	r3, #0
 8002522:	da04      	bge.n	800252e <HAL_ADC_Init+0x1da>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	085b      	lsrs	r3, r3, #1
 800252c:	e001      	b.n	8002532 <HAL_ADC_Init+0x1de>
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8002532:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	212c      	movs	r1, #44	; 0x2c
 8002538:	5c5b      	ldrb	r3, [r3, r1]
 800253a:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800253c:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2220      	movs	r2, #32
 8002548:	5c9b      	ldrb	r3, [r3, r2]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d115      	bne.n	800257a <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e9b      	ldrb	r3, [r3, #26]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d105      	bne.n	8002562 <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0252      	lsls	r2, r2, #9
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	e00b      	b.n	800257a <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002566:	2220      	movs	r2, #32
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2201      	movs	r2, #1
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002586:	23e0      	movs	r3, #224	; 0xe0
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002590:	4313      	orrs	r3, r2
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	4a58      	ldr	r2, [pc, #352]	; (8002700 <HAL_ADC_Init+0x3ac>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	4a53      	ldr	r2, [pc, #332]	; (8002704 <HAL_ADC_Init+0x3b0>)
 80025b6:	4013      	ands	r3, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025cc:	001a      	movs	r2, r3
 80025ce:	2100      	movs	r1, #0
 80025d0:	f7ff fdc3 	bl	800215a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6818      	ldr	r0, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	494a      	ldr	r1, [pc, #296]	; (8002708 <HAL_ADC_Init+0x3b4>)
 80025de:	001a      	movs	r2, r3
 80025e0:	f7ff fdbb 	bl	800215a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2110      	movs	r1, #16
 80025f8:	4249      	negs	r1, r1
 80025fa:	430a      	orrs	r2, r1
 80025fc:	629a      	str	r2, [r3, #40]	; 0x28
 80025fe:	e03a      	b.n	8002676 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	039b      	lsls	r3, r3, #14
 8002608:	429a      	cmp	r2, r3
 800260a:	d134      	bne.n	8002676 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800260c:	2300      	movs	r3, #0
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	e00c      	b.n	800262c <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	40da      	lsrs	r2, r3
 800261c:	0013      	movs	r3, r2
 800261e:	220f      	movs	r2, #15
 8002620:	4013      	ands	r3, r2
 8002622:	2b0f      	cmp	r3, #15
 8002624:	d006      	beq.n	8002634 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3301      	adds	r3, #1
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	2b07      	cmp	r3, #7
 8002630:	d9ef      	bls.n	8002612 <HAL_ADC_Init+0x2be>
 8002632:	e000      	b.n	8002636 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8002634:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d109      	bne.n	8002650 <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2110      	movs	r1, #16
 8002648:	4249      	negs	r1, r1
 800264a:	430a      	orrs	r2, r1
 800264c:	629a      	str	r2, [r3, #40]	; 0x28
 800264e:	e012      	b.n	8002676 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	3b01      	subs	r3, #1
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	221c      	movs	r2, #28
 8002660:	4013      	ands	r3, r2
 8002662:	2210      	movs	r2, #16
 8002664:	4252      	negs	r2, r2
 8002666:	409a      	lsls	r2, r3
 8002668:	0011      	movs	r1, r2
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_ADC_Init+0x3b8>)
 800267e:	4013      	ands	r3, r2
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	429a      	cmp	r2, r3
 8002684:	d10b      	bne.n	800269e <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2200      	movs	r2, #0
 800268a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002690:	2203      	movs	r2, #3
 8002692:	4393      	bics	r3, r2
 8002694:	2201      	movs	r2, #1
 8002696:	431a      	orrs	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800269c:	e01c      	b.n	80026d8 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a2:	2212      	movs	r2, #18
 80026a4:	4393      	bics	r3, r2
 80026a6:	2210      	movs	r2, #16
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2201      	movs	r2, #1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80026ba:	231f      	movs	r3, #31
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2201      	movs	r2, #1
 80026c0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80026c2:	e009      	b.n	80026d8 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c8:	2210      	movs	r2, #16
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2201      	movs	r2, #1
 80026d6:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80026d8:	231f      	movs	r3, #31
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b008      	add	sp, #32
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	20000004 	.word	0x20000004
 80026ec:	00030d40 	.word	0x00030d40
 80026f0:	fffffefd 	.word	0xfffffefd
 80026f4:	1ffffc02 	.word	0x1ffffc02
 80026f8:	40012708 	.word	0x40012708
 80026fc:	ffc3ffff 	.word	0xffc3ffff
 8002700:	fffe0219 	.word	0xfffe0219
 8002704:	dffffc02 	.word	0xdffffc02
 8002708:	07ffff04 	.word	0x07ffff04
 800270c:	833fffe7 	.word	0x833fffe7

08002710 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff fe07 	bl	8002330 <LL_ADC_REG_IsConversionOngoing>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d135      	bne.n	8002792 <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2254      	movs	r2, #84	; 0x54
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_ADC_Start+0x24>
 8002730:	2302      	movs	r3, #2
 8002732:	e035      	b.n	80027a0 <HAL_ADC_Start+0x90>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2254      	movs	r2, #84	; 0x54
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800273c:	250f      	movs	r5, #15
 800273e:	197c      	adds	r4, r7, r5
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	0018      	movs	r0, r3
 8002744:	f000 faaa 	bl	8002c9c <ADC_Enable>
 8002748:	0003      	movs	r3, r0
 800274a:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800274c:	197b      	adds	r3, r7, r5
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d119      	bne.n	8002788 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	4a13      	ldr	r2, [pc, #76]	; (80027a8 <HAL_ADC_Start+0x98>)
 800275a:	4013      	ands	r3, r2
 800275c:	2280      	movs	r2, #128	; 0x80
 800275e:	0052      	lsls	r2, r2, #1
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	221c      	movs	r2, #28
 8002772:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2254      	movs	r2, #84	; 0x54
 8002778:	2100      	movs	r1, #0
 800277a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff fdc3 	bl	800230c <LL_ADC_REG_StartConversion>
 8002786:	e008      	b.n	800279a <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2254      	movs	r2, #84	; 0x54
 800278c:	2100      	movs	r1, #0
 800278e:	5499      	strb	r1, [r3, r2]
 8002790:	e003      	b.n	800279a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002792:	230f      	movs	r3, #15
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	2202      	movs	r2, #2
 8002798:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800279a:	230f      	movs	r3, #15
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	781b      	ldrb	r3, [r3, #0]
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b004      	add	sp, #16
 80027a6:	bdb0      	pop	{r4, r5, r7, pc}
 80027a8:	fffff0fe 	.word	0xfffff0fe

080027ac <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d102      	bne.n	80027c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 80027be:	2308      	movs	r3, #8
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	e00f      	b.n	80027e4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	d007      	beq.n	80027e0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d4:	2220      	movs	r2, #32
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e072      	b.n	80028c6 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80027e0:	2304      	movs	r3, #4
 80027e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027e4:	f7ff fc54 	bl	8002090 <HAL_GetTick>
 80027e8:	0003      	movs	r3, r0
 80027ea:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80027ec:	e01f      	b.n	800282e <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3301      	adds	r3, #1
 80027f2:	d01c      	beq.n	800282e <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027f4:	f7ff fc4c 	bl	8002090 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	429a      	cmp	r2, r3
 8002802:	d302      	bcc.n	800280a <HAL_ADC_PollForConversion+0x5e>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d111      	bne.n	800282e <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4013      	ands	r3, r2
 8002814:	d10b      	bne.n	800282e <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	2204      	movs	r2, #4
 800281c:	431a      	orrs	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2254      	movs	r2, #84	; 0x54
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e04b      	b.n	80028c6 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4013      	ands	r3, r2
 8002838:	d0d9      	beq.n	80027ee <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	2280      	movs	r2, #128	; 0x80
 8002840:	0092      	lsls	r2, r2, #2
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	0018      	movs	r0, r3
 800284e:	f7ff fca1 	bl	8002194 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002852:	1e03      	subs	r3, r0, #0
 8002854:	d02e      	beq.n	80028b4 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	7e9b      	ldrb	r3, [r3, #26]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d12a      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2208      	movs	r2, #8
 8002866:	4013      	ands	r3, r2
 8002868:	2b08      	cmp	r3, #8
 800286a:	d123      	bne.n	80028b4 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff fd5d 	bl	8002330 <LL_ADC_REG_IsConversionOngoing>
 8002876:	1e03      	subs	r3, r0, #0
 8002878:	d110      	bne.n	800289c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	210c      	movs	r1, #12
 8002886:	438a      	bics	r2, r1
 8002888:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800288e:	4a10      	ldr	r2, [pc, #64]	; (80028d0 <HAL_ADC_PollForConversion+0x124>)
 8002890:	4013      	ands	r3, r2
 8002892:	2201      	movs	r2, #1
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58
 800289a:	e00b      	b.n	80028b4 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	2220      	movs	r2, #32
 80028a2:	431a      	orrs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ac:	2201      	movs	r2, #1
 80028ae:	431a      	orrs	r2, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	7e1b      	ldrb	r3, [r3, #24]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	220c      	movs	r2, #12
 80028c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c4:	2300      	movs	r3, #0
}
 80028c6:	0018      	movs	r0, r3
 80028c8:	46bd      	mov	sp, r7
 80028ca:	b004      	add	sp, #16
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	fffffefe 	.word	0xfffffefe

080028d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028e2:	0018      	movs	r0, r3
 80028e4:	46bd      	mov	sp, r7
 80028e6:	b002      	add	sp, #8
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2317      	movs	r3, #23
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	2200      	movs	r2, #0
 80028fc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2254      	movs	r2, #84	; 0x54
 8002906:	5c9b      	ldrb	r3, [r3, r2]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x24>
 800290c:	2302      	movs	r3, #2
 800290e:	e1c0      	b.n	8002c92 <HAL_ADC_ConfigChannel+0x3a6>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2254      	movs	r2, #84	; 0x54
 8002914:	2101      	movs	r1, #1
 8002916:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0018      	movs	r0, r3
 800291e:	f7ff fd07 	bl	8002330 <LL_ADC_REG_IsConversionOngoing>
 8002922:	1e03      	subs	r3, r0, #0
 8002924:	d000      	beq.n	8002928 <HAL_ADC_ConfigChannel+0x3c>
 8002926:	e1a3      	b.n	8002c70 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d100      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x46>
 8002930:	e143      	b.n	8002bba <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691a      	ldr	r2, [r3, #16]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	429a      	cmp	r2, r3
 800293c:	d004      	beq.n	8002948 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002942:	4ac1      	ldr	r2, [pc, #772]	; (8002c48 <HAL_ADC_ConfigChannel+0x35c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d108      	bne.n	800295a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	0019      	movs	r1, r3
 8002952:	0010      	movs	r0, r2
 8002954:	f7ff fc4f 	bl	80021f6 <LL_ADC_REG_SetSequencerChAdd>
 8002958:	e0c9      	b.n	8002aee <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	211f      	movs	r1, #31
 8002964:	400b      	ands	r3, r1
 8002966:	210f      	movs	r1, #15
 8002968:	4099      	lsls	r1, r3
 800296a:	000b      	movs	r3, r1
 800296c:	43db      	mvns	r3, r3
 800296e:	4013      	ands	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	035b      	lsls	r3, r3, #13
 8002978:	0b5b      	lsrs	r3, r3, #13
 800297a:	d105      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x9c>
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	221f      	movs	r2, #31
 8002984:	4013      	ands	r3, r2
 8002986:	e098      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2201      	movs	r2, #1
 800298e:	4013      	ands	r3, r2
 8002990:	d000      	beq.n	8002994 <HAL_ADC_ConfigChannel+0xa8>
 8002992:	e091      	b.n	8002ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2202      	movs	r2, #2
 800299a:	4013      	ands	r3, r2
 800299c:	d000      	beq.n	80029a0 <HAL_ADC_ConfigChannel+0xb4>
 800299e:	e089      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1c8>
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2204      	movs	r2, #4
 80029a6:	4013      	ands	r3, r2
 80029a8:	d000      	beq.n	80029ac <HAL_ADC_ConfigChannel+0xc0>
 80029aa:	e081      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x1c4>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2208      	movs	r2, #8
 80029b2:	4013      	ands	r3, r2
 80029b4:	d000      	beq.n	80029b8 <HAL_ADC_ConfigChannel+0xcc>
 80029b6:	e079      	b.n	8002aac <HAL_ADC_ConfigChannel+0x1c0>
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2210      	movs	r2, #16
 80029be:	4013      	ands	r3, r2
 80029c0:	d000      	beq.n	80029c4 <HAL_ADC_ConfigChannel+0xd8>
 80029c2:	e071      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x1bc>
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2220      	movs	r2, #32
 80029ca:	4013      	ands	r3, r2
 80029cc:	d000      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0xe4>
 80029ce:	e069      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x1b8>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2240      	movs	r2, #64	; 0x40
 80029d6:	4013      	ands	r3, r2
 80029d8:	d000      	beq.n	80029dc <HAL_ADC_ConfigChannel+0xf0>
 80029da:	e061      	b.n	8002aa0 <HAL_ADC_ConfigChannel+0x1b4>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	4013      	ands	r3, r2
 80029e4:	d000      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0xfc>
 80029e6:	e059      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x1b0>
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	2380      	movs	r3, #128	; 0x80
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d151      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x1ac>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4013      	ands	r3, r2
 80029fe:	d149      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x1a8>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d141      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1a4>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4013      	ands	r3, r2
 8002a16:	d139      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x1a0>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	015b      	lsls	r3, r3, #5
 8002a20:	4013      	ands	r3, r2
 8002a22:	d131      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x19c>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	019b      	lsls	r3, r3, #6
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d129      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x198>
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	01db      	lsls	r3, r3, #7
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d121      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x194>
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	2380      	movs	r3, #128	; 0x80
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	4013      	ands	r3, r2
 8002a46:	d119      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x190>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	4013      	ands	r3, r2
 8002a52:	d111      	bne.n	8002a78 <HAL_ADC_ConfigChannel+0x18c>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	029b      	lsls	r3, r3, #10
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d109      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x188>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	02db      	lsls	r3, r3, #11
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d001      	beq.n	8002a70 <HAL_ADC_ConfigChannel+0x184>
 8002a6c:	2312      	movs	r3, #18
 8002a6e:	e024      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a70:	2300      	movs	r3, #0
 8002a72:	e022      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a74:	2311      	movs	r3, #17
 8002a76:	e020      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a78:	2310      	movs	r3, #16
 8002a7a:	e01e      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	e01c      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a80:	230e      	movs	r3, #14
 8002a82:	e01a      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a84:	230d      	movs	r3, #13
 8002a86:	e018      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a88:	230c      	movs	r3, #12
 8002a8a:	e016      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a8c:	230b      	movs	r3, #11
 8002a8e:	e014      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a90:	230a      	movs	r3, #10
 8002a92:	e012      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a94:	2309      	movs	r3, #9
 8002a96:	e010      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a98:	2308      	movs	r3, #8
 8002a9a:	e00e      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	e00c      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002aa0:	2306      	movs	r3, #6
 8002aa2:	e00a      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002aa4:	2305      	movs	r3, #5
 8002aa6:	e008      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	e006      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002aac:	2303      	movs	r3, #3
 8002aae:	e004      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e002      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_ADC_ConfigChannel+0x1ce>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	6852      	ldr	r2, [r2, #4]
 8002abe:	201f      	movs	r0, #31
 8002ac0:	4002      	ands	r2, r0
 8002ac2:	4093      	lsls	r3, r2
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	431a      	orrs	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d808      	bhi.n	8002aee <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	001a      	movs	r2, r3
 8002aea:	f7ff fb64 	bl	80021b6 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	001a      	movs	r2, r3
 8002afc:	f7ff fb9e 	bl	800223c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	db00      	blt.n	8002b0a <HAL_ADC_ConfigChannel+0x21e>
 8002b08:	e0bc      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002b0a:	4b50      	ldr	r3, [pc, #320]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7ff fb17 	bl	8002140 <LL_ADC_GetCommonPathInternalCh>
 8002b12:	0003      	movs	r3, r0
 8002b14:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4d      	ldr	r2, [pc, #308]	; (8002c50 <HAL_ADC_ConfigChannel+0x364>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d122      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b28:	d11d      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2280      	movs	r2, #128	; 0x80
 8002b2e:	0412      	lsls	r2, r2, #16
 8002b30:	4313      	orrs	r3, r2
 8002b32:	4a46      	ldr	r2, [pc, #280]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002b34:	0019      	movs	r1, r3
 8002b36:	0010      	movs	r0, r2
 8002b38:	f7ff faee 	bl	8002118 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b3c:	4b45      	ldr	r3, [pc, #276]	; (8002c54 <HAL_ADC_ConfigChannel+0x368>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4945      	ldr	r1, [pc, #276]	; (8002c58 <HAL_ADC_ConfigChannel+0x36c>)
 8002b42:	0018      	movs	r0, r3
 8002b44:	f7fd fade 	bl	8000104 <__udivsi3>
 8002b48:	0003      	movs	r3, r0
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	0013      	movs	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	189b      	adds	r3, r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b56:	e002      	b.n	8002b5e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f9      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002b64:	e08e      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a3c      	ldr	r2, [pc, #240]	; (8002c5c <HAL_ADC_ConfigChannel+0x370>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d10e      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x2a2>
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	045b      	lsls	r3, r3, #17
 8002b76:	4013      	ands	r3, r2
 8002b78:	d109      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2280      	movs	r2, #128	; 0x80
 8002b7e:	0452      	lsls	r2, r2, #17
 8002b80:	4313      	orrs	r3, r2
 8002b82:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002b84:	0019      	movs	r1, r3
 8002b86:	0010      	movs	r0, r2
 8002b88:	f7ff fac6 	bl	8002118 <LL_ADC_SetCommonPathInternalCh>
 8002b8c:	e07a      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a33      	ldr	r2, [pc, #204]	; (8002c60 <HAL_ADC_ConfigChannel+0x374>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d000      	beq.n	8002b9a <HAL_ADC_ConfigChannel+0x2ae>
 8002b98:	e074      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	2380      	movs	r3, #128	; 0x80
 8002b9e:	03db      	lsls	r3, r3, #15
 8002ba0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002ba2:	d000      	beq.n	8002ba6 <HAL_ADC_ConfigChannel+0x2ba>
 8002ba4:	e06e      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	2280      	movs	r2, #128	; 0x80
 8002baa:	03d2      	lsls	r2, r2, #15
 8002bac:	4313      	orrs	r3, r2
 8002bae:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	0010      	movs	r0, r2
 8002bb4:	f7ff fab0 	bl	8002118 <LL_ADC_SetCommonPathInternalCh>
 8002bb8:	e064      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	2380      	movs	r3, #128	; 0x80
 8002bc0:	061b      	lsls	r3, r3, #24
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d004      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_ADC_ConfigChannel+0x35c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d107      	bne.n	8002be0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	0019      	movs	r1, r3
 8002bda:	0010      	movs	r0, r2
 8002bdc:	f7ff fb1c 	bl	8002218 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da4d      	bge.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002be8:	4b18      	ldr	r3, [pc, #96]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002bea:	0018      	movs	r0, r3
 8002bec:	f7ff faa8 	bl	8002140 <LL_ADC_GetCommonPathInternalCh>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a15      	ldr	r2, [pc, #84]	; (8002c50 <HAL_ADC_ConfigChannel+0x364>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d108      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4a18      	ldr	r2, [pc, #96]	; (8002c64 <HAL_ADC_ConfigChannel+0x378>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002c06:	0019      	movs	r1, r3
 8002c08:	0010      	movs	r0, r2
 8002c0a:	f7ff fa85 	bl	8002118 <LL_ADC_SetCommonPathInternalCh>
 8002c0e:	e039      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a11      	ldr	r2, [pc, #68]	; (8002c5c <HAL_ADC_ConfigChannel+0x370>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_ADC_ConfigChannel+0x37c>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002c22:	0019      	movs	r1, r3
 8002c24:	0010      	movs	r0, r2
 8002c26:	f7ff fa77 	bl	8002118 <LL_ADC_SetCommonPathInternalCh>
 8002c2a:	e02b      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <HAL_ADC_ConfigChannel+0x374>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d126      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4a0c      	ldr	r2, [pc, #48]	; (8002c6c <HAL_ADC_ConfigChannel+0x380>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	4a03      	ldr	r2, [pc, #12]	; (8002c4c <HAL_ADC_ConfigChannel+0x360>)
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f7ff fa69 	bl	8002118 <LL_ADC_SetCommonPathInternalCh>
 8002c46:	e01d      	b.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
 8002c48:	80000004 	.word	0x80000004
 8002c4c:	40012708 	.word	0x40012708
 8002c50:	b0001000 	.word	0xb0001000
 8002c54:	20000004 	.word	0x20000004
 8002c58:	00030d40 	.word	0x00030d40
 8002c5c:	b8004000 	.word	0xb8004000
 8002c60:	b4002000 	.word	0xb4002000
 8002c64:	ff7fffff 	.word	0xff7fffff
 8002c68:	feffffff 	.word	0xfeffffff
 8002c6c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c74:	2220      	movs	r2, #32
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002c7c:	2317      	movs	r3, #23
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2254      	movs	r2, #84	; 0x54
 8002c88:	2100      	movs	r1, #0
 8002c8a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002c8c:	2317      	movs	r3, #23
 8002c8e:	18fb      	adds	r3, r7, r3
 8002c90:	781b      	ldrb	r3, [r3, #0]
}
 8002c92:	0018      	movs	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	b006      	add	sp, #24
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)

08002c9c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	0018      	movs	r0, r3
 8002cae:	f7ff fb1b 	bl	80022e8 <LL_ADC_IsEnabled>
 8002cb2:	1e03      	subs	r3, r0, #0
 8002cb4:	d000      	beq.n	8002cb8 <ADC_Enable+0x1c>
 8002cb6:	e069      	b.n	8002d8c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4a36      	ldr	r2, [pc, #216]	; (8002d98 <ADC_Enable+0xfc>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d00d      	beq.n	8002ce0 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc8:	2210      	movs	r2, #16
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e056      	b.n	8002d8e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	0018      	movs	r0, r3
 8002ce6:	f7ff faed 	bl	80022c4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002cea:	4b2c      	ldr	r3, [pc, #176]	; (8002d9c <ADC_Enable+0x100>)
 8002cec:	0018      	movs	r0, r3
 8002cee:	f7ff fa27 	bl	8002140 <LL_ADC_GetCommonPathInternalCh>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d00f      	beq.n	8002d1c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cfc:	4b28      	ldr	r3, [pc, #160]	; (8002da0 <ADC_Enable+0x104>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4928      	ldr	r1, [pc, #160]	; (8002da4 <ADC_Enable+0x108>)
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7fd f9fe 	bl	8000104 <__udivsi3>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d0e:	e002      	b.n	8002d16 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f9      	bne.n	8002d10 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	7e5b      	ldrb	r3, [r3, #25]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d033      	beq.n	8002d8c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002d24:	f7ff f9b4 	bl	8002090 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d2c:	e027      	b.n	8002d7e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7ff fad8 	bl	80022e8 <LL_ADC_IsEnabled>
 8002d38:	1e03      	subs	r3, r0, #0
 8002d3a:	d104      	bne.n	8002d46 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7ff fabf 	bl	80022c4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002d46:	f7ff f9a3 	bl	8002090 <HAL_GetTick>
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d914      	bls.n	8002d7e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d00d      	beq.n	8002d7e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	2210      	movs	r2, #16
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	2201      	movs	r2, #1
 8002d74:	431a      	orrs	r2, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2201      	movs	r2, #1
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d1d0      	bne.n	8002d2e <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	0018      	movs	r0, r3
 8002d90:	46bd      	mov	sp, r7
 8002d92:	b004      	add	sp, #16
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	46c0      	nop			; (mov r8, r8)
 8002d98:	80000017 	.word	0x80000017
 8002d9c:	40012708 	.word	0x40012708
 8002da0:	20000004 	.word	0x20000004
 8002da4:	00030d40 	.word	0x00030d40

08002da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da8:	b590      	push	{r4, r7, lr}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	0002      	movs	r2, r0
 8002db0:	6039      	str	r1, [r7, #0]
 8002db2:	1dfb      	adds	r3, r7, #7
 8002db4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002db6:	1dfb      	adds	r3, r7, #7
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b7f      	cmp	r3, #127	; 0x7f
 8002dbc:	d828      	bhi.n	8002e10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	; (8002e7c <__NVIC_SetPriority+0xd4>)
 8002dc0:	1dfb      	adds	r3, r7, #7
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	089b      	lsrs	r3, r3, #2
 8002dc8:	33c0      	adds	r3, #192	; 0xc0
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	589b      	ldr	r3, [r3, r2]
 8002dce:	1dfa      	adds	r2, r7, #7
 8002dd0:	7812      	ldrb	r2, [r2, #0]
 8002dd2:	0011      	movs	r1, r2
 8002dd4:	2203      	movs	r2, #3
 8002dd6:	400a      	ands	r2, r1
 8002dd8:	00d2      	lsls	r2, r2, #3
 8002dda:	21ff      	movs	r1, #255	; 0xff
 8002ddc:	4091      	lsls	r1, r2
 8002dde:	000a      	movs	r2, r1
 8002de0:	43d2      	mvns	r2, r2
 8002de2:	401a      	ands	r2, r3
 8002de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	22ff      	movs	r2, #255	; 0xff
 8002dec:	401a      	ands	r2, r3
 8002dee:	1dfb      	adds	r3, r7, #7
 8002df0:	781b      	ldrb	r3, [r3, #0]
 8002df2:	0018      	movs	r0, r3
 8002df4:	2303      	movs	r3, #3
 8002df6:	4003      	ands	r3, r0
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dfc:	481f      	ldr	r0, [pc, #124]	; (8002e7c <__NVIC_SetPriority+0xd4>)
 8002dfe:	1dfb      	adds	r3, r7, #7
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	089b      	lsrs	r3, r3, #2
 8002e06:	430a      	orrs	r2, r1
 8002e08:	33c0      	adds	r3, #192	; 0xc0
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e0e:	e031      	b.n	8002e74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e10:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <__NVIC_SetPriority+0xd8>)
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	0019      	movs	r1, r3
 8002e18:	230f      	movs	r3, #15
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	3b08      	subs	r3, #8
 8002e1e:	089b      	lsrs	r3, r3, #2
 8002e20:	3306      	adds	r3, #6
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	18d3      	adds	r3, r2, r3
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1dfa      	adds	r2, r7, #7
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	0011      	movs	r1, r2
 8002e30:	2203      	movs	r2, #3
 8002e32:	400a      	ands	r2, r1
 8002e34:	00d2      	lsls	r2, r2, #3
 8002e36:	21ff      	movs	r1, #255	; 0xff
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	000a      	movs	r2, r1
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	22ff      	movs	r2, #255	; 0xff
 8002e48:	401a      	ands	r2, r3
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	2303      	movs	r3, #3
 8002e52:	4003      	ands	r3, r0
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e58:	4809      	ldr	r0, [pc, #36]	; (8002e80 <__NVIC_SetPriority+0xd8>)
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	001c      	movs	r4, r3
 8002e60:	230f      	movs	r3, #15
 8002e62:	4023      	ands	r3, r4
 8002e64:	3b08      	subs	r3, #8
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	3306      	adds	r3, #6
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	18c3      	adds	r3, r0, r3
 8002e70:	3304      	adds	r3, #4
 8002e72:	601a      	str	r2, [r3, #0]
}
 8002e74:	46c0      	nop			; (mov r8, r8)
 8002e76:	46bd      	mov	sp, r7
 8002e78:	b003      	add	sp, #12
 8002e7a:	bd90      	pop	{r4, r7, pc}
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	1e5a      	subs	r2, r3, #1
 8002e90:	2380      	movs	r3, #128	; 0x80
 8002e92:	045b      	lsls	r3, r3, #17
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d301      	bcc.n	8002e9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e010      	b.n	8002ebe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <SysTick_Config+0x44>)
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	3a01      	subs	r2, #1
 8002ea2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	425b      	negs	r3, r3
 8002ea8:	2103      	movs	r1, #3
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7ff ff7c 	bl	8002da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002eb0:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <SysTick_Config+0x44>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eb6:	4b04      	ldr	r3, [pc, #16]	; (8002ec8 <SysTick_Config+0x44>)
 8002eb8:	2207      	movs	r2, #7
 8002eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b002      	add	sp, #8
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	46c0      	nop			; (mov r8, r8)
 8002ec8:	e000e010 	.word	0xe000e010

08002ecc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	210f      	movs	r1, #15
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	1c02      	adds	r2, r0, #0
 8002edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	b25b      	sxtb	r3, r3
 8002ee6:	0011      	movs	r1, r2
 8002ee8:	0018      	movs	r0, r3
 8002eea:	f7ff ff5d 	bl	8002da8 <__NVIC_SetPriority>
}
 8002eee:	46c0      	nop			; (mov r8, r8)
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	b004      	add	sp, #16
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	0018      	movs	r0, r3
 8002f02:	f7ff ffbf 	bl	8002e84 <SysTick_Config>
 8002f06:	0003      	movs	r3, r0
}
 8002f08:	0018      	movs	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1e:	e14d      	b.n	80031bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4091      	lsls	r1, r2
 8002f2a:	000a      	movs	r2, r1
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d100      	bne.n	8002f38 <HAL_GPIO_Init+0x28>
 8002f36:	e13e      	b.n	80031b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d005      	beq.n	8002f50 <HAL_GPIO_Init+0x40>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2203      	movs	r2, #3
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d130      	bne.n	8002fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	0013      	movs	r3, r2
 8002f60:	43da      	mvns	r2, r3
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	409a      	lsls	r2, r3
 8002f72:	0013      	movs	r3, r2
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f86:	2201      	movs	r2, #1
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	0013      	movs	r3, r2
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	401a      	ands	r2, r3
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	0013      	movs	r3, r2
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d017      	beq.n	8002fee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	409a      	lsls	r2, r3
 8002fcc:	0013      	movs	r3, r2
 8002fce:	43da      	mvns	r2, r3
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	2203      	movs	r2, #3
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d123      	bne.n	8003042 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	58d3      	ldr	r3, [r2, r3]
 8003006:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	2207      	movs	r2, #7
 800300c:	4013      	ands	r3, r2
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	409a      	lsls	r2, r3
 8003014:	0013      	movs	r3, r2
 8003016:	43da      	mvns	r2, r3
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2107      	movs	r1, #7
 8003026:	400b      	ands	r3, r1
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	409a      	lsls	r2, r3
 800302c:	0013      	movs	r3, r2
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	08da      	lsrs	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3208      	adds	r2, #8
 800303c:	0092      	lsls	r2, r2, #2
 800303e:	6939      	ldr	r1, [r7, #16]
 8003040:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	409a      	lsls	r2, r3
 8003050:	0013      	movs	r3, r2
 8003052:	43da      	mvns	r2, r3
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2203      	movs	r2, #3
 8003060:	401a      	ands	r2, r3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	0013      	movs	r3, r2
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	23c0      	movs	r3, #192	; 0xc0
 800307c:	029b      	lsls	r3, r3, #10
 800307e:	4013      	ands	r3, r2
 8003080:	d100      	bne.n	8003084 <HAL_GPIO_Init+0x174>
 8003082:	e098      	b.n	80031b6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003084:	4a53      	ldr	r2, [pc, #332]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	3318      	adds	r3, #24
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	589b      	ldr	r3, [r3, r2]
 8003090:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	2203      	movs	r2, #3
 8003096:	4013      	ands	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	220f      	movs	r2, #15
 800309c:	409a      	lsls	r2, r3
 800309e:	0013      	movs	r3, r2
 80030a0:	43da      	mvns	r2, r3
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	23a0      	movs	r3, #160	; 0xa0
 80030ac:	05db      	lsls	r3, r3, #23
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d019      	beq.n	80030e6 <HAL_GPIO_Init+0x1d6>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a48      	ldr	r2, [pc, #288]	; (80031d8 <HAL_GPIO_Init+0x2c8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0x1d2>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a47      	ldr	r2, [pc, #284]	; (80031dc <HAL_GPIO_Init+0x2cc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00d      	beq.n	80030de <HAL_GPIO_Init+0x1ce>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a46      	ldr	r2, [pc, #280]	; (80031e0 <HAL_GPIO_Init+0x2d0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d007      	beq.n	80030da <HAL_GPIO_Init+0x1ca>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a45      	ldr	r2, [pc, #276]	; (80031e4 <HAL_GPIO_Init+0x2d4>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d101      	bne.n	80030d6 <HAL_GPIO_Init+0x1c6>
 80030d2:	2304      	movs	r3, #4
 80030d4:	e008      	b.n	80030e8 <HAL_GPIO_Init+0x1d8>
 80030d6:	2305      	movs	r3, #5
 80030d8:	e006      	b.n	80030e8 <HAL_GPIO_Init+0x1d8>
 80030da:	2303      	movs	r3, #3
 80030dc:	e004      	b.n	80030e8 <HAL_GPIO_Init+0x1d8>
 80030de:	2302      	movs	r3, #2
 80030e0:	e002      	b.n	80030e8 <HAL_GPIO_Init+0x1d8>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_GPIO_Init+0x1d8>
 80030e6:	2300      	movs	r3, #0
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	2103      	movs	r1, #3
 80030ec:	400a      	ands	r2, r1
 80030ee:	00d2      	lsls	r2, r2, #3
 80030f0:	4093      	lsls	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80030f8:	4936      	ldr	r1, [pc, #216]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	089b      	lsrs	r3, r3, #2
 80030fe:	3318      	adds	r3, #24
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003106:	4a33      	ldr	r2, [pc, #204]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	58d3      	ldr	r3, [r2, r3]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43da      	mvns	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	2380      	movs	r3, #128	; 0x80
 800311e:	025b      	lsls	r3, r3, #9
 8003120:	4013      	ands	r3, r2
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800312c:	4929      	ldr	r1, [pc, #164]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 800312e:	2280      	movs	r2, #128	; 0x80
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8003134:	4a27      	ldr	r2, [pc, #156]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 8003136:	2384      	movs	r3, #132	; 0x84
 8003138:	58d3      	ldr	r3, [r2, r3]
 800313a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	43da      	mvns	r2, r3
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	4013      	ands	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	2380      	movs	r3, #128	; 0x80
 800314c:	029b      	lsls	r3, r3, #10
 800314e:	4013      	ands	r3, r2
 8003150:	d003      	beq.n	800315a <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800315a:	491e      	ldr	r1, [pc, #120]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 800315c:	2284      	movs	r2, #132	; 0x84
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003162:	4b1c      	ldr	r3, [pc, #112]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	43da      	mvns	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4013      	ands	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	035b      	lsls	r3, r3, #13
 800317a:	4013      	ands	r3, r2
 800317c:	d003      	beq.n	8003186 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	43da      	mvns	r2, r3
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4013      	ands	r3, r2
 800319a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	2380      	movs	r3, #128	; 0x80
 80031a2:	039b      	lsls	r3, r3, #14
 80031a4:	4013      	ands	r3, r2
 80031a6:	d003      	beq.n	80031b0 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_GPIO_Init+0x2c4>)
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	40da      	lsrs	r2, r3
 80031c4:	1e13      	subs	r3, r2, #0
 80031c6:	d000      	beq.n	80031ca <HAL_GPIO_Init+0x2ba>
 80031c8:	e6aa      	b.n	8002f20 <HAL_GPIO_Init+0x10>
  }
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b006      	add	sp, #24
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021800 	.word	0x40021800
 80031d8:	50000400 	.word	0x50000400
 80031dc:	50000800 	.word	0x50000800
 80031e0:	50000c00 	.word	0x50000c00
 80031e4:	50001000 	.word	0x50001000

080031e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	0008      	movs	r0, r1
 80031f2:	0011      	movs	r1, r2
 80031f4:	1cbb      	adds	r3, r7, #2
 80031f6:	1c02      	adds	r2, r0, #0
 80031f8:	801a      	strh	r2, [r3, #0]
 80031fa:	1c7b      	adds	r3, r7, #1
 80031fc:	1c0a      	adds	r2, r1, #0
 80031fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003200:	1c7b      	adds	r3, r7, #1
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003208:	1cbb      	adds	r3, r7, #2
 800320a:	881a      	ldrh	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003210:	e003      	b.n	800321a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003212:	1cbb      	adds	r3, r7, #2
 8003214:	881a      	ldrh	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	629a      	str	r2, [r3, #40]	; 0x28
}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b002      	add	sp, #8
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800322c:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a19      	ldr	r2, [pc, #100]	; (8003298 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003232:	4013      	ands	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	429a      	cmp	r2, r3
 8003246:	d11f      	bne.n	8003288 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003248:	4b14      	ldr	r3, [pc, #80]	; (800329c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	0013      	movs	r3, r2
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	189b      	adds	r3, r3, r2
 8003252:	005b      	lsls	r3, r3, #1
 8003254:	4912      	ldr	r1, [pc, #72]	; (80032a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003256:	0018      	movs	r0, r3
 8003258:	f7fc ff54 	bl	8000104 <__udivsi3>
 800325c:	0003      	movs	r3, r0
 800325e:	3301      	adds	r3, #1
 8003260:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003262:	e008      	b.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	3b01      	subs	r3, #1
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e001      	b.n	8003276 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e009      	b.n	800328a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	2380      	movs	r3, #128	; 0x80
 800327c:	00db      	lsls	r3, r3, #3
 800327e:	401a      	ands	r2, r3
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	429a      	cmp	r2, r3
 8003286:	d0ed      	beq.n	8003264 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	0018      	movs	r0, r3
 800328c:	46bd      	mov	sp, r7
 800328e:	b004      	add	sp, #16
 8003290:	bd80      	pop	{r7, pc}
 8003292:	46c0      	nop			; (mov r8, r8)
 8003294:	40007000 	.word	0x40007000
 8003298:	fffff9ff 	.word	0xfffff9ff
 800329c:	20000004 	.word	0x20000004
 80032a0:	000f4240 	.word	0x000f4240

080032a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b088      	sub	sp, #32
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f000 fb56 	bl	8003964 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2201      	movs	r2, #1
 80032be:	4013      	ands	r3, r2
 80032c0:	d100      	bne.n	80032c4 <HAL_RCC_OscConfig+0x20>
 80032c2:	e07d      	b.n	80033c0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c4:	4bc3      	ldr	r3, [pc, #780]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2238      	movs	r2, #56	; 0x38
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032ce:	4bc1      	ldr	r3, [pc, #772]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2203      	movs	r2, #3
 80032d4:	4013      	ands	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	2b10      	cmp	r3, #16
 80032dc:	d102      	bne.n	80032e4 <HAL_RCC_OscConfig+0x40>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d002      	beq.n	80032ea <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d10c      	bne.n	8003304 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032ea:	4bba      	ldr	r3, [pc, #744]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	2380      	movs	r3, #128	; 0x80
 80032f0:	029b      	lsls	r3, r3, #10
 80032f2:	4013      	ands	r3, r2
 80032f4:	d063      	beq.n	80033be <HAL_RCC_OscConfig+0x11a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d15f      	bne.n	80033be <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f000 fb30 	bl	8003964 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	025b      	lsls	r3, r3, #9
 800330c:	429a      	cmp	r2, r3
 800330e:	d107      	bne.n	8003320 <HAL_RCC_OscConfig+0x7c>
 8003310:	4bb0      	ldr	r3, [pc, #704]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4baf      	ldr	r3, [pc, #700]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003316:	2180      	movs	r1, #128	; 0x80
 8003318:	0249      	lsls	r1, r1, #9
 800331a:	430a      	orrs	r2, r1
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e020      	b.n	8003362 <HAL_RCC_OscConfig+0xbe>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	23a0      	movs	r3, #160	; 0xa0
 8003326:	02db      	lsls	r3, r3, #11
 8003328:	429a      	cmp	r2, r3
 800332a:	d10e      	bne.n	800334a <HAL_RCC_OscConfig+0xa6>
 800332c:	4ba9      	ldr	r3, [pc, #676]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4ba8      	ldr	r3, [pc, #672]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	02c9      	lsls	r1, r1, #11
 8003336:	430a      	orrs	r2, r1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	4ba6      	ldr	r3, [pc, #664]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4ba5      	ldr	r3, [pc, #660]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	0249      	lsls	r1, r1, #9
 8003344:	430a      	orrs	r2, r1
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	e00b      	b.n	8003362 <HAL_RCC_OscConfig+0xbe>
 800334a:	4ba2      	ldr	r3, [pc, #648]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4ba1      	ldr	r3, [pc, #644]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003350:	49a1      	ldr	r1, [pc, #644]	; (80035d8 <HAL_RCC_OscConfig+0x334>)
 8003352:	400a      	ands	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	4b9f      	ldr	r3, [pc, #636]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	4b9e      	ldr	r3, [pc, #632]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800335c:	499f      	ldr	r1, [pc, #636]	; (80035dc <HAL_RCC_OscConfig+0x338>)
 800335e:	400a      	ands	r2, r1
 8003360:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d014      	beq.n	8003394 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336a:	f7fe fe91 	bl	8002090 <HAL_GetTick>
 800336e:	0003      	movs	r3, r0
 8003370:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003374:	f7fe fe8c 	bl	8002090 <HAL_GetTick>
 8003378:	0002      	movs	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b64      	cmp	r3, #100	; 0x64
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e2ee      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003386:	4b93      	ldr	r3, [pc, #588]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	029b      	lsls	r3, r3, #10
 800338e:	4013      	ands	r3, r2
 8003390:	d0f0      	beq.n	8003374 <HAL_RCC_OscConfig+0xd0>
 8003392:	e015      	b.n	80033c0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fe7c 	bl	8002090 <HAL_GetTick>
 8003398:	0003      	movs	r3, r0
 800339a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800339c:	e008      	b.n	80033b0 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800339e:	f7fe fe77 	bl	8002090 <HAL_GetTick>
 80033a2:	0002      	movs	r2, r0
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b64      	cmp	r3, #100	; 0x64
 80033aa:	d901      	bls.n	80033b0 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e2d9      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033b0:	4b88      	ldr	r3, [pc, #544]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	029b      	lsls	r3, r3, #10
 80033b8:	4013      	ands	r3, r2
 80033ba:	d1f0      	bne.n	800339e <HAL_RCC_OscConfig+0xfa>
 80033bc:	e000      	b.n	80033c0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2202      	movs	r2, #2
 80033c6:	4013      	ands	r3, r2
 80033c8:	d100      	bne.n	80033cc <HAL_RCC_OscConfig+0x128>
 80033ca:	e099      	b.n	8003500 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033cc:	4b81      	ldr	r3, [pc, #516]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2238      	movs	r2, #56	; 0x38
 80033d2:	4013      	ands	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033d6:	4b7f      	ldr	r3, [pc, #508]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	2203      	movs	r2, #3
 80033dc:	4013      	ands	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	2b10      	cmp	r3, #16
 80033e4:	d102      	bne.n	80033ec <HAL_RCC_OscConfig+0x148>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d002      	beq.n	80033f2 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d135      	bne.n	800345e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033f2:	4b78      	ldr	r3, [pc, #480]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	2380      	movs	r3, #128	; 0x80
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4013      	ands	r3, r2
 80033fc:	d005      	beq.n	800340a <HAL_RCC_OscConfig+0x166>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e2ac      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800340a:	4b72      	ldr	r3, [pc, #456]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	4a74      	ldr	r2, [pc, #464]	; (80035e0 <HAL_RCC_OscConfig+0x33c>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	021a      	lsls	r2, r3, #8
 800341a:	4b6e      	ldr	r3, [pc, #440]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800341c:	430a      	orrs	r2, r1
 800341e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d112      	bne.n	800344c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003426:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_RCC_OscConfig+0x340>)
 800342c:	4013      	ands	r3, r2
 800342e:	0019      	movs	r1, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	4b67      	ldr	r3, [pc, #412]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003436:	430a      	orrs	r2, r1
 8003438:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800343a:	4b66      	ldr	r3, [pc, #408]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	0adb      	lsrs	r3, r3, #11
 8003440:	2207      	movs	r2, #7
 8003442:	4013      	ands	r3, r2
 8003444:	4a68      	ldr	r2, [pc, #416]	; (80035e8 <HAL_RCC_OscConfig+0x344>)
 8003446:	40da      	lsrs	r2, r3
 8003448:	4b68      	ldr	r3, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x348>)
 800344a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800344c:	4b68      	ldr	r3, [pc, #416]	; (80035f0 <HAL_RCC_OscConfig+0x34c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	0018      	movs	r0, r3
 8003452:	f7fe fdc1 	bl	8001fd8 <HAL_InitTick>
 8003456:	1e03      	subs	r3, r0, #0
 8003458:	d051      	beq.n	80034fe <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e282      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d030      	beq.n	80034c8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003466:	4b5b      	ldr	r3, [pc, #364]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a5e      	ldr	r2, [pc, #376]	; (80035e4 <HAL_RCC_OscConfig+0x340>)
 800346c:	4013      	ands	r3, r2
 800346e:	0019      	movs	r1, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	4b57      	ldr	r3, [pc, #348]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003476:	430a      	orrs	r2, r1
 8003478:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800347a:	4b56      	ldr	r3, [pc, #344]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b55      	ldr	r3, [pc, #340]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003480:	2180      	movs	r1, #128	; 0x80
 8003482:	0049      	lsls	r1, r1, #1
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fe02 	bl	8002090 <HAL_GetTick>
 800348c:	0003      	movs	r3, r0
 800348e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe fdfd 	bl	8002090 <HAL_GetTick>
 8003496:	0002      	movs	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e25f      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4013      	ands	r3, r2
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b48      	ldr	r3, [pc, #288]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <HAL_RCC_OscConfig+0x33c>)
 80034b6:	4013      	ands	r3, r2
 80034b8:	0019      	movs	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	021a      	lsls	r2, r3, #8
 80034c0:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
 80034c6:	e01b      	b.n	8003500 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80034c8:	4b42      	ldr	r3, [pc, #264]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034ce:	4949      	ldr	r1, [pc, #292]	; (80035f4 <HAL_RCC_OscConfig+0x350>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d4:	f7fe fddc 	bl	8002090 <HAL_GetTick>
 80034d8:	0003      	movs	r3, r0
 80034da:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034de:	f7fe fdd7 	bl	8002090 <HAL_GetTick>
 80034e2:	0002      	movs	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e239      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034f0:	4b38      	ldr	r3, [pc, #224]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4013      	ands	r3, r2
 80034fa:	d1f0      	bne.n	80034de <HAL_RCC_OscConfig+0x23a>
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2208      	movs	r2, #8
 8003506:	4013      	ands	r3, r2
 8003508:	d047      	beq.n	800359a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800350a:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	2238      	movs	r2, #56	; 0x38
 8003510:	4013      	ands	r3, r2
 8003512:	2b18      	cmp	r3, #24
 8003514:	d10a      	bne.n	800352c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351a:	2202      	movs	r2, #2
 800351c:	4013      	ands	r3, r2
 800351e:	d03c      	beq.n	800359a <HAL_RCC_OscConfig+0x2f6>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d138      	bne.n	800359a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e21b      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d019      	beq.n	8003568 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003534:	4b27      	ldr	r3, [pc, #156]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003536:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800353a:	2101      	movs	r1, #1
 800353c:	430a      	orrs	r2, r1
 800353e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe fda6 	bl	8002090 <HAL_GetTick>
 8003544:	0003      	movs	r3, r0
 8003546:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800354a:	f7fe fda1 	bl	8002090 <HAL_GetTick>
 800354e:	0002      	movs	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e203      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800355e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003560:	2202      	movs	r2, #2
 8003562:	4013      	ands	r3, r2
 8003564:	d0f1      	beq.n	800354a <HAL_RCC_OscConfig+0x2a6>
 8003566:	e018      	b.n	800359a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800356a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 800356e:	2101      	movs	r1, #1
 8003570:	438a      	bics	r2, r1
 8003572:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fe fd8c 	bl	8002090 <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357e:	f7fe fd87 	bl	8002090 <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1e9      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003590:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 8003592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003594:	2202      	movs	r2, #2
 8003596:	4013      	ands	r3, r2
 8003598:	d1f1      	bne.n	800357e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2204      	movs	r2, #4
 80035a0:	4013      	ands	r3, r2
 80035a2:	d100      	bne.n	80035a6 <HAL_RCC_OscConfig+0x302>
 80035a4:	e0c6      	b.n	8003734 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035a6:	231f      	movs	r3, #31
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2200      	movs	r2, #0
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2238      	movs	r2, #56	; 0x38
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d11e      	bne.n	80035f8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80035ba:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <HAL_RCC_OscConfig+0x330>)
 80035bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035be:	2202      	movs	r2, #2
 80035c0:	4013      	ands	r3, r2
 80035c2:	d100      	bne.n	80035c6 <HAL_RCC_OscConfig+0x322>
 80035c4:	e0b6      	b.n	8003734 <HAL_RCC_OscConfig+0x490>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d000      	beq.n	80035d0 <HAL_RCC_OscConfig+0x32c>
 80035ce:	e0b1      	b.n	8003734 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e1c7      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
 80035d4:	40021000 	.word	0x40021000
 80035d8:	fffeffff 	.word	0xfffeffff
 80035dc:	fffbffff 	.word	0xfffbffff
 80035e0:	ffff80ff 	.word	0xffff80ff
 80035e4:	ffffc7ff 	.word	0xffffc7ff
 80035e8:	00f42400 	.word	0x00f42400
 80035ec:	20000004 	.word	0x20000004
 80035f0:	20000008 	.word	0x20000008
 80035f4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035f8:	4bb8      	ldr	r3, [pc, #736]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80035fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035fc:	2380      	movs	r3, #128	; 0x80
 80035fe:	055b      	lsls	r3, r3, #21
 8003600:	4013      	ands	r3, r2
 8003602:	d101      	bne.n	8003608 <HAL_RCC_OscConfig+0x364>
 8003604:	2301      	movs	r3, #1
 8003606:	e000      	b.n	800360a <HAL_RCC_OscConfig+0x366>
 8003608:	2300      	movs	r3, #0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d011      	beq.n	8003632 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800360e:	4bb3      	ldr	r3, [pc, #716]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003610:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003612:	4bb2      	ldr	r3, [pc, #712]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003614:	2180      	movs	r1, #128	; 0x80
 8003616:	0549      	lsls	r1, r1, #21
 8003618:	430a      	orrs	r2, r1
 800361a:	63da      	str	r2, [r3, #60]	; 0x3c
 800361c:	4baf      	ldr	r3, [pc, #700]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800361e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003620:	2380      	movs	r3, #128	; 0x80
 8003622:	055b      	lsls	r3, r3, #21
 8003624:	4013      	ands	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800362a:	231f      	movs	r3, #31
 800362c:	18fb      	adds	r3, r7, r3
 800362e:	2201      	movs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003632:	4bab      	ldr	r3, [pc, #684]	; (80038e0 <HAL_RCC_OscConfig+0x63c>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	2380      	movs	r3, #128	; 0x80
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	4013      	ands	r3, r2
 800363c:	d11a      	bne.n	8003674 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800363e:	4ba8      	ldr	r3, [pc, #672]	; (80038e0 <HAL_RCC_OscConfig+0x63c>)
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	4ba7      	ldr	r3, [pc, #668]	; (80038e0 <HAL_RCC_OscConfig+0x63c>)
 8003644:	2180      	movs	r1, #128	; 0x80
 8003646:	0049      	lsls	r1, r1, #1
 8003648:	430a      	orrs	r2, r1
 800364a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800364c:	f7fe fd20 	bl	8002090 <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003656:	f7fe fd1b 	bl	8002090 <HAL_GetTick>
 800365a:	0002      	movs	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e17d      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003668:	4b9d      	ldr	r3, [pc, #628]	; (80038e0 <HAL_RCC_OscConfig+0x63c>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	; 0x80
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	4013      	ands	r3, r2
 8003672:	d0f0      	beq.n	8003656 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d106      	bne.n	800368a <HAL_RCC_OscConfig+0x3e6>
 800367c:	4b97      	ldr	r3, [pc, #604]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800367e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003680:	4b96      	ldr	r3, [pc, #600]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003682:	2101      	movs	r1, #1
 8003684:	430a      	orrs	r2, r1
 8003686:	65da      	str	r2, [r3, #92]	; 0x5c
 8003688:	e01c      	b.n	80036c4 <HAL_RCC_OscConfig+0x420>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d10c      	bne.n	80036ac <HAL_RCC_OscConfig+0x408>
 8003692:	4b92      	ldr	r3, [pc, #584]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003696:	4b91      	ldr	r3, [pc, #580]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003698:	2104      	movs	r1, #4
 800369a:	430a      	orrs	r2, r1
 800369c:	65da      	str	r2, [r3, #92]	; 0x5c
 800369e:	4b8f      	ldr	r3, [pc, #572]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80036a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036a2:	4b8e      	ldr	r3, [pc, #568]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80036a4:	2101      	movs	r1, #1
 80036a6:	430a      	orrs	r2, r1
 80036a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80036aa:	e00b      	b.n	80036c4 <HAL_RCC_OscConfig+0x420>
 80036ac:	4b8b      	ldr	r3, [pc, #556]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80036ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036b0:	4b8a      	ldr	r3, [pc, #552]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80036b2:	2101      	movs	r1, #1
 80036b4:	438a      	bics	r2, r1
 80036b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80036b8:	4b88      	ldr	r3, [pc, #544]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80036ba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036bc:	4b87      	ldr	r3, [pc, #540]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80036be:	2104      	movs	r1, #4
 80036c0:	438a      	bics	r2, r1
 80036c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d014      	beq.n	80036f6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036cc:	f7fe fce0 	bl	8002090 <HAL_GetTick>
 80036d0:	0003      	movs	r3, r0
 80036d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d4:	e009      	b.n	80036ea <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fe fcdb 	bl	8002090 <HAL_GetTick>
 80036da:	0002      	movs	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	4a80      	ldr	r2, [pc, #512]	; (80038e4 <HAL_RCC_OscConfig+0x640>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d901      	bls.n	80036ea <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e13c      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ea:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80036ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ee:	2202      	movs	r2, #2
 80036f0:	4013      	ands	r3, r2
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x432>
 80036f4:	e013      	b.n	800371e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fe fccb 	bl	8002090 <HAL_GetTick>
 80036fa:	0003      	movs	r3, r0
 80036fc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036fe:	e009      	b.n	8003714 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003700:	f7fe fcc6 	bl	8002090 <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	4a76      	ldr	r2, [pc, #472]	; (80038e4 <HAL_RCC_OscConfig+0x640>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e127      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003714:	4b71      	ldr	r3, [pc, #452]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003718:	2202      	movs	r2, #2
 800371a:	4013      	ands	r3, r2
 800371c:	d1f0      	bne.n	8003700 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800371e:	231f      	movs	r3, #31
 8003720:	18fb      	adds	r3, r7, r3
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d105      	bne.n	8003734 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003728:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800372a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800372c:	4b6b      	ldr	r3, [pc, #428]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800372e:	496e      	ldr	r1, [pc, #440]	; (80038e8 <HAL_RCC_OscConfig+0x644>)
 8003730:	400a      	ands	r2, r1
 8003732:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	2220      	movs	r2, #32
 800373a:	4013      	ands	r3, r2
 800373c:	d039      	beq.n	80037b2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d01b      	beq.n	800377e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003746:	4b65      	ldr	r3, [pc, #404]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4b64      	ldr	r3, [pc, #400]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800374c:	2180      	movs	r1, #128	; 0x80
 800374e:	03c9      	lsls	r1, r1, #15
 8003750:	430a      	orrs	r2, r1
 8003752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003754:	f7fe fc9c 	bl	8002090 <HAL_GetTick>
 8003758:	0003      	movs	r3, r0
 800375a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800375e:	f7fe fc97 	bl	8002090 <HAL_GetTick>
 8003762:	0002      	movs	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e0f9      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003770:	4b5a      	ldr	r3, [pc, #360]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	4013      	ands	r3, r2
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x4ba>
 800377c:	e019      	b.n	80037b2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800377e:	4b57      	ldr	r3, [pc, #348]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b56      	ldr	r3, [pc, #344]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003784:	4959      	ldr	r1, [pc, #356]	; (80038ec <HAL_RCC_OscConfig+0x648>)
 8003786:	400a      	ands	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800378a:	f7fe fc81 	bl	8002090 <HAL_GetTick>
 800378e:	0003      	movs	r3, r0
 8003790:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003794:	f7fe fc7c 	bl	8002090 <HAL_GetTick>
 8003798:	0002      	movs	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0de      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80037a6:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	2380      	movs	r3, #128	; 0x80
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	4013      	ands	r3, r2
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d100      	bne.n	80037bc <HAL_RCC_OscConfig+0x518>
 80037ba:	e0d2      	b.n	8003962 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037bc:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2238      	movs	r2, #56	; 0x38
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b10      	cmp	r3, #16
 80037c6:	d100      	bne.n	80037ca <HAL_RCC_OscConfig+0x526>
 80037c8:	e081      	b.n	80038ce <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d156      	bne.n	8003880 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b42      	ldr	r3, [pc, #264]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80037d8:	4945      	ldr	r1, [pc, #276]	; (80038f0 <HAL_RCC_OscConfig+0x64c>)
 80037da:	400a      	ands	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037de:	f7fe fc57 	bl	8002090 <HAL_GetTick>
 80037e2:	0003      	movs	r3, r0
 80037e4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e6:	e008      	b.n	80037fa <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e8:	f7fe fc52 	bl	8002090 <HAL_GetTick>
 80037ec:	0002      	movs	r2, r0
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e0b4      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fa:	4b38      	ldr	r3, [pc, #224]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	2380      	movs	r3, #128	; 0x80
 8003800:	049b      	lsls	r3, r3, #18
 8003802:	4013      	ands	r3, r2
 8003804:	d1f0      	bne.n	80037e8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003806:	4b35      	ldr	r3, [pc, #212]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	4a3a      	ldr	r2, [pc, #232]	; (80038f4 <HAL_RCC_OscConfig+0x650>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	431a      	orrs	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800382c:	431a      	orrs	r2, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003832:	431a      	orrs	r2, r3
 8003834:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003836:	430a      	orrs	r2, r1
 8003838:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800383a:	4b28      	ldr	r3, [pc, #160]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003840:	2180      	movs	r1, #128	; 0x80
 8003842:	0449      	lsls	r1, r1, #17
 8003844:	430a      	orrs	r2, r1
 8003846:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003848:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	4b23      	ldr	r3, [pc, #140]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800384e:	2180      	movs	r1, #128	; 0x80
 8003850:	0549      	lsls	r1, r1, #21
 8003852:	430a      	orrs	r2, r1
 8003854:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003856:	f7fe fc1b 	bl	8002090 <HAL_GetTick>
 800385a:	0003      	movs	r3, r0
 800385c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7fe fc16 	bl	8002090 <HAL_GetTick>
 8003864:	0002      	movs	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e078      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	4b1a      	ldr	r3, [pc, #104]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	2380      	movs	r3, #128	; 0x80
 8003878:	049b      	lsls	r3, r3, #18
 800387a:	4013      	ands	r3, r2
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x5bc>
 800387e:	e070      	b.n	8003962 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b16      	ldr	r3, [pc, #88]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003886:	491a      	ldr	r1, [pc, #104]	; (80038f0 <HAL_RCC_OscConfig+0x64c>)
 8003888:	400a      	ands	r2, r1
 800388a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	4b12      	ldr	r3, [pc, #72]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 8003892:	2103      	movs	r1, #3
 8003894:	438a      	bics	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003898:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800389a:	68da      	ldr	r2, [r3, #12]
 800389c:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 800389e:	4916      	ldr	r1, [pc, #88]	; (80038f8 <HAL_RCC_OscConfig+0x654>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a4:	f7fe fbf4 	bl	8002090 <HAL_GetTick>
 80038a8:	0003      	movs	r3, r0
 80038aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fe fbef 	bl	8002090 <HAL_GetTick>
 80038b2:	0002      	movs	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e051      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c0:	4b06      	ldr	r3, [pc, #24]	; (80038dc <HAL_RCC_OscConfig+0x638>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	049b      	lsls	r3, r3, #18
 80038c8:	4013      	ands	r3, r2
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x60a>
 80038cc:	e049      	b.n	8003962 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d112      	bne.n	80038fc <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e044      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
 80038e4:	00001388 	.word	0x00001388
 80038e8:	efffffff 	.word	0xefffffff
 80038ec:	ffbfffff 	.word	0xffbfffff
 80038f0:	feffffff 	.word	0xfeffffff
 80038f4:	11c1808c 	.word	0x11c1808c
 80038f8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_RCC_OscConfig+0x6c8>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2203      	movs	r2, #3
 8003906:	401a      	ands	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390c:	429a      	cmp	r2, r3
 800390e:	d126      	bne.n	800395e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2270      	movs	r2, #112	; 0x70
 8003914:	401a      	ands	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800391a:	429a      	cmp	r2, r3
 800391c:	d11f      	bne.n	800395e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800391e:	697a      	ldr	r2, [r7, #20]
 8003920:	23fe      	movs	r3, #254	; 0xfe
 8003922:	01db      	lsls	r3, r3, #7
 8003924:	401a      	ands	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800392c:	429a      	cmp	r2, r3
 800392e:	d116      	bne.n	800395e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	23f8      	movs	r3, #248	; 0xf8
 8003934:	039b      	lsls	r3, r3, #14
 8003936:	401a      	ands	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800393c:	429a      	cmp	r2, r3
 800393e:	d10e      	bne.n	800395e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	23e0      	movs	r3, #224	; 0xe0
 8003944:	051b      	lsls	r3, r3, #20
 8003946:	401a      	ands	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800394c:	429a      	cmp	r2, r3
 800394e:	d106      	bne.n	800395e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	0f5b      	lsrs	r3, r3, #29
 8003954:	075a      	lsls	r2, r3, #29
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800395a:	429a      	cmp	r2, r3
 800395c:	d001      	beq.n	8003962 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e000      	b.n	8003964 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	0018      	movs	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	b008      	add	sp, #32
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0e9      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003984:	4b76      	ldr	r3, [pc, #472]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2207      	movs	r2, #7
 800398a:	4013      	ands	r3, r2
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	429a      	cmp	r2, r3
 8003990:	d91e      	bls.n	80039d0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003992:	4b73      	ldr	r3, [pc, #460]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2207      	movs	r2, #7
 8003998:	4393      	bics	r3, r2
 800399a:	0019      	movs	r1, r3
 800399c:	4b70      	ldr	r3, [pc, #448]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039a4:	f7fe fb74 	bl	8002090 <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039ac:	e009      	b.n	80039c2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ae:	f7fe fb6f 	bl	8002090 <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	4a6a      	ldr	r2, [pc, #424]	; (8003b64 <HAL_RCC_ClockConfig+0x1f4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0ca      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039c2:	4b67      	ldr	r3, [pc, #412]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2207      	movs	r2, #7
 80039c8:	4013      	ands	r3, r2
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d1ee      	bne.n	80039ae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2202      	movs	r2, #2
 80039d6:	4013      	ands	r3, r2
 80039d8:	d015      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2204      	movs	r2, #4
 80039e0:	4013      	ands	r3, r2
 80039e2:	d006      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80039e4:	4b60      	ldr	r3, [pc, #384]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b5f      	ldr	r3, [pc, #380]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 80039ea:	21e0      	movs	r1, #224	; 0xe0
 80039ec:	01c9      	lsls	r1, r1, #7
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f2:	4b5d      	ldr	r3, [pc, #372]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	4a5d      	ldr	r2, [pc, #372]	; (8003b6c <HAL_RCC_ClockConfig+0x1fc>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689a      	ldr	r2, [r3, #8]
 8003a00:	4b59      	ldr	r3, [pc, #356]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d057      	beq.n	8003ac0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a18:	4b53      	ldr	r3, [pc, #332]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	029b      	lsls	r3, r3, #10
 8003a20:	4013      	ands	r3, r2
 8003a22:	d12b      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e097      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a30:	4b4d      	ldr	r3, [pc, #308]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	049b      	lsls	r3, r3, #18
 8003a38:	4013      	ands	r3, r2
 8003a3a:	d11f      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e08b      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d107      	bne.n	8003a58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a48:	4b47      	ldr	r3, [pc, #284]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2380      	movs	r3, #128	; 0x80
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	4013      	ands	r3, r2
 8003a52:	d113      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e07f      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b03      	cmp	r3, #3
 8003a5e:	d106      	bne.n	8003a6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a60:	4b41      	ldr	r3, [pc, #260]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a64:	2202      	movs	r2, #2
 8003a66:	4013      	ands	r3, r2
 8003a68:	d108      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e074      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6e:	4b3e      	ldr	r3, [pc, #248]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	2202      	movs	r2, #2
 8003a74:	4013      	ands	r3, r2
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e06d      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a7c:	4b3a      	ldr	r3, [pc, #232]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2207      	movs	r2, #7
 8003a82:	4393      	bics	r3, r2
 8003a84:	0019      	movs	r1, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	4b37      	ldr	r3, [pc, #220]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fe fafe 	bl	8002090 <HAL_GetTick>
 8003a94:	0003      	movs	r3, r0
 8003a96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a98:	e009      	b.n	8003aae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a9a:	f7fe faf9 	bl	8002090 <HAL_GetTick>
 8003a9e:	0002      	movs	r2, r0
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	4a2f      	ldr	r2, [pc, #188]	; (8003b64 <HAL_RCC_ClockConfig+0x1f4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e054      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aae:	4b2e      	ldr	r3, [pc, #184]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	2238      	movs	r2, #56	; 0x38
 8003ab4:	401a      	ands	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d1ec      	bne.n	8003a9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b27      	ldr	r3, [pc, #156]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d21e      	bcs.n	8003b0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b24      	ldr	r3, [pc, #144]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2207      	movs	r2, #7
 8003ad4:	4393      	bics	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	4b21      	ldr	r3, [pc, #132]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ae0:	f7fe fad6 	bl	8002090 <HAL_GetTick>
 8003ae4:	0003      	movs	r3, r0
 8003ae6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003ae8:	e009      	b.n	8003afe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aea:	f7fe fad1 	bl	8002090 <HAL_GetTick>
 8003aee:	0002      	movs	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	4a1b      	ldr	r2, [pc, #108]	; (8003b64 <HAL_RCC_ClockConfig+0x1f4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e02c      	b.n	8003b58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <HAL_RCC_ClockConfig+0x1f0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2207      	movs	r2, #7
 8003b04:	4013      	ands	r3, r2
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1ee      	bne.n	8003aea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2204      	movs	r2, #4
 8003b12:	4013      	ands	r3, r2
 8003b14:	d009      	beq.n	8003b2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003b16:	4b14      	ldr	r3, [pc, #80]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <HAL_RCC_ClockConfig+0x200>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	0019      	movs	r1, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003b26:	430a      	orrs	r2, r1
 8003b28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003b2a:	f000 f829 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003b2e:	0001      	movs	r1, r0
 8003b30:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <HAL_RCC_ClockConfig+0x1f8>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	220f      	movs	r2, #15
 8003b38:	401a      	ands	r2, r3
 8003b3a:	4b0e      	ldr	r3, [pc, #56]	; (8003b74 <HAL_RCC_ClockConfig+0x204>)
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	58d3      	ldr	r3, [r2, r3]
 8003b40:	221f      	movs	r2, #31
 8003b42:	4013      	ands	r3, r2
 8003b44:	000a      	movs	r2, r1
 8003b46:	40da      	lsrs	r2, r3
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <HAL_RCC_ClockConfig+0x208>)
 8003b4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_ClockConfig+0x20c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7fe fa41 	bl	8001fd8 <HAL_InitTick>
 8003b56:	0003      	movs	r3, r0
}
 8003b58:	0018      	movs	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b004      	add	sp, #16
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40022000 	.word	0x40022000
 8003b64:	00001388 	.word	0x00001388
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	fffff0ff 	.word	0xfffff0ff
 8003b70:	ffff8fff 	.word	0xffff8fff
 8003b74:	080041ec 	.word	0x080041ec
 8003b78:	20000004 	.word	0x20000004
 8003b7c:	20000008 	.word	0x20000008

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b86:	4b3c      	ldr	r3, [pc, #240]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2238      	movs	r2, #56	; 0x38
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003b90:	4b39      	ldr	r3, [pc, #228]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0adb      	lsrs	r3, r3, #11
 8003b96:	2207      	movs	r2, #7
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	409a      	lsls	r2, r3
 8003b9e:	0013      	movs	r3, r2
 8003ba0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	4835      	ldr	r0, [pc, #212]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ba6:	f7fc faad 	bl	8000104 <__udivsi3>
 8003baa:	0003      	movs	r3, r0
 8003bac:	613b      	str	r3, [r7, #16]
 8003bae:	e05d      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bb0:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2238      	movs	r2, #56	; 0x38
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d102      	bne.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bbc:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x100>)
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	e054      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc2:	4b2d      	ldr	r3, [pc, #180]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	2238      	movs	r2, #56	; 0x38
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d138      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003bce:	4b2a      	ldr	r3, [pc, #168]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bd8:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bda:	68db      	ldr	r3, [r3, #12]
 8003bdc:	091b      	lsrs	r3, r3, #4
 8003bde:	2207      	movs	r2, #7
 8003be0:	4013      	ands	r3, r2
 8003be2:	3301      	adds	r3, #1
 8003be4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d10d      	bne.n	8003c08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	4824      	ldr	r0, [pc, #144]	; (8003c80 <HAL_RCC_GetSysClockFreq+0x100>)
 8003bf0:	f7fc fa88 	bl	8000104 <__udivsi3>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	0019      	movs	r1, r3
 8003bf8:	4b1f      	ldr	r3, [pc, #124]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	0a1b      	lsrs	r3, r3, #8
 8003bfe:	227f      	movs	r2, #127	; 0x7f
 8003c00:	4013      	ands	r3, r2
 8003c02:	434b      	muls	r3, r1
 8003c04:	617b      	str	r3, [r7, #20]
        break;
 8003c06:	e00d      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003c08:	68b9      	ldr	r1, [r7, #8]
 8003c0a:	481c      	ldr	r0, [pc, #112]	; (8003c7c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003c0c:	f7fc fa7a 	bl	8000104 <__udivsi3>
 8003c10:	0003      	movs	r3, r0
 8003c12:	0019      	movs	r1, r3
 8003c14:	4b18      	ldr	r3, [pc, #96]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	0a1b      	lsrs	r3, r3, #8
 8003c1a:	227f      	movs	r2, #127	; 0x7f
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	434b      	muls	r3, r1
 8003c20:	617b      	str	r3, [r7, #20]
        break;
 8003c22:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	0f5b      	lsrs	r3, r3, #29
 8003c2a:	2207      	movs	r2, #7
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	3301      	adds	r3, #1
 8003c30:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	6978      	ldr	r0, [r7, #20]
 8003c36:	f7fc fa65 	bl	8000104 <__udivsi3>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e015      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c40:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2238      	movs	r2, #56	; 0x38
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d103      	bne.n	8003c54 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003c4c:	2380      	movs	r3, #128	; 0x80
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	e00b      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c54:	4b08      	ldr	r3, [pc, #32]	; (8003c78 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2238      	movs	r2, #56	; 0x38
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b18      	cmp	r3, #24
 8003c5e:	d103      	bne.n	8003c68 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003c60:	23fa      	movs	r3, #250	; 0xfa
 8003c62:	01db      	lsls	r3, r3, #7
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e001      	b.n	8003c6c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003c6c:	693b      	ldr	r3, [r7, #16]
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b006      	add	sp, #24
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	00f42400 	.word	0x00f42400
 8003c80:	007a1200 	.word	0x007a1200

08003c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003c8c:	2313      	movs	r3, #19
 8003c8e:	18fb      	adds	r3, r7, r3
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c94:	2312      	movs	r3, #18
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	2200      	movs	r2, #0
 8003c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d100      	bne.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003ca8:	e0ad      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003caa:	2011      	movs	r0, #17
 8003cac:	183b      	adds	r3, r7, r0
 8003cae:	2200      	movs	r2, #0
 8003cb0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb6:	2380      	movs	r3, #128	; 0x80
 8003cb8:	055b      	lsls	r3, r3, #21
 8003cba:	4013      	ands	r3, r2
 8003cbc:	d110      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cbe:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cc4:	2180      	movs	r1, #128	; 0x80
 8003cc6:	0549      	lsls	r1, r1, #21
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ccc:	4b40      	ldr	r3, [pc, #256]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003cce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cd0:	2380      	movs	r3, #128	; 0x80
 8003cd2:	055b      	lsls	r3, r3, #21
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cda:	183b      	adds	r3, r7, r0
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ce0:	4b3c      	ldr	r3, [pc, #240]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b3b      	ldr	r3, [pc, #236]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003ce6:	2180      	movs	r1, #128	; 0x80
 8003ce8:	0049      	lsls	r1, r1, #1
 8003cea:	430a      	orrs	r2, r1
 8003cec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cee:	f7fe f9cf 	bl	8002090 <HAL_GetTick>
 8003cf2:	0003      	movs	r3, r0
 8003cf4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cf8:	f7fe f9ca 	bl	8002090 <HAL_GetTick>
 8003cfc:	0002      	movs	r2, r0
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d904      	bls.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003d06:	2313      	movs	r3, #19
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	701a      	strb	r2, [r3, #0]
        break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d10:	4b30      	ldr	r3, [pc, #192]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	d0ed      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003d1c:	2313      	movs	r3, #19
 8003d1e:	18fb      	adds	r3, r7, r3
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d15e      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003d26:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d2a:	23c0      	movs	r3, #192	; 0xc0
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4013      	ands	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d019      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d014      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	4a24      	ldr	r2, [pc, #144]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d50:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	0249      	lsls	r1, r1, #9
 8003d56:	430a      	orrs	r2, r1
 8003d58:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d60:	491e      	ldr	r1, [pc, #120]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003d62:	400a      	ands	r2, r1
 8003d64:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	4013      	ands	r3, r2
 8003d72:	d016      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d74:	f7fe f98c 	bl	8002090 <HAL_GetTick>
 8003d78:	0003      	movs	r3, r0
 8003d7a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d7c:	e00c      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7e:	f7fe f987 	bl	8002090 <HAL_GetTick>
 8003d82:	0002      	movs	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d904      	bls.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003d8e:	2313      	movs	r3, #19
 8003d90:	18fb      	adds	r3, r7, r3
 8003d92:	2203      	movs	r2, #3
 8003d94:	701a      	strb	r2, [r3, #0]
            break;
 8003d96:	e004      	b.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d0ed      	beq.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003da2:	2313      	movs	r3, #19
 8003da4:	18fb      	adds	r3, r7, r3
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dac:	4b08      	ldr	r3, [pc, #32]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	65da      	str	r2, [r3, #92]	; 0x5c
 8003dc0:	e016      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003dc2:	2312      	movs	r3, #18
 8003dc4:	18fb      	adds	r3, r7, r3
 8003dc6:	2213      	movs	r2, #19
 8003dc8:	18ba      	adds	r2, r7, r2
 8003dca:	7812      	ldrb	r2, [r2, #0]
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	e00f      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	fffffcff 	.word	0xfffffcff
 8003ddc:	fffeffff 	.word	0xfffeffff
 8003de0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de4:	2312      	movs	r3, #18
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	2213      	movs	r2, #19
 8003dea:	18ba      	adds	r2, r7, r2
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df0:	2311      	movs	r3, #17
 8003df2:	18fb      	adds	r3, r7, r3
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4bb6      	ldr	r3, [pc, #728]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfe:	4bb5      	ldr	r3, [pc, #724]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e00:	49b5      	ldr	r1, [pc, #724]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003e02:	400a      	ands	r2, r1
 8003e04:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e10:	4bb0      	ldr	r3, [pc, #704]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e14:	2203      	movs	r2, #3
 8003e16:	4393      	bics	r3, r2
 8003e18:	0019      	movs	r1, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4bad      	ldr	r3, [pc, #692]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e20:	430a      	orrs	r2, r1
 8003e22:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	d009      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e2e:	4ba9      	ldr	r3, [pc, #676]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e32:	220c      	movs	r2, #12
 8003e34:	4393      	bics	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4ba5      	ldr	r3, [pc, #660]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e3e:	430a      	orrs	r2, r1
 8003e40:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2204      	movs	r2, #4
 8003e48:	4013      	ands	r3, r2
 8003e4a:	d009      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e4c:	4ba1      	ldr	r3, [pc, #644]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e50:	2230      	movs	r2, #48	; 0x30
 8003e52:	4393      	bics	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	4b9e      	ldr	r3, [pc, #632]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2210      	movs	r2, #16
 8003e66:	4013      	ands	r3, r2
 8003e68:	d009      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e6a:	4b9a      	ldr	r3, [pc, #616]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	4a9b      	ldr	r2, [pc, #620]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003e70:	4013      	ands	r3, r2
 8003e72:	0019      	movs	r1, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	4b96      	ldr	r3, [pc, #600]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	2380      	movs	r3, #128	; 0x80
 8003e84:	015b      	lsls	r3, r3, #5
 8003e86:	4013      	ands	r3, r2
 8003e88:	d009      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003e8a:	4b92      	ldr	r3, [pc, #584]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8e:	4a94      	ldr	r2, [pc, #592]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003e90:	4013      	ands	r3, r2
 8003e92:	0019      	movs	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	4b8e      	ldr	r3, [pc, #568]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4013      	ands	r3, r2
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eaa:	4b8a      	ldr	r3, [pc, #552]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	4a8d      	ldr	r2, [pc, #564]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	0019      	movs	r1, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eb8:	4b86      	ldr	r3, [pc, #536]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	2380      	movs	r3, #128	; 0x80
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d009      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eca:	4b82      	ldr	r3, [pc, #520]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ece:	4a86      	ldr	r2, [pc, #536]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	0019      	movs	r1, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	4b7e      	ldr	r3, [pc, #504]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eda:	430a      	orrs	r2, r1
 8003edc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee8:	4b7a      	ldr	r3, [pc, #488]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	4a7f      	ldr	r2, [pc, #508]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	4b77      	ldr	r3, [pc, #476]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2240      	movs	r2, #64	; 0x40
 8003f02:	4013      	ands	r3, r2
 8003f04:	d009      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f06:	4b73      	ldr	r3, [pc, #460]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	4a79      	ldr	r2, [pc, #484]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003f0c:	4013      	ands	r3, r2
 8003f0e:	0019      	movs	r1, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	4b6f      	ldr	r3, [pc, #444]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f16:	430a      	orrs	r2, r1
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	01db      	lsls	r3, r3, #7
 8003f22:	4013      	ands	r3, r2
 8003f24:	d015      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f26:	4b6b      	ldr	r3, [pc, #428]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	0899      	lsrs	r1, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f32:	4b68      	ldr	r3, [pc, #416]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d106      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f44:	4b63      	ldr	r3, [pc, #396]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	4b62      	ldr	r3, [pc, #392]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	0249      	lsls	r1, r1, #9
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	2380      	movs	r3, #128	; 0x80
 8003f58:	031b      	lsls	r3, r3, #12
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	d009      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f5e:	4b5d      	ldr	r3, [pc, #372]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f62:	2240      	movs	r2, #64	; 0x40
 8003f64:	4393      	bics	r3, r2
 8003f66:	0019      	movs	r1, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f6c:	4b59      	ldr	r3, [pc, #356]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	2380      	movs	r3, #128	; 0x80
 8003f78:	039b      	lsls	r3, r3, #14
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d016      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f7e:	4b55      	ldr	r3, [pc, #340]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f82:	4a5c      	ldr	r2, [pc, #368]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003f84:	4013      	ands	r3, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f8c:	4b51      	ldr	r3, [pc, #324]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f8e:	430a      	orrs	r2, r1
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f96:	2380      	movs	r3, #128	; 0x80
 8003f98:	03db      	lsls	r3, r3, #15
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d106      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f9e:	4b4d      	ldr	r3, [pc, #308]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	4b4c      	ldr	r3, [pc, #304]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fa4:	2180      	movs	r1, #128	; 0x80
 8003fa6:	0449      	lsls	r1, r1, #17
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	2380      	movs	r3, #128	; 0x80
 8003fb2:	03db      	lsls	r3, r3, #15
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d016      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003fb8:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	4a4e      	ldr	r2, [pc, #312]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	0019      	movs	r1, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fc6:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	045b      	lsls	r3, r3, #17
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d106      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003fd8:	4b3e      	ldr	r3, [pc, #248]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fda:	68da      	ldr	r2, [r3, #12]
 8003fdc:	4b3d      	ldr	r3, [pc, #244]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003fde:	2180      	movs	r1, #128	; 0x80
 8003fe0:	0449      	lsls	r1, r1, #17
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	2380      	movs	r3, #128	; 0x80
 8003fec:	011b      	lsls	r3, r3, #4
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d014      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003ff2:	4b38      	ldr	r3, [pc, #224]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	4393      	bics	r3, r2
 8003ffa:	0019      	movs	r1, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	4b34      	ldr	r3, [pc, #208]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004002:	430a      	orrs	r2, r1
 8004004:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a1b      	ldr	r3, [r3, #32]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d106      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800400e:	4b31      	ldr	r3, [pc, #196]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004010:	68da      	ldr	r2, [r3, #12]
 8004012:	4b30      	ldr	r3, [pc, #192]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0249      	lsls	r1, r1, #9
 8004018:	430a      	orrs	r2, r1
 800401a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	019b      	lsls	r3, r3, #6
 8004024:	4013      	ands	r3, r2
 8004026:	d014      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004028:	4b2a      	ldr	r3, [pc, #168]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800402a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402c:	220c      	movs	r2, #12
 800402e:	4393      	bics	r3, r2
 8004030:	0019      	movs	r1, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004036:	4b27      	ldr	r3, [pc, #156]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004038:	430a      	orrs	r2, r1
 800403a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	2b04      	cmp	r3, #4
 8004042:	d106      	bne.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004044:	4b23      	ldr	r3, [pc, #140]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	4b22      	ldr	r3, [pc, #136]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800404a:	2180      	movs	r1, #128	; 0x80
 800404c:	0249      	lsls	r1, r1, #9
 800404e:	430a      	orrs	r2, r1
 8004050:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	045b      	lsls	r3, r3, #17
 800405a:	4013      	ands	r3, r2
 800405c:	d016      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800405e:	4b1d      	ldr	r3, [pc, #116]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	4a22      	ldr	r2, [pc, #136]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8004064:	4013      	ands	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800406c:	4b19      	ldr	r3, [pc, #100]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800406e:	430a      	orrs	r2, r1
 8004070:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	019b      	lsls	r3, r3, #6
 800407a:	429a      	cmp	r2, r3
 800407c:	d106      	bne.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8004084:	2180      	movs	r1, #128	; 0x80
 8004086:	0449      	lsls	r1, r1, #17
 8004088:	430a      	orrs	r2, r1
 800408a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	049b      	lsls	r3, r3, #18
 8004094:	4013      	ands	r3, r2
 8004096:	d016      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004098:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	4a10      	ldr	r2, [pc, #64]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800409e:	4013      	ands	r3, r2
 80040a0:	0019      	movs	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040a8:	430a      	orrs	r2, r1
 80040aa:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d106      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80040be:	2180      	movs	r1, #128	; 0x80
 80040c0:	0449      	lsls	r1, r1, #17
 80040c2:	430a      	orrs	r2, r1
 80040c4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80040c6:	2312      	movs	r3, #18
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	781b      	ldrb	r3, [r3, #0]
}
 80040cc:	0018      	movs	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	b006      	add	sp, #24
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40021000 	.word	0x40021000
 80040d8:	efffffff 	.word	0xefffffff
 80040dc:	fffff3ff 	.word	0xfffff3ff
 80040e0:	fffffcff 	.word	0xfffffcff
 80040e4:	fff3ffff 	.word	0xfff3ffff
 80040e8:	ffcfffff 	.word	0xffcfffff
 80040ec:	ffffcfff 	.word	0xffffcfff
 80040f0:	ffff3fff 	.word	0xffff3fff
 80040f4:	ffbfffff 	.word	0xffbfffff
 80040f8:	feffffff 	.word	0xfeffffff

080040fc <__libc_init_array>:
 80040fc:	b570      	push	{r4, r5, r6, lr}
 80040fe:	2600      	movs	r6, #0
 8004100:	4d0c      	ldr	r5, [pc, #48]	; (8004134 <__libc_init_array+0x38>)
 8004102:	4c0d      	ldr	r4, [pc, #52]	; (8004138 <__libc_init_array+0x3c>)
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	42a6      	cmp	r6, r4
 800410a:	d109      	bne.n	8004120 <__libc_init_array+0x24>
 800410c:	2600      	movs	r6, #0
 800410e:	f000 f821 	bl	8004154 <_init>
 8004112:	4d0a      	ldr	r5, [pc, #40]	; (800413c <__libc_init_array+0x40>)
 8004114:	4c0a      	ldr	r4, [pc, #40]	; (8004140 <__libc_init_array+0x44>)
 8004116:	1b64      	subs	r4, r4, r5
 8004118:	10a4      	asrs	r4, r4, #2
 800411a:	42a6      	cmp	r6, r4
 800411c:	d105      	bne.n	800412a <__libc_init_array+0x2e>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	00b3      	lsls	r3, r6, #2
 8004122:	58eb      	ldr	r3, [r5, r3]
 8004124:	4798      	blx	r3
 8004126:	3601      	adds	r6, #1
 8004128:	e7ee      	b.n	8004108 <__libc_init_array+0xc>
 800412a:	00b3      	lsls	r3, r6, #2
 800412c:	58eb      	ldr	r3, [r5, r3]
 800412e:	4798      	blx	r3
 8004130:	3601      	adds	r6, #1
 8004132:	e7f2      	b.n	800411a <__libc_init_array+0x1e>
 8004134:	0800422c 	.word	0x0800422c
 8004138:	0800422c 	.word	0x0800422c
 800413c:	0800422c 	.word	0x0800422c
 8004140:	08004230 	.word	0x08004230

08004144 <memset>:
 8004144:	0003      	movs	r3, r0
 8004146:	1882      	adds	r2, r0, r2
 8004148:	4293      	cmp	r3, r2
 800414a:	d100      	bne.n	800414e <memset+0xa>
 800414c:	4770      	bx	lr
 800414e:	7019      	strb	r1, [r3, #0]
 8004150:	3301      	adds	r3, #1
 8004152:	e7f9      	b.n	8004148 <memset+0x4>

08004154 <_init>:
 8004154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415a:	bc08      	pop	{r3}
 800415c:	469e      	mov	lr, r3
 800415e:	4770      	bx	lr

08004160 <_fini>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr
